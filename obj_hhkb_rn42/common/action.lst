   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB10:
  15               		.file 1 "./tmk_core/common/action.c"
   1:./tmk_core/common/action.c **** /*
   2:./tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action.c **** 
   4:./tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action.c **** (at your option) any later version.
   8:./tmk_core/common/action.c **** 
   9:./tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action.c **** GNU General Public License for more details.
  13:./tmk_core/common/action.c **** 
  14:./tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action.c **** */
  17:./tmk_core/common/action.c **** #include "host.h"
  18:./tmk_core/common/action.c **** #include "keycode.h"
  19:./tmk_core/common/action.c **** #include "keyboard.h"
  20:./tmk_core/common/action.c **** #include "mousekey.h"
  21:./tmk_core/common/action.c **** #include "command.h"
  22:./tmk_core/common/action.c **** #include "led.h"
  23:./tmk_core/common/action.c **** #include "backlight.h"
  24:./tmk_core/common/action.c **** #include "action_layer.h"
  25:./tmk_core/common/action.c **** #include "action_tapping.h"
  26:./tmk_core/common/action.c **** #include "action_macro.h"
  27:./tmk_core/common/action.c **** #include "action_util.h"
  28:./tmk_core/common/action.c **** #include "action.h"
  29:./tmk_core/common/action.c **** #include "hook.h"
  30:./tmk_core/common/action.c **** #include "wait.h"
  31:./tmk_core/common/action.c **** 
  32:./tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  33:./tmk_core/common/action.c **** #include "debug.h"
  34:./tmk_core/common/action.c **** #else
  35:./tmk_core/common/action.c **** #include "nodebug.h"
  36:./tmk_core/common/action.c **** #endif
  37:./tmk_core/common/action.c **** 
  38:./tmk_core/common/action.c **** 
  39:./tmk_core/common/action.c **** void action_exec(keyevent_t event)
  40:./tmk_core/common/action.c **** {
  16               		.loc 1 40 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  48               	.LBB4:
  49               	.LBB5:
  50               		.file 2 "./tmk_core/common/keyboard.h"
   1:./tmk_core/common/keyboard.h **** /*
   2:./tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.h **** 
   4:./tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.h **** (at your option) any later version.
   8:./tmk_core/common/keyboard.h **** 
   9:./tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.h **** 
  14:./tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.h **** */
  17:./tmk_core/common/keyboard.h **** 
  18:./tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:./tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:./tmk_core/common/keyboard.h **** 
  21:./tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:./tmk_core/common/keyboard.h **** #include <stdint.h>
  23:./tmk_core/common/keyboard.h **** 
  24:./tmk_core/common/keyboard.h **** 
  25:./tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:./tmk_core/common/keyboard.h **** extern "C" {
  27:./tmk_core/common/keyboard.h **** #endif
  28:./tmk_core/common/keyboard.h **** 
  29:./tmk_core/common/keyboard.h **** /* key matrix position */
  30:./tmk_core/common/keyboard.h **** typedef struct {
  31:./tmk_core/common/keyboard.h ****     uint8_t col;
  32:./tmk_core/common/keyboard.h ****     uint8_t row;
  33:./tmk_core/common/keyboard.h **** } keypos_t;
  34:./tmk_core/common/keyboard.h **** 
  35:./tmk_core/common/keyboard.h **** /* key event */
  36:./tmk_core/common/keyboard.h **** typedef struct {
  37:./tmk_core/common/keyboard.h ****     keypos_t key;
  38:./tmk_core/common/keyboard.h ****     bool     pressed;
  39:./tmk_core/common/keyboard.h ****     uint16_t time;
  40:./tmk_core/common/keyboard.h **** } keyevent_t;
  41:./tmk_core/common/keyboard.h **** 
  42:./tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:./tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:./tmk_core/common/keyboard.h **** 
  45:./tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:./tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:./tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:./tmk_core/common/keyboard.h ****  */
  49:./tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  51               		.loc 2 49 0
  52 001e 8A85      		ldd r24,Y+10
  53 0020 9B85      		ldd r25,Y+11
  54 0022 892B      		or r24,r25
  55 0024 01F0      		breq .L6
  56 0026 5F3F      		cpi r21,lo8(-1)
  57 0028 01F0      		breq .L3
  58               	.L4:
  59 002a 80E0      		ldi r24,0
  60 002c 00C0      		rjmp .L2
  61               	.LVL1:
  62               	.L3:
  63 002e 4F3F      		cpi r20,lo8(-1)
  64 0030 01F4      		brne .L4
  65               	.L6:
  66 0032 81E0      		ldi r24,lo8(1)
  67               	.LVL2:
  68               	.L2:
  69               	.LBE5:
  70               	.LBE4:
  41:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  71               		.loc 1 41 0
  72 0034 8111      		cpse r24,__zero_reg__
  73 0036 00C0      		rjmp .L5
  42:./tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  43:./tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  44:./tmk_core/common/action.c ****         hook_matrix_change(event);
  74               		.loc 1 44 0
  75 0038 4F81      		ldd r20,Y+7
  76               	.LVL3:
  77 003a 5885      		ldd r21,Y+8
  78               	.LVL4:
  79 003c 6985      		ldd r22,Y+9
  80 003e 7A85      		ldd r23,Y+10
  81 0040 8B85      		ldd r24,Y+11
  82 0042 0E94 0000 		call hook_matrix_change
  83               	.LVL5:
  84               	.L5:
  45:./tmk_core/common/action.c ****     }
  46:./tmk_core/common/action.c **** 
  47:./tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  85               		.loc 1 47 0
  86 0046 DE01      		movw r26,r28
  87 0048 1196      		adiw r26,1
  88 004a 86E0      		ldi r24,lo8(6)
  89 004c FD01      		movw r30,r26
  90               		0:
  91 004e 1192      		st Z+,__zero_reg__
  92 0050 8A95      		dec r24
  93 0052 01F4      		brne 0b
  94 0054 85E0      		ldi r24,lo8(5)
  95 0056 FE01      		movw r30,r28
  96 0058 3796      		adiw r30,7
  97               		0:
  98 005a 0190      		ld r0,Z+
  99 005c 0D92      		st X+,r0
 100 005e 8A95      		dec r24
 101 0060 01F4      		brne 0b
  48:./tmk_core/common/action.c **** 
  49:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  50:./tmk_core/common/action.c ****     action_tapping_process(record);
 102               		.loc 1 50 0
 103 0062 4981      		ldd r20,Y+1
 104 0064 5A81      		ldd r21,Y+2
 105 0066 6B81      		ldd r22,Y+3
 106 0068 7C81      		ldd r23,Y+4
 107 006a 8D81      		ldd r24,Y+5
 108 006c 9E81      		ldd r25,Y+6
 109 006e 0E94 0000 		call action_tapping_process
 110               	.LVL6:
 111               	/* epilogue start */
  51:./tmk_core/common/action.c **** #else
  52:./tmk_core/common/action.c ****     process_action(&record);
  53:./tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  54:./tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  55:./tmk_core/common/action.c ****     }
  56:./tmk_core/common/action.c **** #endif
  57:./tmk_core/common/action.c **** }
 112               		.loc 1 57 0
 113 0072 2B96      		adiw r28,11
 114 0074 0FB6      		in __tmp_reg__,__SREG__
 115 0076 F894      		cli
 116 0078 DEBF      		out __SP_H__,r29
 117 007a 0FBE      		out __SREG__,__tmp_reg__
 118 007c CDBF      		out __SP_L__,r28
 119 007e DF91      		pop r29
 120 0080 CF91      		pop r28
 121 0082 0895      		ret
 122               		.cfi_endproc
 123               	.LFE10:
 125               		.section	.text.register_code,"ax",@progbits
 126               	.global	register_code
 128               	register_code:
 129               	.LFB12:
  58:./tmk_core/common/action.c **** 
  59:./tmk_core/common/action.c **** void process_action(keyrecord_t *record)
  60:./tmk_core/common/action.c **** {
  61:./tmk_core/common/action.c ****     keyevent_t event = record->event;
  62:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  63:./tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
  64:./tmk_core/common/action.c **** #endif
  65:./tmk_core/common/action.c **** 
  66:./tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
  67:./tmk_core/common/action.c **** 
  68:./tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
  69:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  70:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  71:./tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  72:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  73:./tmk_core/common/action.c **** #endif
  74:./tmk_core/common/action.c ****     dprintln();
  75:./tmk_core/common/action.c **** 
  76:./tmk_core/common/action.c ****     switch (action.kind.id) {
  77:./tmk_core/common/action.c ****         /* Key and Mods */
  78:./tmk_core/common/action.c ****         case ACT_LMODS:
  79:./tmk_core/common/action.c ****         case ACT_RMODS:
  80:./tmk_core/common/action.c ****             {
  81:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  82:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
  83:./tmk_core/common/action.c ****                 if (event.pressed) {
  84:./tmk_core/common/action.c ****                     if (mods) {
  85:./tmk_core/common/action.c ****                         add_weak_mods(mods);
  86:./tmk_core/common/action.c ****                         send_keyboard_report();
  87:./tmk_core/common/action.c ****                     }
  88:./tmk_core/common/action.c ****                     register_code(action.key.code);
  89:./tmk_core/common/action.c ****                 } else {
  90:./tmk_core/common/action.c ****                     unregister_code(action.key.code);
  91:./tmk_core/common/action.c ****                     if (mods) {
  92:./tmk_core/common/action.c ****                         del_weak_mods(mods);
  93:./tmk_core/common/action.c ****                         send_keyboard_report();
  94:./tmk_core/common/action.c ****                     }
  95:./tmk_core/common/action.c ****                 }
  96:./tmk_core/common/action.c ****             }
  97:./tmk_core/common/action.c ****             break;
  98:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  99:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 100:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 101:./tmk_core/common/action.c ****             {
 102:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 103:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 104:./tmk_core/common/action.c ****                 switch (action.key.code) {
 105:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 106:./tmk_core/common/action.c ****                     case MODS_ONESHOT:
 107:./tmk_core/common/action.c ****                         // Oneshot modifier
 108:./tmk_core/common/action.c ****                         if (event.pressed) {
 109:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 110:./tmk_core/common/action.c ****                                 register_mods(mods);
 111:./tmk_core/common/action.c ****                             }
 112:./tmk_core/common/action.c ****                             else if (tap_count == 1) {
 113:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 114:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 115:./tmk_core/common/action.c ****                             }
 116:./tmk_core/common/action.c ****                             else {
 117:./tmk_core/common/action.c ****                                 register_mods(mods);
 118:./tmk_core/common/action.c ****                             }
 119:./tmk_core/common/action.c ****                         } else {
 120:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 121:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 122:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 123:./tmk_core/common/action.c ****                             }
 124:./tmk_core/common/action.c ****                             else if (tap_count == 1) {
 125:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 126:./tmk_core/common/action.c ****                             }
 127:./tmk_core/common/action.c ****                             else {
 128:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 129:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 130:./tmk_core/common/action.c ****                             }
 131:./tmk_core/common/action.c ****                         }
 132:./tmk_core/common/action.c ****                         break;
 133:./tmk_core/common/action.c ****     #endif
 134:./tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 135:./tmk_core/common/action.c ****                         if (event.pressed) {
 136:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 137:./tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 138:./tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 139:./tmk_core/common/action.c ****                                     unregister_mods(mods);
 140:./tmk_core/common/action.c ****                                 } else {
 141:./tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods on\n");
 142:./tmk_core/common/action.c ****                                     register_mods(mods);
 143:./tmk_core/common/action.c ****                                 }
 144:./tmk_core/common/action.c ****                             }
 145:./tmk_core/common/action.c ****                         } else {
 146:./tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 147:./tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 148:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 149:./tmk_core/common/action.c ****                             }
 150:./tmk_core/common/action.c ****                         }
 151:./tmk_core/common/action.c ****                         break;
 152:./tmk_core/common/action.c ****                     default:
 153:./tmk_core/common/action.c ****                         if (event.pressed) {
 154:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 155:./tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 156:./tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 157:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 158:./tmk_core/common/action.c ****                                     record->tap.count = 0;
 159:./tmk_core/common/action.c ****                                     register_mods(mods);
 160:./tmk_core/common/action.c ****                                 } else {
 161:./tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 162:./tmk_core/common/action.c ****                                     register_code(action.key.code);
 163:./tmk_core/common/action.c ****                                 }
 164:./tmk_core/common/action.c ****                             } else {
 165:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 166:./tmk_core/common/action.c ****                                 register_mods(mods);
 167:./tmk_core/common/action.c ****                             }
 168:./tmk_core/common/action.c ****                         } else {
 169:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 170:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 171:./tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 172:./tmk_core/common/action.c ****                             } else {
 173:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 174:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 175:./tmk_core/common/action.c ****                             }
 176:./tmk_core/common/action.c ****                         }
 177:./tmk_core/common/action.c ****                         break;
 178:./tmk_core/common/action.c ****                 }
 179:./tmk_core/common/action.c ****             }
 180:./tmk_core/common/action.c ****             break;
 181:./tmk_core/common/action.c **** #endif
 182:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 183:./tmk_core/common/action.c ****         /* other HID usage */
 184:./tmk_core/common/action.c ****         case ACT_USAGE:
 185:./tmk_core/common/action.c ****             switch (action.usage.page) {
 186:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 187:./tmk_core/common/action.c ****                     if (event.pressed) {
 188:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 189:./tmk_core/common/action.c ****                     } else {
 190:./tmk_core/common/action.c ****                         host_system_send(0);
 191:./tmk_core/common/action.c ****                     }
 192:./tmk_core/common/action.c ****                     break;
 193:./tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 194:./tmk_core/common/action.c ****                     if (event.pressed) {
 195:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 196:./tmk_core/common/action.c ****                     } else {
 197:./tmk_core/common/action.c ****                         host_consumer_send(0);
 198:./tmk_core/common/action.c ****                     }
 199:./tmk_core/common/action.c ****                     break;
 200:./tmk_core/common/action.c ****             }
 201:./tmk_core/common/action.c ****             break;
 202:./tmk_core/common/action.c **** #endif
 203:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 204:./tmk_core/common/action.c ****         /* Mouse key */
 205:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 206:./tmk_core/common/action.c ****             if (event.pressed) {
 207:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 208:./tmk_core/common/action.c ****                 mousekey_send();
 209:./tmk_core/common/action.c ****             } else {
 210:./tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 211:./tmk_core/common/action.c ****                 mousekey_send();
 212:./tmk_core/common/action.c ****             }
 213:./tmk_core/common/action.c ****             break;
 214:./tmk_core/common/action.c **** #endif
 215:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 216:./tmk_core/common/action.c ****         case ACT_LAYER:
 217:./tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 218:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 219:./tmk_core/common/action.c ****                 if (!event.pressed) {
 220:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 221:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 222:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 223:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 224:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 225:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 226:./tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 227:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 228:./tmk_core/common/action.c ****                     }
 229:./tmk_core/common/action.c ****                 }
 230:./tmk_core/common/action.c ****             } else {
 231:./tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 232:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 233:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 234:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 235:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 236:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 237:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 238:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 239:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 240:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 241:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 242:./tmk_core/common/action.c ****                     }
 243:./tmk_core/common/action.c ****                 }
 244:./tmk_core/common/action.c ****             }
 245:./tmk_core/common/action.c ****             break;
 246:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 247:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 248:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 249:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 250:./tmk_core/common/action.c ****                 case 0xc0 ... 0xdf:
 251:./tmk_core/common/action.c ****                     /* layer On/Off with modifiers */
 252:./tmk_core/common/action.c ****                     if (event.pressed) {
 253:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 254:./tmk_core/common/action.c ****                         register_mods((action.layer_tap.code & 0x10) ?
 255:./tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 256:./tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f));
 257:./tmk_core/common/action.c ****                     } else {
 258:./tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 259:./tmk_core/common/action.c ****                         unregister_mods((action.layer_tap.code & 0x10) ?
 260:./tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 261:./tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f));
 262:./tmk_core/common/action.c ****                     }
 263:./tmk_core/common/action.c ****                     break;
 264:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 265:./tmk_core/common/action.c ****                     /* tap toggle */
 266:./tmk_core/common/action.c ****                     if (event.pressed) {
 267:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 268:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 269:./tmk_core/common/action.c ****                         }
 270:./tmk_core/common/action.c ****                     } else {
 271:./tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 272:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 273:./tmk_core/common/action.c ****                         }
 274:./tmk_core/common/action.c ****                     }
 275:./tmk_core/common/action.c ****                     break;
 276:./tmk_core/common/action.c ****                 case OP_ON_OFF:
 277:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 278:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 279:./tmk_core/common/action.c ****                     break;
 280:./tmk_core/common/action.c ****                 case OP_OFF_ON:
 281:./tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 282:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 283:./tmk_core/common/action.c ****                     break;
 284:./tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 285:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 286:./tmk_core/common/action.c ****                                     layer_clear();
 287:./tmk_core/common/action.c ****                     break;
 288:./tmk_core/common/action.c ****                 default:
 289:./tmk_core/common/action.c ****                     /* tap key */
 290:./tmk_core/common/action.c ****                     if (event.pressed) {
 291:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 292:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 293:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 294:./tmk_core/common/action.c ****                         } else {
 295:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 296:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 297:./tmk_core/common/action.c ****                         }
 298:./tmk_core/common/action.c ****                     } else {
 299:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 300:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 301:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 302:./tmk_core/common/action.c ****                         } else {
 303:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 304:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 305:./tmk_core/common/action.c ****                         }
 306:./tmk_core/common/action.c ****                     }
 307:./tmk_core/common/action.c ****                     break;
 308:./tmk_core/common/action.c ****             }
 309:./tmk_core/common/action.c ****             break;
 310:./tmk_core/common/action.c ****     #endif
 311:./tmk_core/common/action.c **** #endif
 312:./tmk_core/common/action.c ****         /* Extentions */
 313:./tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 314:./tmk_core/common/action.c ****         case ACT_MACRO:
 315:./tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 316:./tmk_core/common/action.c ****             break;
 317:./tmk_core/common/action.c **** #endif
 318:./tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 319:./tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 320:./tmk_core/common/action.c ****             if (!event.pressed) {
 321:./tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 322:./tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 323:./tmk_core/common/action.c ****                         backlight_increase();
 324:./tmk_core/common/action.c ****                         break;
 325:./tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 326:./tmk_core/common/action.c ****                         backlight_decrease();
 327:./tmk_core/common/action.c ****                         break;
 328:./tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 329:./tmk_core/common/action.c ****                         backlight_toggle();
 330:./tmk_core/common/action.c ****                         break;
 331:./tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 332:./tmk_core/common/action.c ****                         backlight_step();
 333:./tmk_core/common/action.c ****                         break;
 334:./tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 335:./tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 336:./tmk_core/common/action.c ****                         break;
 337:./tmk_core/common/action.c ****                 }
 338:./tmk_core/common/action.c ****             }
 339:./tmk_core/common/action.c ****             break;
 340:./tmk_core/common/action.c **** #endif
 341:./tmk_core/common/action.c ****         case ACT_COMMAND:
 342:./tmk_core/common/action.c ****             break;
 343:./tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 344:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 345:./tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 346:./tmk_core/common/action.c ****             break;
 347:./tmk_core/common/action.c **** #endif
 348:./tmk_core/common/action.c ****         default:
 349:./tmk_core/common/action.c ****             break;
 350:./tmk_core/common/action.c ****     }
 351:./tmk_core/common/action.c **** }
 352:./tmk_core/common/action.c **** 
 353:./tmk_core/common/action.c **** 
 354:./tmk_core/common/action.c **** 
 355:./tmk_core/common/action.c **** 
 356:./tmk_core/common/action.c **** /*
 357:./tmk_core/common/action.c ****  * Utilities for actions.
 358:./tmk_core/common/action.c ****  */
 359:./tmk_core/common/action.c **** void register_code(uint8_t code)
 360:./tmk_core/common/action.c **** {
 130               		.loc 1 360 0
 131               		.cfi_startproc
 132               	.LVL7:
 133 0000 CF93      		push r28
 134               	.LCFI4:
 135               		.cfi_def_cfa_offset 3
 136               		.cfi_offset 28, -2
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 1 */
 140               	.L__stack_usage = 1
 141 0002 C82F      		mov r28,r24
 361:./tmk_core/common/action.c ****     if (code == KC_NO) {
 142               		.loc 1 361 0
 143 0004 8823      		tst r24
 144 0006 01F4      		brne .+2
 145 0008 00C0      		rjmp .L8
 362:./tmk_core/common/action.c ****         return;
 363:./tmk_core/common/action.c ****     }
 364:./tmk_core/common/action.c **** 
 365:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 366:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 367:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 368:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 369:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 370:./tmk_core/common/action.c **** #endif
 371:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 372:./tmk_core/common/action.c ****         send_keyboard_report();
 373:./tmk_core/common/action.c ****         wait_ms(100);
 374:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 375:./tmk_core/common/action.c ****         send_keyboard_report();
 376:./tmk_core/common/action.c ****     }
 377:./tmk_core/common/action.c **** 
 378:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 379:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 380:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 381:./tmk_core/common/action.c **** #endif
 382:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 383:./tmk_core/common/action.c ****         send_keyboard_report();
 384:./tmk_core/common/action.c ****         wait_ms(100);
 385:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 386:./tmk_core/common/action.c ****         send_keyboard_report();
 387:./tmk_core/common/action.c ****     }
 388:./tmk_core/common/action.c **** 
 389:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 390:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 391:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 392:./tmk_core/common/action.c **** #endif
 393:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 394:./tmk_core/common/action.c ****         send_keyboard_report();
 395:./tmk_core/common/action.c ****         wait_ms(100);
 396:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 397:./tmk_core/common/action.c ****         send_keyboard_report();
 398:./tmk_core/common/action.c ****     }
 399:./tmk_core/common/action.c **** #endif
 400:./tmk_core/common/action.c **** 
 401:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 146               		.loc 1 401 0
 147 000a 8CEF      		ldi r24,lo8(-4)
 148               	.LVL8:
 149 000c 8C0F      		add r24,r28
 150 000e 813A      		cpi r24,lo8(-95)
 151 0010 00F4      		brsh .L11
 402:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 403:./tmk_core/common/action.c ****         if (command_proc(code)) return;
 152               		.loc 1 403 0
 153 0012 8C2F      		mov r24,r28
 154 0014 0E94 0000 		call command_proc
 155               	.LVL9:
 156 0018 8111      		cpse r24,__zero_reg__
 157 001a 00C0      		rjmp .L8
 404:./tmk_core/common/action.c **** 
 405:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 406:./tmk_core/common/action.c **** /* TODO: remove
 407:./tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 408:./tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 409:./tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 410:./tmk_core/common/action.c **** 
 411:./tmk_core/common/action.c ****             add_key(code);
 412:./tmk_core/common/action.c ****             send_keyboard_report();
 413:./tmk_core/common/action.c **** 
 414:./tmk_core/common/action.c ****             set_mods(tmp_mods);
 415:./tmk_core/common/action.c ****             send_keyboard_report();
 416:./tmk_core/common/action.c ****             oneshot_cancel();
 417:./tmk_core/common/action.c ****         } else 
 418:./tmk_core/common/action.c **** */
 419:./tmk_core/common/action.c **** #endif
 420:./tmk_core/common/action.c ****         {
 421:./tmk_core/common/action.c ****             add_key(code);
 158               		.loc 1 421 0
 159 001c 8C2F      		mov r24,r28
 160 001e 0E94 0000 		call add_key
 161               	.LVL10:
 162 0022 00C0      		rjmp .L40
 163               	.L11:
 422:./tmk_core/common/action.c ****             send_keyboard_report();
 423:./tmk_core/common/action.c ****         }
 424:./tmk_core/common/action.c ****     }
 425:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 164               		.loc 1 425 0
 165 0024 80E2      		ldi r24,lo8(32)
 166 0026 8C0F      		add r24,r28
 167 0028 8830      		cpi r24,lo8(8)
 168 002a 00F4      		brsh .L13
 426:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 169               		.loc 1 426 0
 170 002c C770      		andi r28,lo8(7)
 171               	.LVL11:
 172 002e 81E0      		ldi r24,lo8(1)
 173 0030 00C0      		rjmp 2f
 174               		1:
 175 0032 880F      		lsl r24
 176               		2:
 177 0034 CA95      		dec r28
 178 0036 02F4      		brpl 1b
 179 0038 0E94 0000 		call add_mods
 180               	.LVL12:
 181               	.L40:
 182               	/* epilogue start */
 427:./tmk_core/common/action.c ****         send_keyboard_report();
 428:./tmk_core/common/action.c ****     }
 429:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 430:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 431:./tmk_core/common/action.c ****     }
 432:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 434:./tmk_core/common/action.c ****     }
 435:./tmk_core/common/action.c **** }
 183               		.loc 1 435 0
 184 003c CF91      		pop r28
 427:./tmk_core/common/action.c ****         send_keyboard_report();
 185               		.loc 1 427 0
 186 003e 0C94 0000 		jmp send_keyboard_report
 187               	.LVL13:
 188               	.L13:
 429:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 189               		.loc 1 429 0
 190 0042 8BE5      		ldi r24,lo8(91)
 191 0044 8C0F      		add r24,r28
 192 0046 8330      		cpi r24,lo8(3)
 193 0048 00F4      		brsh .L14
 430:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 194               		.loc 1 430 0
 195 004a C53A      		cpi r28,lo8(-91)
 196 004c 01F0      		breq .L17
 430:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 197               		.loc 1 430 0 is_stmt 0 discriminator 1
 198 004e C63A      		cpi r28,lo8(-90)
 199 0050 01F4      		brne .L18
 430:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 200               		.loc 1 430 0
 201 0052 82E8      		ldi r24,lo8(-126)
 202 0054 90E0      		ldi r25,0
 203 0056 00C0      		rjmp .L15
 204               	.L17:
 205 0058 81E8      		ldi r24,lo8(-127)
 206 005a 90E0      		ldi r25,0
 207 005c 00C0      		rjmp .L15
 208               	.L18:
 209 005e 83E8      		ldi r24,lo8(-125)
 210 0060 90E0      		ldi r25,0
 211               	.L15:
 212               	/* epilogue start */
 213               		.loc 1 435 0 is_stmt 1 discriminator 4
 214 0062 CF91      		pop r28
 215               	.LVL14:
 430:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 216               		.loc 1 430 0 discriminator 4
 217 0064 0C94 0000 		jmp host_system_send
 218               	.LVL15:
 219               	.L14:
 432:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 220               		.loc 1 432 0
 221 0068 88E5      		ldi r24,lo8(88)
 222 006a 8C0F      		add r24,r28
 223 006c 8531      		cpi r24,lo8(21)
 224 006e 00F0      		brlo .+2
 225 0070 00C0      		rjmp .L8
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 226               		.loc 1 433 0
 227 0072 C83A      		cpi r28,lo8(-88)
 228 0074 01F0      		breq .L19
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 229               		.loc 1 433 0 is_stmt 0 discriminator 1
 230 0076 C93A      		cpi r28,lo8(-87)
 231 0078 01F0      		breq .L20
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 232               		.loc 1 433 0 discriminator 3
 233 007a CA3A      		cpi r28,lo8(-86)
 234 007c 01F0      		breq .L21
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 235               		.loc 1 433 0 discriminator 5
 236 007e CB3A      		cpi r28,lo8(-85)
 237 0080 01F0      		breq .L22
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 238               		.loc 1 433 0 discriminator 7
 239 0082 CC3A      		cpi r28,lo8(-84)
 240 0084 01F0      		breq .L23
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 241               		.loc 1 433 0 discriminator 9
 242 0086 CD3A      		cpi r28,lo8(-83)
 243 0088 01F0      		breq .L24
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 244               		.loc 1 433 0 discriminator 11
 245 008a CE3A      		cpi r28,lo8(-82)
 246 008c 01F0      		breq .L25
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 247               		.loc 1 433 0 discriminator 13
 248 008e CF3A      		cpi r28,lo8(-81)
 249 0090 01F0      		breq .L26
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 250               		.loc 1 433 0 discriminator 15
 251 0092 C13B      		cpi r28,lo8(-79)
 252 0094 01F0      		breq .L27
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 253               		.loc 1 433 0 discriminator 17
 254 0096 C03B      		cpi r28,lo8(-80)
 255 0098 01F0      		breq .L28
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 256               		.loc 1 433 0 discriminator 19
 257 009a C23B      		cpi r28,lo8(-78)
 258 009c 01F0      		breq .L29
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 259               		.loc 1 433 0 discriminator 21
 260 009e C33B      		cpi r28,lo8(-77)
 261 00a0 01F0      		breq .L30
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 262               		.loc 1 433 0 discriminator 23
 263 00a2 C43B      		cpi r28,lo8(-76)
 264 00a4 01F0      		breq .L31
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 265               		.loc 1 433 0 discriminator 25
 266 00a6 C53B      		cpi r28,lo8(-75)
 267 00a8 01F0      		breq .L32
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 268               		.loc 1 433 0 discriminator 27
 269 00aa C63B      		cpi r28,lo8(-74)
 270 00ac 01F0      		breq .L33
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 271               		.loc 1 433 0 discriminator 29
 272 00ae C73B      		cpi r28,lo8(-73)
 273 00b0 01F0      		breq .L34
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 274               		.loc 1 433 0 discriminator 31
 275 00b2 C83B      		cpi r28,lo8(-72)
 276 00b4 01F0      		breq .L35
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 277               		.loc 1 433 0 discriminator 33
 278 00b6 C93B      		cpi r28,lo8(-71)
 279 00b8 01F0      		breq .L36
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 280               		.loc 1 433 0 discriminator 35
 281 00ba CA3B      		cpi r28,lo8(-70)
 282 00bc 01F0      		breq .L37
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 283               		.loc 1 433 0 discriminator 37
 284 00be CB3B      		cpi r28,lo8(-69)
 285 00c0 01F0      		breq .L38
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 286               		.loc 1 433 0 discriminator 39
 287 00c2 CC3B      		cpi r28,lo8(-68)
 288 00c4 01F0      		breq .+2
 289 00c6 00C0      		rjmp .L39
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 290               		.loc 1 433 0
 291 00c8 8AE2      		ldi r24,lo8(42)
 292 00ca 92E0      		ldi r25,lo8(2)
 293 00cc 00C0      		rjmp .L16
 294               	.L19:
 295 00ce 82EE      		ldi r24,lo8(-30)
 296 00d0 90E0      		ldi r25,0
 297 00d2 00C0      		rjmp .L16
 298               	.L20:
 299 00d4 89EE      		ldi r24,lo8(-23)
 300 00d6 90E0      		ldi r25,0
 301 00d8 00C0      		rjmp .L16
 302               	.L21:
 303 00da 8AEE      		ldi r24,lo8(-22)
 304 00dc 90E0      		ldi r25,0
 305 00de 00C0      		rjmp .L16
 306               	.L22:
 307 00e0 85EB      		ldi r24,lo8(-75)
 308 00e2 90E0      		ldi r25,0
 309 00e4 00C0      		rjmp .L16
 310               	.L23:
 311 00e6 86EB      		ldi r24,lo8(-74)
 312 00e8 90E0      		ldi r25,0
 313 00ea 00C0      		rjmp .L16
 314               	.L24:
 315 00ec 83EB      		ldi r24,lo8(-77)
 316 00ee 90E0      		ldi r25,0
 317 00f0 00C0      		rjmp .L16
 318               	.L25:
 319 00f2 84EB      		ldi r24,lo8(-76)
 320 00f4 90E0      		ldi r25,0
 321 00f6 00C0      		rjmp .L16
 322               	.L26:
 323 00f8 87EB      		ldi r24,lo8(-73)
 324 00fa 90E0      		ldi r25,0
 325 00fc 00C0      		rjmp .L16
 326               	.L27:
 327 00fe 8CEC      		ldi r24,lo8(-52)
 328 0100 90E0      		ldi r25,0
 329 0102 00C0      		rjmp .L16
 330               	.L28:
 331 0104 8DEC      		ldi r24,lo8(-51)
 332 0106 90E0      		ldi r25,0
 333 0108 00C0      		rjmp .L16
 334               	.L29:
 335 010a 83E8      		ldi r24,lo8(-125)
 336 010c 91E0      		ldi r25,lo8(1)
 337 010e 00C0      		rjmp .L16
 338               	.L30:
 339 0110 8AE8      		ldi r24,lo8(-118)
 340 0112 91E0      		ldi r25,lo8(1)
 341 0114 00C0      		rjmp .L16
 342               	.L31:
 343 0116 82E9      		ldi r24,lo8(-110)
 344 0118 91E0      		ldi r25,lo8(1)
 345 011a 00C0      		rjmp .L16
 346               	.L32:
 347 011c 84E9      		ldi r24,lo8(-108)
 348 011e 91E0      		ldi r25,lo8(1)
 349 0120 00C0      		rjmp .L16
 350               	.L33:
 351 0122 81E2      		ldi r24,lo8(33)
 352 0124 92E0      		ldi r25,lo8(2)
 353 0126 00C0      		rjmp .L16
 354               	.L34:
 355 0128 83E2      		ldi r24,lo8(35)
 356 012a 92E0      		ldi r25,lo8(2)
 357 012c 00C0      		rjmp .L16
 358               	.L35:
 359 012e 84E2      		ldi r24,lo8(36)
 360 0130 92E0      		ldi r25,lo8(2)
 361 0132 00C0      		rjmp .L16
 362               	.L36:
 363 0134 85E2      		ldi r24,lo8(37)
 364 0136 92E0      		ldi r25,lo8(2)
 365 0138 00C0      		rjmp .L16
 366               	.L37:
 367 013a 86E2      		ldi r24,lo8(38)
 368 013c 92E0      		ldi r25,lo8(2)
 369 013e 00C0      		rjmp .L16
 370               	.L38:
 371 0140 87E2      		ldi r24,lo8(39)
 372 0142 92E0      		ldi r25,lo8(2)
 373 0144 00C0      		rjmp .L16
 374               	.L39:
 375 0146 80E0      		ldi r24,0
 376 0148 90E0      		ldi r25,0
 377               	.L16:
 378               	/* epilogue start */
 379               		.loc 1 435 0 is_stmt 1 discriminator 43
 380 014a CF91      		pop r28
 381               	.LVL16:
 433:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 382               		.loc 1 433 0 discriminator 43
 383 014c 0C94 0000 		jmp host_consumer_send
 384               	.LVL17:
 385               	.L8:
 386               	/* epilogue start */
 387               		.loc 1 435 0
 388 0150 CF91      		pop r28
 389               	.LVL18:
 390 0152 0895      		ret
 391               		.cfi_endproc
 392               	.LFE12:
 394               		.section	.text.unregister_code,"ax",@progbits
 395               	.global	unregister_code
 397               	unregister_code:
 398               	.LFB13:
 436:./tmk_core/common/action.c **** 
 437:./tmk_core/common/action.c **** void unregister_code(uint8_t code)
 438:./tmk_core/common/action.c **** {
 399               		.loc 1 438 0
 400               		.cfi_startproc
 401               	.LVL19:
 402               	/* prologue: function */
 403               	/* frame size = 0 */
 404               	/* stack size = 0 */
 405               	.L__stack_usage = 0
 439:./tmk_core/common/action.c ****     if (code == KC_NO) {
 406               		.loc 1 439 0
 407 0000 8823      		tst r24
 408 0002 01F0      		breq .L41
 440:./tmk_core/common/action.c ****         return;
 441:./tmk_core/common/action.c ****     }
 442:./tmk_core/common/action.c **** 
 443:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 444:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 445:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 446:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 447:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 448:./tmk_core/common/action.c **** #endif
 449:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 450:./tmk_core/common/action.c ****         send_keyboard_report();
 451:./tmk_core/common/action.c ****         wait_ms(100);
 452:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 453:./tmk_core/common/action.c ****         send_keyboard_report();
 454:./tmk_core/common/action.c ****     }
 455:./tmk_core/common/action.c **** 
 456:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 457:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 458:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 459:./tmk_core/common/action.c **** #endif
 460:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 461:./tmk_core/common/action.c ****         send_keyboard_report();
 462:./tmk_core/common/action.c ****         wait_ms(100);
 463:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 464:./tmk_core/common/action.c ****         send_keyboard_report();
 465:./tmk_core/common/action.c ****     }
 466:./tmk_core/common/action.c **** 
 467:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 468:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 469:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 470:./tmk_core/common/action.c **** #endif
 471:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 472:./tmk_core/common/action.c ****         send_keyboard_report();
 473:./tmk_core/common/action.c ****         wait_ms(100);
 474:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 475:./tmk_core/common/action.c ****         send_keyboard_report();
 476:./tmk_core/common/action.c ****     }
 477:./tmk_core/common/action.c **** #endif
 478:./tmk_core/common/action.c **** 
 479:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 409               		.loc 1 479 0
 410 0004 9CEF      		ldi r25,lo8(-4)
 411 0006 980F      		add r25,r24
 412 0008 913A      		cpi r25,lo8(-95)
 413 000a 00F4      		brsh .L43
 480:./tmk_core/common/action.c ****         del_key(code);
 414               		.loc 1 480 0
 415 000c 0E94 0000 		call del_key
 416               	.LVL20:
 417 0010 00C0      		rjmp .L49
 418               	.LVL21:
 419               	.L43:
 481:./tmk_core/common/action.c ****         send_keyboard_report();
 482:./tmk_core/common/action.c ****     }
 483:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 420               		.loc 1 483 0
 421 0012 90E2      		ldi r25,lo8(32)
 422 0014 980F      		add r25,r24
 423 0016 9830      		cpi r25,lo8(8)
 424 0018 00F4      		brsh .L44
 484:./tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 425               		.loc 1 484 0
 426 001a 8770      		andi r24,lo8(7)
 427               	.LVL22:
 428 001c 91E0      		ldi r25,lo8(1)
 429 001e 00C0      		rjmp 2f
 430               		1:
 431 0020 990F      		lsl r25
 432               		2:
 433 0022 8A95      		dec r24
 434 0024 02F4      		brpl 1b
 435 0026 892F      		mov r24,r25
 436 0028 0E94 0000 		call del_mods
 437               	.LVL23:
 438               	.L49:
 485:./tmk_core/common/action.c ****         send_keyboard_report();
 439               		.loc 1 485 0
 440 002c 0C94 0000 		jmp send_keyboard_report
 441               	.LVL24:
 442               	.L44:
 486:./tmk_core/common/action.c ****     }
 487:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 443               		.loc 1 487 0
 444 0030 9BE5      		ldi r25,lo8(91)
 445 0032 980F      		add r25,r24
 446 0034 9330      		cpi r25,lo8(3)
 447 0036 00F4      		brsh .L45
 488:./tmk_core/common/action.c ****         host_system_send(0);
 448               		.loc 1 488 0
 449 0038 80E0      		ldi r24,0
 450 003a 90E0      		ldi r25,0
 451               	.LVL25:
 452 003c 0C94 0000 		jmp host_system_send
 453               	.LVL26:
 454               	.L45:
 489:./tmk_core/common/action.c ****     }
 490:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 455               		.loc 1 490 0
 456 0040 885A      		subi r24,lo8(-(88))
 457               	.LVL27:
 458 0042 8531      		cpi r24,lo8(21)
 459 0044 00F4      		brsh .L41
 491:./tmk_core/common/action.c ****         host_consumer_send(0);
 460               		.loc 1 491 0
 461 0046 80E0      		ldi r24,0
 462 0048 90E0      		ldi r25,0
 463               	.LVL28:
 464 004a 0C94 0000 		jmp host_consumer_send
 465               	.LVL29:
 466               	.L41:
 467 004e 0895      		ret
 468               		.cfi_endproc
 469               	.LFE13:
 471               		.section	.text.register_mods,"ax",@progbits
 472               	.global	register_mods
 474               	register_mods:
 475               	.LFB14:
 492:./tmk_core/common/action.c ****     }
 493:./tmk_core/common/action.c **** }
 494:./tmk_core/common/action.c **** 
 495:./tmk_core/common/action.c **** void register_mods(uint8_t mods)
 496:./tmk_core/common/action.c **** {
 476               		.loc 1 496 0
 477               		.cfi_startproc
 478               	.LVL30:
 479               	/* prologue: function */
 480               	/* frame size = 0 */
 481               	/* stack size = 0 */
 482               	.L__stack_usage = 0
 497:./tmk_core/common/action.c ****     if (mods) {
 483               		.loc 1 497 0
 484 0000 8823      		tst r24
 485 0002 01F0      		breq .L50
 498:./tmk_core/common/action.c ****         add_mods(mods);
 486               		.loc 1 498 0
 487 0004 0E94 0000 		call add_mods
 488               	.LVL31:
 499:./tmk_core/common/action.c ****         send_keyboard_report();
 489               		.loc 1 499 0
 490 0008 0C94 0000 		jmp send_keyboard_report
 491               	.LVL32:
 492               	.L50:
 493 000c 0895      		ret
 494               		.cfi_endproc
 495               	.LFE14:
 497               		.section	.text.unregister_mods,"ax",@progbits
 498               	.global	unregister_mods
 500               	unregister_mods:
 501               	.LFB15:
 500:./tmk_core/common/action.c ****     }
 501:./tmk_core/common/action.c **** }
 502:./tmk_core/common/action.c **** 
 503:./tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 504:./tmk_core/common/action.c **** {
 502               		.loc 1 504 0
 503               		.cfi_startproc
 504               	.LVL33:
 505               	/* prologue: function */
 506               	/* frame size = 0 */
 507               	/* stack size = 0 */
 508               	.L__stack_usage = 0
 505:./tmk_core/common/action.c ****     if (mods) {
 509               		.loc 1 505 0
 510 0000 8823      		tst r24
 511 0002 01F0      		breq .L52
 506:./tmk_core/common/action.c ****         del_mods(mods);
 512               		.loc 1 506 0
 513 0004 0E94 0000 		call del_mods
 514               	.LVL34:
 507:./tmk_core/common/action.c ****         send_keyboard_report();
 515               		.loc 1 507 0
 516 0008 0C94 0000 		jmp send_keyboard_report
 517               	.LVL35:
 518               	.L52:
 519 000c 0895      		ret
 520               		.cfi_endproc
 521               	.LFE15:
 523               		.section	.text.process_action,"ax",@progbits
 524               	.global	process_action
 526               	process_action:
 527               	.LFB11:
  60:./tmk_core/common/action.c **** {
 528               		.loc 1 60 0
 529               		.cfi_startproc
 530               	.LVL36:
 531 0000 CF92      		push r12
 532               	.LCFI5:
 533               		.cfi_def_cfa_offset 3
 534               		.cfi_offset 12, -2
 535 0002 DF92      		push r13
 536               	.LCFI6:
 537               		.cfi_def_cfa_offset 4
 538               		.cfi_offset 13, -3
 539 0004 EF92      		push r14
 540               	.LCFI7:
 541               		.cfi_def_cfa_offset 5
 542               		.cfi_offset 14, -4
 543 0006 FF92      		push r15
 544               	.LCFI8:
 545               		.cfi_def_cfa_offset 6
 546               		.cfi_offset 15, -5
 547 0008 0F93      		push r16
 548               	.LCFI9:
 549               		.cfi_def_cfa_offset 7
 550               		.cfi_offset 16, -6
 551 000a 1F93      		push r17
 552               	.LCFI10:
 553               		.cfi_def_cfa_offset 8
 554               		.cfi_offset 17, -7
 555 000c CF93      		push r28
 556               	.LCFI11:
 557               		.cfi_def_cfa_offset 9
 558               		.cfi_offset 28, -8
 559 000e DF93      		push r29
 560               	.LCFI12:
 561               		.cfi_def_cfa_offset 10
 562               		.cfi_offset 29, -9
 563 0010 CDB7      		in r28,__SP_L__
 564 0012 DEB7      		in r29,__SP_H__
 565               	.LCFI13:
 566               		.cfi_def_cfa_register 28
 567 0014 2897      		sbiw r28,8
 568               	.LCFI14:
 569               		.cfi_def_cfa_offset 18
 570 0016 0FB6      		in __tmp_reg__,__SREG__
 571 0018 F894      		cli
 572 001a DEBF      		out __SP_H__,r29
 573 001c 0FBE      		out __SREG__,__tmp_reg__
 574 001e CDBF      		out __SP_L__,r28
 575               	/* prologue: function */
 576               	/* frame size = 8 */
 577               	/* stack size = 16 */
 578               	.L__stack_usage = 16
 579 0020 8C01      		movw r16,r24
  61:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 580               		.loc 1 61 0
 581 0022 85E0      		ldi r24,lo8(5)
 582               	.LVL37:
 583 0024 F801      		movw r30,r16
 584 0026 DE01      		movw r26,r28
 585 0028 1196      		adiw r26,1
 586               		0:
 587 002a 0190      		ld r0,Z+
 588 002c 0D92      		st X+,r0
 589 002e 8A95      		dec r24
 590 0030 01F4      		brne 0b
 591 0032 F801      		movw r30,r16
 592 0034 4081      		ld r20,Z
 593               	.LVL38:
 594 0036 3181      		ldd r19,Z+1
 595               	.LVL39:
 596 0038 F280      		ldd r15,Z+2
 597               	.LVL40:
  63:./tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 598               		.loc 1 63 0
 599 003a 2581      		ldd r18,Z+5
 600 003c 2295      		swap r18
 601 003e 2F70      		andi r18,lo8(15)
 602               	.LVL41:
 603               	.LBB12:
 604               	.LBB13:
 605               		.loc 2 49 0
 606 0040 8381      		ldd r24,Z+3
 607 0042 9481      		ldd r25,Z+4
 608 0044 892B      		or r24,r25
 609 0046 01F0      		breq .L126
 610 0048 3F3F      		cpi r19,lo8(-1)
 611 004a 01F4      		brne .L127
 612 004c 81E0      		ldi r24,lo8(1)
 613 004e 4F3F      		cpi r20,lo8(-1)
 614 0050 01F4      		brne .L127
 615 0052 00C0      		rjmp .L55
 616               	.LVL42:
 617               	.L126:
 618 0054 81E0      		ldi r24,lo8(1)
 619               	.LVL43:
 620 0056 00C0      		rjmp .L55
 621               	.L127:
 622 0058 80E0      		ldi r24,0
 623               	.L55:
 624               	.LBE13:
 625               	.LBE12:
  66:./tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
 626               		.loc 1 66 0
 627 005a 80FD      		sbrc r24,0
 628 005c 00C0      		rjmp .L54
  68:./tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
 629               		.loc 1 68 0
 630 005e 4983      		std Y+1,r20
 631 0060 3A83      		std Y+2,r19
 632 0062 8981      		ldd r24,Y+1
 633 0064 9A81      		ldd r25,Y+2
 634 0066 2F83      		std Y+7,r18
 635               	.LVL44:
 636 0068 0E94 0000 		call layer_switch_get_action
 637               	.LVL45:
  71:./tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 638               		.loc 1 71 0
 639 006c 9E83      		std Y+6,r25
 640 006e 8887      		std Y+8,r24
 641 0070 0E94 0000 		call layer_debug
 642               	.LVL46:
  72:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 643               		.loc 1 72 0
 644 0074 0E94 0000 		call default_layer_debug
 645               	.LVL47:
  76:./tmk_core/common/action.c ****     switch (action.kind.id) {
 646               		.loc 1 76 0
 647 0078 4E81      		ldd r20,Y+6
 648 007a E42F      		mov r30,r20
 649               	.LVL48:
 650 007c E295      		swap r30
 651 007e EF70      		andi r30,lo8(15)
 652 0080 F0E0      		ldi r31,0
 653 0082 E050      		subi r30,lo8(-(gs(.L60)))
 654 0084 F040      		sbci r31,hi8(-(gs(.L60)))
 655 0086 2F81      		ldd r18,Y+7
 656 0088 6885      		ldd r22,Y+8
 657 008a 0C94 0000 		jmp __tablejump2__
 658               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 659               		.p2align	1
 660               	.L60:
 661 0000 0000      		.word gs(.L59)
 662 0002 0000      		.word gs(.L59)
 663 0004 0000      		.word gs(.L61)
 664 0006 0000      		.word gs(.L61)
 665 0008 0000      		.word gs(.L62)
 666 000a 0000      		.word gs(.L63)
 667 000c 0000      		.word gs(.L54)
 668 000e 0000      		.word gs(.L54)
 669 0010 0000      		.word gs(.L64)
 670 0012 0000      		.word gs(.L54)
 671 0014 0000      		.word gs(.L65)
 672 0016 0000      		.word gs(.L65)
 673 0018 0000      		.word gs(.L66)
 674 001a 0000      		.word gs(.L54)
 675 001c 0000      		.word gs(.L54)
 676 001e 0000      		.word gs(.L67)
 677               		.section	.text.process_action
 678               	.L59:
 679               	.LBB14:
  81:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 680               		.loc 1 81 0
 681 008e 842F      		mov r24,r20
 682 0090 807F      		andi r24,lo8(-16)
 683 0092 142F      		mov r17,r20
 684 0094 1F70      		andi r17,lo8(15)
 685 0096 8823      		tst r24
 686 0098 01F0      		breq .L69
  81:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 687               		.loc 1 81 0 is_stmt 0 discriminator 2
 688 009a 1295      		swap r17
 689 009c 107F      		andi r17,lo8(-16)
 690               	.L69:
 691               	.LVL49:
  83:./tmk_core/common/action.c ****                 if (event.pressed) {
 692               		.loc 1 83 0 is_stmt 1 discriminator 3
 693 009e FF20      		tst r15
 694 00a0 01F0      		breq .L70
  84:./tmk_core/common/action.c ****                     if (mods) {
 695               		.loc 1 84 0
 696 00a2 1123      		tst r17
 697 00a4 01F4      		brne .+2
 698 00a6 00C0      		rjmp .L157
  85:./tmk_core/common/action.c ****                         add_weak_mods(mods);
 699               		.loc 1 85 0
 700 00a8 812F      		mov r24,r17
 701 00aa 6887      		std Y+8,r22
 702 00ac 0E94 0000 		call add_weak_mods
 703               	.LVL50:
  86:./tmk_core/common/action.c ****                         send_keyboard_report();
 704               		.loc 1 86 0
 705 00b0 0E94 0000 		call send_keyboard_report
 706               	.LVL51:
 707 00b4 6885      		ldd r22,Y+8
 708 00b6 00C0      		rjmp .L157
 709               	.L70:
 710               	.LVL52:
  90:./tmk_core/common/action.c ****                     unregister_code(action.key.code);
 711               		.loc 1 90 0
 712 00b8 862F      		mov r24,r22
 713 00ba 0E94 0000 		call unregister_code
 714               	.LVL53:
  91:./tmk_core/common/action.c ****                     if (mods) {
 715               		.loc 1 91 0
 716 00be 1123      		tst r17
 717 00c0 01F4      		brne .+2
 718 00c2 00C0      		rjmp .L54
  92:./tmk_core/common/action.c ****                         del_weak_mods(mods);
 719               		.loc 1 92 0
 720 00c4 812F      		mov r24,r17
 721 00c6 0E94 0000 		call del_weak_mods
 722               	.LVL54:
 723               	/* epilogue start */
 724               	.LBE14:
 351:./tmk_core/common/action.c **** }
 725               		.loc 1 351 0
 726 00ca 2896      		adiw r28,8
 727 00cc 0FB6      		in __tmp_reg__,__SREG__
 728 00ce F894      		cli
 729 00d0 DEBF      		out __SP_H__,r29
 730 00d2 0FBE      		out __SREG__,__tmp_reg__
 731 00d4 CDBF      		out __SP_L__,r28
 732 00d6 DF91      		pop r29
 733 00d8 CF91      		pop r28
 734 00da 1F91      		pop r17
 735               	.LVL55:
 736 00dc 0F91      		pop r16
 737               	.LVL56:
 738 00de FF90      		pop r15
 739               	.LVL57:
 740 00e0 EF90      		pop r14
 741 00e2 DF90      		pop r13
 742 00e4 CF90      		pop r12
 743               	.LBB15:
  93:./tmk_core/common/action.c ****                         send_keyboard_report();
 744               		.loc 1 93 0
 745 00e6 0C94 0000 		jmp send_keyboard_report
 746               	.LVL58:
 747               	.L61:
 748               	.LBE15:
 749               	.LBB16:
 102:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 750               		.loc 1 102 0
 751 00ea 842F      		mov r24,r20
 752 00ec 807F      		andi r24,lo8(-16)
 753 00ee 942F      		mov r25,r20
 754 00f0 9F70      		andi r25,lo8(15)
 755 00f2 E92E      		mov r14,r25
 756 00f4 8032      		cpi r24,lo8(32)
 757 00f6 01F0      		breq .L74
 102:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 758               		.loc 1 102 0 is_stmt 0 discriminator 2
 759 00f8 E294      		swap r14
 760 00fa 80EF      		ldi r24,lo8(-16)
 761 00fc E822      		and r14,r24
 762               	.L74:
 763               	.LVL59:
 104:./tmk_core/common/action.c ****                 switch (action.key.code) {
 764               		.loc 1 104 0 is_stmt 1 discriminator 3
 765 00fe 6623      		tst r22
 766               	.LVL60:
 767 0100 01F0      		breq .L76
 768 0102 6130      		cpi r22,lo8(1)
 769 0104 01F0      		breq .L77
 770 0106 00C0      		rjmp .L164
 771               	.L76:
 108:./tmk_core/common/action.c ****                         if (event.pressed) {
 772               		.loc 1 108 0
 773 0108 FF20      		tst r15
 774 010a 01F0      		breq .L78
 110:./tmk_core/common/action.c ****                                 register_mods(mods);
 775               		.loc 1 110 0
 776 010c 8E2D      		mov r24,r14
 109:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 777               		.loc 1 109 0
 778 010e 2223      		tst r18
 779 0110 01F0      		breq .L153
 112:./tmk_core/common/action.c ****                             else if (tap_count == 1) {
 780               		.loc 1 112 0
 781 0112 2130      		cpi r18,lo8(1)
 782 0114 01F4      		brne .L153
 783               	/* epilogue start */
 784               	.LBE16:
 351:./tmk_core/common/action.c **** }
 785               		.loc 1 351 0
 786 0116 2896      		adiw r28,8
 787 0118 0FB6      		in __tmp_reg__,__SREG__
 788 011a F894      		cli
 789 011c DEBF      		out __SP_H__,r29
 790 011e 0FBE      		out __SREG__,__tmp_reg__
 791 0120 CDBF      		out __SP_L__,r28
 792 0122 DF91      		pop r29
 793 0124 CF91      		pop r28
 794 0126 1F91      		pop r17
 795 0128 0F91      		pop r16
 796               	.LVL61:
 797 012a FF90      		pop r15
 798               	.LVL62:
 799 012c EF90      		pop r14
 800               	.LVL63:
 801 012e DF90      		pop r13
 802 0130 CF90      		pop r12
 803               	.LBB17:
 114:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 804               		.loc 1 114 0
 805 0132 0C94 0000 		jmp set_oneshot_mods
 806               	.LVL64:
 807               	.L78:
 120:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 808               		.loc 1 120 0
 809 0136 2223      		tst r18
 810 0138 01F0      		breq .L154
 124:./tmk_core/common/action.c ****                             else if (tap_count == 1) {
 811               		.loc 1 124 0
 812 013a 2130      		cpi r18,lo8(1)
 813 013c 01F4      		brne .+2
 814 013e 00C0      		rjmp .L54
 815               	.L154:
 128:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 816               		.loc 1 128 0
 817 0140 0E94 0000 		call clear_oneshot_mods
 818               	.LVL65:
 819 0144 00C0      		rjmp .L88
 820               	.LVL66:
 821               	.L77:
 135:./tmk_core/common/action.c ****                         if (event.pressed) {
 822               		.loc 1 135 0
 823 0146 FF20      		tst r15
 824 0148 01F0      		breq .L83
 136:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 825               		.loc 1 136 0
 826 014a 2630      		cpi r18,lo8(6)
 827 014c 00F0      		brlo .+2
 828 014e 00C0      		rjmp .L54
 137:./tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 829               		.loc 1 137 0
 830 0150 0E94 0000 		call get_mods
 831               	.LVL67:
 832 0154 8E21      		and r24,r14
 833 0156 01F0      		breq .L84
 834 0158 00C0      		rjmp .L88
 835               	.LVL68:
 836               	.L164:
 153:./tmk_core/common/action.c ****                         if (event.pressed) {
 837               		.loc 1 153 0
 838 015a FF20      		tst r15
 839 015c 01F0      		breq .L85
 154:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 840               		.loc 1 154 0
 841 015e 2111      		cpse r18,__zero_reg__
 842 0160 00C0      		rjmp .L165
 843               	.L84:
 142:./tmk_core/common/action.c ****                                     register_mods(mods);
 844               		.loc 1 142 0
 845 0162 8E2D      		mov r24,r14
 846               	.LVL69:
 847               	.L153:
 848               	/* epilogue start */
 849               	.LBE17:
 351:./tmk_core/common/action.c **** }
 850               		.loc 1 351 0
 851 0164 2896      		adiw r28,8
 852 0166 0FB6      		in __tmp_reg__,__SREG__
 853 0168 F894      		cli
 854 016a DEBF      		out __SP_H__,r29
 855 016c 0FBE      		out __SREG__,__tmp_reg__
 856 016e CDBF      		out __SP_L__,r28
 857 0170 DF91      		pop r29
 858 0172 CF91      		pop r28
 859 0174 1F91      		pop r17
 860 0176 0F91      		pop r16
 861               	.LVL70:
 862 0178 FF90      		pop r15
 863               	.LVL71:
 864 017a EF90      		pop r14
 865 017c DF90      		pop r13
 866 017e CF90      		pop r12
 867               	.LBB18:
 142:./tmk_core/common/action.c ****                                     register_mods(mods);
 868               		.loc 1 142 0
 869 0180 0C94 0000 		jmp register_mods
 870               	.LVL72:
 871               	.L83:
 146:./tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 872               		.loc 1 146 0
 873 0184 2530      		cpi r18,lo8(5)
 874 0186 00F0      		brlo .+2
 875 0188 00C0      		rjmp .L54
 876 018a 00C0      		rjmp .L88
 877               	.L165:
 155:./tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 878               		.loc 1 155 0
 879 018c F801      		movw r30,r16
 880 018e 8581      		ldd r24,Z+5
 881 0190 80FF      		sbrs r24,0
 882 0192 00C0      		rjmp .L157
 158:./tmk_core/common/action.c ****                                     record->tap.count = 0;
 883               		.loc 1 158 0
 884 0194 8F70      		andi r24,lo8(15)
 885 0196 8583      		std Z+5,r24
 886 0198 00C0      		rjmp .L84
 887               	.L85:
 169:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 888               		.loc 1 169 0
 889 019a 2111      		cpse r18,__zero_reg__
 890 019c 00C0      		rjmp .L158
 891               	.L88:
 174:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 892               		.loc 1 174 0
 893 019e 8E2D      		mov r24,r14
 894 01a0 00C0      		rjmp .L118
 895               	.LVL73:
 896               	.L62:
 897               	.LBE18:
 185:./tmk_core/common/action.c ****             switch (action.usage.page) {
 898               		.loc 1 185 0
 899 01a2 242F      		mov r18,r20
 900 01a4 2695      		lsr r18
 901 01a6 2695      		lsr r18
 902 01a8 2370      		andi r18,lo8(3)
 903 01aa 30E0      		ldi r19,0
 904 01ac 2115      		cp r18,__zero_reg__
 905 01ae 3105      		cpc r19,__zero_reg__
 906 01b0 01F0      		breq .L89
 907 01b2 2130      		cpi r18,1
 908 01b4 3105      		cpc r19,__zero_reg__
 909 01b6 01F0      		breq .L90
 910 01b8 00C0      		rjmp .L54
 911               	.L89:
 187:./tmk_core/common/action.c ****                     if (event.pressed) {
 912               		.loc 1 187 0
 913 01ba FF20      		tst r15
 914 01bc 01F0      		breq .L91
 915               	.LVL74:
 188:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 916               		.loc 1 188 0
 917 01be 862F      		mov r24,r22
 918 01c0 942F      		mov r25,r20
 919 01c2 9370      		andi r25,lo8(3)
 920 01c4 00C0      		rjmp .L159
 921               	.LVL75:
 922               	.L91:
 190:./tmk_core/common/action.c ****                         host_system_send(0);
 923               		.loc 1 190 0
 924 01c6 80E0      		ldi r24,0
 925 01c8 90E0      		ldi r25,0
 926               	.LVL76:
 927               	.L159:
 928               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 929               		.loc 1 351 0
 930 01ca 2896      		adiw r28,8
 931 01cc 0FB6      		in __tmp_reg__,__SREG__
 932 01ce F894      		cli
 933 01d0 DEBF      		out __SP_H__,r29
 934 01d2 0FBE      		out __SREG__,__tmp_reg__
 935 01d4 CDBF      		out __SP_L__,r28
 936 01d6 DF91      		pop r29
 937 01d8 CF91      		pop r28
 938 01da 1F91      		pop r17
 939 01dc 0F91      		pop r16
 940               	.LVL77:
 941 01de FF90      		pop r15
 942               	.LVL78:
 943 01e0 EF90      		pop r14
 944 01e2 DF90      		pop r13
 945 01e4 CF90      		pop r12
 190:./tmk_core/common/action.c ****                         host_system_send(0);
 946               		.loc 1 190 0
 947 01e6 0C94 0000 		jmp host_system_send
 948               	.LVL79:
 949               	.L90:
 194:./tmk_core/common/action.c ****                     if (event.pressed) {
 950               		.loc 1 194 0
 951 01ea FF20      		tst r15
 952 01ec 01F0      		breq .L92
 953               	.LVL80:
 195:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 954               		.loc 1 195 0
 955 01ee 862F      		mov r24,r22
 956 01f0 942F      		mov r25,r20
 957 01f2 9370      		andi r25,lo8(3)
 958 01f4 00C0      		rjmp .L161
 959               	.LVL81:
 960               	.L92:
 197:./tmk_core/common/action.c ****                         host_consumer_send(0);
 961               		.loc 1 197 0
 962 01f6 80E0      		ldi r24,0
 963 01f8 90E0      		ldi r25,0
 964               	.LVL82:
 965               	.L161:
 966               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 967               		.loc 1 351 0
 968 01fa 2896      		adiw r28,8
 969 01fc 0FB6      		in __tmp_reg__,__SREG__
 970 01fe F894      		cli
 971 0200 DEBF      		out __SP_H__,r29
 972 0202 0FBE      		out __SREG__,__tmp_reg__
 973 0204 CDBF      		out __SP_L__,r28
 974 0206 DF91      		pop r29
 975 0208 CF91      		pop r28
 976 020a 1F91      		pop r17
 977 020c 0F91      		pop r16
 978               	.LVL83:
 979 020e FF90      		pop r15
 980               	.LVL84:
 981 0210 EF90      		pop r14
 982 0212 DF90      		pop r13
 983 0214 CF90      		pop r12
 197:./tmk_core/common/action.c ****                         host_consumer_send(0);
 984               		.loc 1 197 0
 985 0216 0C94 0000 		jmp host_consumer_send
 986               	.LVL85:
 987               	.L63:
 207:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 988               		.loc 1 207 0
 989 021a 862F      		mov r24,r22
 206:./tmk_core/common/action.c ****             if (event.pressed) {
 990               		.loc 1 206 0
 991 021c FF20      		tst r15
 992 021e 01F0      		breq .L93
 207:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 993               		.loc 1 207 0
 994 0220 0E94 0000 		call mousekey_on
 995               	.LVL86:
 996 0224 00C0      		rjmp .L162
 997               	.LVL87:
 998               	.L93:
 210:./tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 999               		.loc 1 210 0
 1000 0226 0E94 0000 		call mousekey_off
 1001               	.LVL88:
 1002               	.L162:
 1003               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 1004               		.loc 1 351 0
 1005 022a 2896      		adiw r28,8
 1006 022c 0FB6      		in __tmp_reg__,__SREG__
 1007 022e F894      		cli
 1008 0230 DEBF      		out __SP_H__,r29
 1009 0232 0FBE      		out __SREG__,__tmp_reg__
 1010 0234 CDBF      		out __SP_L__,r28
 1011 0236 DF91      		pop r29
 1012 0238 CF91      		pop r28
 1013 023a 1F91      		pop r17
 1014 023c 0F91      		pop r16
 1015               	.LVL89:
 1016 023e FF90      		pop r15
 1017               	.LVL90:
 1018 0240 EF90      		pop r14
 1019 0242 DF90      		pop r13
 1020 0244 CF90      		pop r12
 211:./tmk_core/common/action.c ****                 mousekey_send();
 1021               		.loc 1 211 0
 1022 0246 0C94 0000 		jmp mousekey_send
 1023               	.LVL91:
 1024               	.L64:
 217:./tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 1025               		.loc 1 217 0
 1026 024a 842F      		mov r24,r20
 1027 024c 8370      		andi r24,lo8(3)
 1028 024e 01F0      		breq .+2
 1029 0250 00C0      		rjmp .L94
 219:./tmk_core/common/action.c ****                 if (!event.pressed) {
 1030               		.loc 1 219 0
 1031 0252 F110      		cpse r15,__zero_reg__
 1032 0254 00C0      		rjmp .L54
 1033               	.LVL92:
 1034               	.LBB19:
 220:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1035               		.loc 1 220 0
 1036 0256 262F      		mov r18,r22
 1037 0258 2295      		swap r18
 1038 025a 2695      		lsr r18
 1039 025c 2770      		andi r18,lo8(7)
 1040 025e 220F      		lsl r18
 1041 0260 220F      		lsl r18
 221:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1042               		.loc 1 221 0
 1043 0262 862F      		mov r24,r22
 1044 0264 8F70      		andi r24,lo8(15)
 1045 0266 C82E      		mov r12,r24
 1046 0268 D12C      		mov r13,__zero_reg__
 1047 026a E12C      		mov r14,__zero_reg__
 1048 026c F12C      		mov r15,__zero_reg__
 1049 026e 022E      		mov r0,r18
 1050 0270 00C0      		rjmp 2f
 1051               		1:
 1052 0272 CC0C      		lsl r12
 1053 0274 DD1C      		rol r13
 1054 0276 EE1C      		rol r14
 1055 0278 FF1C      		rol r15
 1056               		2:
 1057 027a 0A94      		dec r0
 1058 027c 02F4      		brpl 1b
 1059               	.LVL93:
 222:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1060               		.loc 1 222 0
 1061 027e 64FF      		sbrs r22,4
 1062 0280 00C0      		rjmp .L128
 222:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1063               		.loc 1 222 0 is_stmt 0 discriminator 1
 1064 0282 6FE0      		ldi r22,lo8(15)
 1065 0284 70E0      		ldi r23,0
 1066 0286 80E0      		ldi r24,0
 1067 0288 90E0      		ldi r25,0
 1068               	.LVL94:
 1069 028a 00C0      		rjmp 2f
 1070               		1:
 1071 028c 660F      		lsl r22
 1072 028e 771F      		rol r23
 1073 0290 881F      		rol r24
 1074 0292 991F      		rol r25
 1075               		2:
 1076 0294 2A95      		dec r18
 1077 0296 02F4      		brpl 1b
 1078 0298 6095      		com r22
 1079 029a 7095      		com r23
 1080 029c 8095      		com r24
 1081 029e 9095      		com r25
 1082 02a0 00C0      		rjmp .L95
 1083               	.LVL95:
 1084               	.L128:
 222:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1085               		.loc 1 222 0
 1086 02a2 60E0      		ldi r22,0
 1087 02a4 70E0      		ldi r23,0
 1088 02a6 CB01      		movw r24,r22
 1089               	.LVL96:
 1090               	.L95:
 223:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1091               		.loc 1 223 0 is_stmt 1 discriminator 3
 1092 02a8 242F      		mov r18,r20
 1093 02aa 2695      		lsr r18
 1094 02ac 2695      		lsr r18
 1095 02ae 2370      		andi r18,lo8(3)
 1096 02b0 422F      		mov r20,r18
 1097               	.LVL97:
 1098 02b2 50E0      		ldi r21,0
 1099 02b4 4230      		cpi r20,2
 1100 02b6 5105      		cpc r21,__zero_reg__
 1101 02b8 01F0      		breq .L97
 1102 02ba 4330      		cpi r20,3
 1103 02bc 5105      		cpc r21,__zero_reg__
 1104 02be 01F0      		breq .L98
 1105 02c0 6C29      		or r22,r12
 1106 02c2 7D29      		or r23,r13
 1107 02c4 8E29      		or r24,r14
 1108 02c6 9F29      		or r25,r15
 1109               	.LVL98:
 1110 02c8 4130      		cpi r20,1
 1111 02ca 5105      		cpc r21,__zero_reg__
 1112 02cc 01F0      		breq .L163
 1113               	/* epilogue start */
 1114               	.LBE19:
 351:./tmk_core/common/action.c **** }
 1115               		.loc 1 351 0 discriminator 3
 1116 02ce 2896      		adiw r28,8
 1117               	.LVL99:
 1118 02d0 0FB6      		in __tmp_reg__,__SREG__
 1119 02d2 F894      		cli
 1120 02d4 DEBF      		out __SP_H__,r29
 1121 02d6 0FBE      		out __SREG__,__tmp_reg__
 1122 02d8 CDBF      		out __SP_L__,r28
 1123 02da DF91      		pop r29
 1124 02dc CF91      		pop r28
 1125               	.LVL100:
 1126 02de 1F91      		pop r17
 1127 02e0 0F91      		pop r16
 1128               	.LVL101:
 1129 02e2 FF90      		pop r15
 1130               	.LVL102:
 1131 02e4 EF90      		pop r14
 1132 02e6 DF90      		pop r13
 1133 02e8 CF90      		pop r12
 1134               	.LVL103:
 1135               	.LBB20:
 224:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1136               		.loc 1 224 0 discriminator 3
 1137 02ea 0C94 0000 		jmp default_layer_and
 1138               	.LVL104:
 1139               	.L97:
 226:./tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1140               		.loc 1 226 0
 1141 02ee 6C29      		or r22,r12
 1142 02f0 7D29      		or r23,r13
 1143 02f2 8E29      		or r24,r14
 1144 02f4 9F29      		or r25,r15
 1145               	.LVL105:
 1146               	/* epilogue start */
 1147               	.LBE20:
 351:./tmk_core/common/action.c **** }
 1148               		.loc 1 351 0
 1149 02f6 2896      		adiw r28,8
 1150               	.LVL106:
 1151 02f8 0FB6      		in __tmp_reg__,__SREG__
 1152 02fa F894      		cli
 1153 02fc DEBF      		out __SP_H__,r29
 1154 02fe 0FBE      		out __SREG__,__tmp_reg__
 1155 0300 CDBF      		out __SP_L__,r28
 1156 0302 DF91      		pop r29
 1157 0304 CF91      		pop r28
 1158               	.LVL107:
 1159 0306 1F91      		pop r17
 1160 0308 0F91      		pop r16
 1161               	.LVL108:
 1162 030a FF90      		pop r15
 1163               	.LVL109:
 1164 030c EF90      		pop r14
 1165 030e DF90      		pop r13
 1166 0310 CF90      		pop r12
 1167               	.LVL110:
 1168               	.LBB21:
 226:./tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1169               		.loc 1 226 0
 1170 0312 0C94 0000 		jmp default_layer_xor
 1171               	.LVL111:
 1172               	.L98:
 227:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1173               		.loc 1 227 0
 1174 0316 0E94 0000 		call default_layer_and
 1175               	.LVL112:
 1176 031a C701      		movw r24,r14
 1177 031c B601      		movw r22,r12
 1178               	.L163:
 1179               	/* epilogue start */
 1180               	.LBE21:
 351:./tmk_core/common/action.c **** }
 1181               		.loc 1 351 0
 1182 031e 2896      		adiw r28,8
 1183 0320 0FB6      		in __tmp_reg__,__SREG__
 1184 0322 F894      		cli
 1185 0324 DEBF      		out __SP_H__,r29
 1186 0326 0FBE      		out __SREG__,__tmp_reg__
 1187 0328 CDBF      		out __SP_L__,r28
 1188 032a DF91      		pop r29
 1189 032c CF91      		pop r28
 1190 032e 1F91      		pop r17
 1191 0330 0F91      		pop r16
 1192               	.LVL113:
 1193 0332 FF90      		pop r15
 1194               	.LVL114:
 1195 0334 EF90      		pop r14
 1196 0336 DF90      		pop r13
 1197 0338 CF90      		pop r12
 1198               	.LVL115:
 1199               	.LBB22:
 227:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1200               		.loc 1 227 0
 1201 033a 0C94 0000 		jmp default_layer_or
 1202               	.LVL116:
 1203               	.L94:
 1204               	.LBE22:
 232:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1205               		.loc 1 232 0
 1206 033e FF20      		tst r15
 1207 0340 01F0      		breq .L100
 232:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1208               		.loc 1 232 0 is_stmt 0 discriminator 1
 1209 0342 842F      		mov r24,r20
 1210 0344 8170      		andi r24,lo8(1)
 1211 0346 00C0      		rjmp .L101
 1212               	.L100:
 232:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1213               		.loc 1 232 0 discriminator 2
 1214 0348 8695      		lsr r24
 1215               	.L101:
 232:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1216               		.loc 1 232 0 discriminator 3
 1217 034a 8823      		tst r24
 1218 034c 01F4      		brne .+2
 1219 034e 00C0      		rjmp .L54
 1220               	.LVL117:
 1221               	.LBB23:
 234:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1222               		.loc 1 234 0 is_stmt 1
 1223 0350 262F      		mov r18,r22
 1224 0352 2295      		swap r18
 1225 0354 2695      		lsr r18
 1226 0356 2770      		andi r18,lo8(7)
 1227 0358 220F      		lsl r18
 1228 035a 220F      		lsl r18
 235:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1229               		.loc 1 235 0
 1230 035c 862F      		mov r24,r22
 1231 035e 8F70      		andi r24,lo8(15)
 1232 0360 C82E      		mov r12,r24
 1233 0362 D12C      		mov r13,__zero_reg__
 1234 0364 E12C      		mov r14,__zero_reg__
 1235 0366 F12C      		mov r15,__zero_reg__
 1236 0368 022E      		mov r0,r18
 1237 036a 00C0      		rjmp 2f
 1238               		1:
 1239 036c CC0C      		lsl r12
 1240 036e DD1C      		rol r13
 1241 0370 EE1C      		rol r14
 1242 0372 FF1C      		rol r15
 1243               		2:
 1244 0374 0A94      		dec r0
 1245 0376 02F4      		brpl 1b
 1246               	.LVL118:
 236:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1247               		.loc 1 236 0
 1248 0378 64FF      		sbrs r22,4
 1249 037a 00C0      		rjmp .L129
 236:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1250               		.loc 1 236 0 is_stmt 0 discriminator 1
 1251 037c 6FE0      		ldi r22,lo8(15)
 1252 037e 70E0      		ldi r23,0
 1253 0380 80E0      		ldi r24,0
 1254 0382 90E0      		ldi r25,0
 1255               	.LVL119:
 1256 0384 00C0      		rjmp 2f
 1257               		1:
 1258 0386 660F      		lsl r22
 1259 0388 771F      		rol r23
 1260 038a 881F      		rol r24
 1261 038c 991F      		rol r25
 1262               		2:
 1263 038e 2A95      		dec r18
 1264 0390 02F4      		brpl 1b
 1265 0392 6095      		com r22
 1266 0394 7095      		com r23
 1267 0396 8095      		com r24
 1268 0398 9095      		com r25
 1269 039a 00C0      		rjmp .L102
 1270               	.LVL120:
 1271               	.L129:
 236:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1272               		.loc 1 236 0
 1273 039c 60E0      		ldi r22,0
 1274 039e 70E0      		ldi r23,0
 1275 03a0 CB01      		movw r24,r22
 1276               	.LVL121:
 1277               	.L102:
 237:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1278               		.loc 1 237 0 is_stmt 1 discriminator 3
 1279 03a2 242F      		mov r18,r20
 1280 03a4 2695      		lsr r18
 1281 03a6 2695      		lsr r18
 1282 03a8 2370      		andi r18,lo8(3)
 1283 03aa 422F      		mov r20,r18
 1284               	.LVL122:
 1285 03ac 50E0      		ldi r21,0
 1286 03ae 4230      		cpi r20,2
 1287 03b0 5105      		cpc r21,__zero_reg__
 1288 03b2 01F0      		breq .L104
 1289 03b4 4330      		cpi r20,3
 1290 03b6 5105      		cpc r21,__zero_reg__
 1291 03b8 01F0      		breq .L105
 1292 03ba 6C29      		or r22,r12
 1293 03bc 7D29      		or r23,r13
 1294 03be 8E29      		or r24,r14
 1295 03c0 9F29      		or r25,r15
 1296               	.LVL123:
 1297 03c2 4130      		cpi r20,1
 1298 03c4 5105      		cpc r21,__zero_reg__
 1299 03c6 01F0      		breq .L160
 1300               	/* epilogue start */
 1301               	.LBE23:
 351:./tmk_core/common/action.c **** }
 1302               		.loc 1 351 0 discriminator 3
 1303 03c8 2896      		adiw r28,8
 1304               	.LVL124:
 1305 03ca 0FB6      		in __tmp_reg__,__SREG__
 1306 03cc F894      		cli
 1307 03ce DEBF      		out __SP_H__,r29
 1308 03d0 0FBE      		out __SREG__,__tmp_reg__
 1309 03d2 CDBF      		out __SP_L__,r28
 1310 03d4 DF91      		pop r29
 1311 03d6 CF91      		pop r28
 1312               	.LVL125:
 1313 03d8 1F91      		pop r17
 1314 03da 0F91      		pop r16
 1315               	.LVL126:
 1316 03dc FF90      		pop r15
 1317               	.LVL127:
 1318 03de EF90      		pop r14
 1319 03e0 DF90      		pop r13
 1320 03e2 CF90      		pop r12
 1321               	.LVL128:
 1322               	.LBB24:
 238:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1323               		.loc 1 238 0 discriminator 3
 1324 03e4 0C94 0000 		jmp layer_and
 1325               	.LVL129:
 1326               	.L104:
 240:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1327               		.loc 1 240 0
 1328 03e8 6C29      		or r22,r12
 1329 03ea 7D29      		or r23,r13
 1330 03ec 8E29      		or r24,r14
 1331 03ee 9F29      		or r25,r15
 1332               	.LVL130:
 1333               	/* epilogue start */
 1334               	.LBE24:
 351:./tmk_core/common/action.c **** }
 1335               		.loc 1 351 0
 1336 03f0 2896      		adiw r28,8
 1337               	.LVL131:
 1338 03f2 0FB6      		in __tmp_reg__,__SREG__
 1339 03f4 F894      		cli
 1340 03f6 DEBF      		out __SP_H__,r29
 1341 03f8 0FBE      		out __SREG__,__tmp_reg__
 1342 03fa CDBF      		out __SP_L__,r28
 1343 03fc DF91      		pop r29
 1344 03fe CF91      		pop r28
 1345               	.LVL132:
 1346 0400 1F91      		pop r17
 1347 0402 0F91      		pop r16
 1348               	.LVL133:
 1349 0404 FF90      		pop r15
 1350               	.LVL134:
 1351 0406 EF90      		pop r14
 1352 0408 DF90      		pop r13
 1353 040a CF90      		pop r12
 1354               	.LVL135:
 1355               	.LBB25:
 240:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1356               		.loc 1 240 0
 1357 040c 0C94 0000 		jmp layer_xor
 1358               	.LVL136:
 1359               	.L105:
 241:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1360               		.loc 1 241 0
 1361 0410 0E94 0000 		call layer_and
 1362               	.LVL137:
 1363 0414 C701      		movw r24,r14
 1364 0416 B601      		movw r22,r12
 1365               	.L160:
 1366               	/* epilogue start */
 1367               	.LBE25:
 351:./tmk_core/common/action.c **** }
 1368               		.loc 1 351 0
 1369 0418 2896      		adiw r28,8
 1370 041a 0FB6      		in __tmp_reg__,__SREG__
 1371 041c F894      		cli
 1372 041e DEBF      		out __SP_H__,r29
 1373 0420 0FBE      		out __SREG__,__tmp_reg__
 1374 0422 CDBF      		out __SP_L__,r28
 1375 0424 DF91      		pop r29
 1376 0426 CF91      		pop r28
 1377 0428 1F91      		pop r17
 1378 042a 0F91      		pop r16
 1379               	.LVL138:
 1380 042c FF90      		pop r15
 1381               	.LVL139:
 1382 042e EF90      		pop r14
 1383 0430 DF90      		pop r13
 1384 0432 CF90      		pop r12
 1385               	.LVL140:
 1386               	.LBB26:
 241:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1387               		.loc 1 241 0
 1388 0434 0C94 0000 		jmp layer_or
 1389               	.LVL141:
 1390               	.L65:
 1391               	.LBE26:
 249:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1392               		.loc 1 249 0
 1393 0438 603F      		cpi r22,lo8(-16)
 1394 043a 01F0      		breq .L108
 1395               	.LVL142:
 1396 043c 00F4      		brsh .L109
 1397 043e 80E4      		ldi r24,lo8(64)
 1398 0440 860F      		add r24,r22
 1399 0442 8032      		cpi r24,lo8(32)
 1400 0444 00F0      		brlo .L152
 1401 0446 00C0      		rjmp .L107
 1402               	.L109:
 1403 0448 623F      		cpi r22,lo8(-14)
 1404 044a 01F4      		brne .+2
 1405 044c 00C0      		rjmp .L111
 1406 044e 00F4      		brsh .+2
 1407 0450 00C0      		rjmp .L112
 1408 0452 633F      		cpi r22,lo8(-13)
 1409 0454 01F4      		brne .+2
 1410 0456 00C0      		rjmp .L113
 1411 0458 00C0      		rjmp .L107
 1412               	.L152:
 1413 045a 162F      		mov r17,r22
 1414 045c 1071      		andi r17,lo8(16)
 1415 045e 842F      		mov r24,r20
 1416 0460 8F71      		andi r24,lo8(31)
 253:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1417               		.loc 1 253 0
 1418 0462 6887      		std Y+8,r22
 1419               	.LVL143:
 252:./tmk_core/common/action.c ****                     if (event.pressed) {
 1420               		.loc 1 252 0
 1421 0464 FF20      		tst r15
 1422 0466 01F0      		breq .L114
 253:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1423               		.loc 1 253 0
 1424 0468 0E94 0000 		call layer_on
 1425               	.LVL144:
 254:./tmk_core/common/action.c ****                         register_mods((action.layer_tap.code & 0x10) ?
 1426               		.loc 1 254 0
 1427 046c 6885      		ldd r22,Y+8
 1428 046e 862F      		mov r24,r22
 1429 0470 1123      		tst r17
 1430 0472 01F0      		breq .L115
 1431 0474 8295      		swap r24
 1432 0476 807F      		andi r24,lo8(-16)
 1433 0478 00C0      		rjmp .L153
 1434               	.L115:
 254:./tmk_core/common/action.c ****                         register_mods((action.layer_tap.code & 0x10) ?
 1435               		.loc 1 254 0 is_stmt 0 discriminator 1
 1436 047a 8F70      		andi r24,lo8(15)
 1437 047c 00C0      		rjmp .L153
 1438               	.L114:
 258:./tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 1439               		.loc 1 258 0 is_stmt 1
 1440 047e 0E94 0000 		call layer_off
 1441               	.LVL145:
 259:./tmk_core/common/action.c ****                         unregister_mods((action.layer_tap.code & 0x10) ?
 1442               		.loc 1 259 0
 1443 0482 6885      		ldd r22,Y+8
 1444 0484 862F      		mov r24,r22
 1445 0486 1123      		tst r17
 1446 0488 01F0      		breq .L117
 1447 048a 8295      		swap r24
 1448 048c 807F      		andi r24,lo8(-16)
 1449 048e 00C0      		rjmp .L118
 1450               	.L117:
 259:./tmk_core/common/action.c ****                         unregister_mods((action.layer_tap.code & 0x10) ?
 1451               		.loc 1 259 0 is_stmt 0 discriminator 1
 1452 0490 8F70      		andi r24,lo8(15)
 1453               	.LVL146:
 1454               	.L118:
 1455               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 1456               		.loc 1 351 0 is_stmt 1 discriminator 2
 1457 0492 2896      		adiw r28,8
 1458 0494 0FB6      		in __tmp_reg__,__SREG__
 1459 0496 F894      		cli
 1460 0498 DEBF      		out __SP_H__,r29
 1461 049a 0FBE      		out __SREG__,__tmp_reg__
 1462 049c CDBF      		out __SP_L__,r28
 1463 049e DF91      		pop r29
 1464 04a0 CF91      		pop r28
 1465 04a2 1F91      		pop r17
 1466 04a4 0F91      		pop r16
 1467               	.LVL147:
 1468 04a6 FF90      		pop r15
 1469               	.LVL148:
 1470 04a8 EF90      		pop r14
 1471 04aa DF90      		pop r13
 1472 04ac CF90      		pop r12
 259:./tmk_core/common/action.c ****                         unregister_mods((action.layer_tap.code & 0x10) ?
 1473               		.loc 1 259 0 discriminator 2
 1474 04ae 0C94 0000 		jmp unregister_mods
 1475               	.LVL149:
 1476               	.L108:
 266:./tmk_core/common/action.c ****                     if (event.pressed) {
 1477               		.loc 1 266 0
 1478 04b2 FF20      		tst r15
 1479 04b4 01F0      		breq .L119
 267:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1480               		.loc 1 267 0
 1481 04b6 2530      		cpi r18,lo8(5)
 1482 04b8 00F0      		brlo .+2
 1483 04ba 00C0      		rjmp .L54
 1484               	.L120:
 268:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1485               		.loc 1 268 0
 1486 04bc 842F      		mov r24,r20
 1487 04be 8F71      		andi r24,lo8(31)
 1488               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 1489               		.loc 1 351 0
 1490 04c0 2896      		adiw r28,8
 1491 04c2 0FB6      		in __tmp_reg__,__SREG__
 1492 04c4 F894      		cli
 1493 04c6 DEBF      		out __SP_H__,r29
 1494 04c8 0FBE      		out __SREG__,__tmp_reg__
 1495 04ca CDBF      		out __SP_L__,r28
 1496 04cc DF91      		pop r29
 1497 04ce CF91      		pop r28
 1498 04d0 1F91      		pop r17
 1499 04d2 0F91      		pop r16
 1500               	.LVL150:
 1501 04d4 FF90      		pop r15
 1502               	.LVL151:
 1503 04d6 EF90      		pop r14
 1504 04d8 DF90      		pop r13
 1505 04da CF90      		pop r12
 268:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1506               		.loc 1 268 0
 1507 04dc 0C94 0000 		jmp layer_invert
 1508               	.LVL152:
 1509               	.L119:
 271:./tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1510               		.loc 1 271 0
 1511 04e0 2630      		cpi r18,lo8(6)
 1512 04e2 00F0      		brlo .+2
 1513 04e4 00C0      		rjmp .L54
 1514 04e6 00C0      		rjmp .L120
 1515               	.L112:
 277:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1516               		.loc 1 277 0
 1517 04e8 FF20      		tst r15
 1518 04ea 01F0      		breq .L121
 1519               	.L122:
 277:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1520               		.loc 1 277 0 is_stmt 0 discriminator 1
 1521 04ec 842F      		mov r24,r20
 1522 04ee 8F71      		andi r24,lo8(31)
 1523               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 1524               		.loc 1 351 0 is_stmt 1 discriminator 1
 1525 04f0 2896      		adiw r28,8
 1526 04f2 0FB6      		in __tmp_reg__,__SREG__
 1527 04f4 F894      		cli
 1528 04f6 DEBF      		out __SP_H__,r29
 1529 04f8 0FBE      		out __SREG__,__tmp_reg__
 1530 04fa CDBF      		out __SP_L__,r28
 1531 04fc DF91      		pop r29
 1532 04fe CF91      		pop r28
 1533 0500 1F91      		pop r17
 1534 0502 0F91      		pop r16
 1535               	.LVL153:
 1536 0504 FF90      		pop r15
 1537               	.LVL154:
 1538 0506 EF90      		pop r14
 1539 0508 DF90      		pop r13
 1540 050a CF90      		pop r12
 277:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1541               		.loc 1 277 0 discriminator 1
 1542 050c 0C94 0000 		jmp layer_on
 1543               	.LVL155:
 1544               	.L111:
 281:./tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 1545               		.loc 1 281 0
 1546 0510 FF20      		tst r15
 1547 0512 01F0      		breq .L122
 1548               	.L121:
 278:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1549               		.loc 1 278 0
 1550 0514 842F      		mov r24,r20
 1551 0516 8F71      		andi r24,lo8(31)
 1552               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 1553               		.loc 1 351 0
 1554 0518 2896      		adiw r28,8
 1555 051a 0FB6      		in __tmp_reg__,__SREG__
 1556 051c F894      		cli
 1557 051e DEBF      		out __SP_H__,r29
 1558 0520 0FBE      		out __SREG__,__tmp_reg__
 1559 0522 CDBF      		out __SP_L__,r28
 1560 0524 DF91      		pop r29
 1561 0526 CF91      		pop r28
 1562 0528 1F91      		pop r17
 1563 052a 0F91      		pop r16
 1564               	.LVL156:
 1565 052c FF90      		pop r15
 1566               	.LVL157:
 1567 052e EF90      		pop r14
 1568 0530 DF90      		pop r13
 1569 0532 CF90      		pop r12
 278:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1570               		.loc 1 278 0
 1571 0534 0C94 0000 		jmp layer_off
 1572               	.LVL158:
 1573               	.L113:
 285:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1574               		.loc 1 285 0
 1575 0538 FF20      		tst r15
 1576 053a 01F0      		breq .L123
 285:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1577               		.loc 1 285 0 is_stmt 0 discriminator 1
 1578 053c 842F      		mov r24,r20
 1579 053e 8F71      		andi r24,lo8(31)
 1580               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 1581               		.loc 1 351 0 is_stmt 1 discriminator 1
 1582 0540 2896      		adiw r28,8
 1583 0542 0FB6      		in __tmp_reg__,__SREG__
 1584 0544 F894      		cli
 1585 0546 DEBF      		out __SP_H__,r29
 1586 0548 0FBE      		out __SREG__,__tmp_reg__
 1587 054a CDBF      		out __SP_L__,r28
 1588 054c DF91      		pop r29
 1589 054e CF91      		pop r28
 1590 0550 1F91      		pop r17
 1591 0552 0F91      		pop r16
 1592               	.LVL159:
 1593 0554 FF90      		pop r15
 1594               	.LVL160:
 1595 0556 EF90      		pop r14
 1596 0558 DF90      		pop r13
 1597 055a CF90      		pop r12
 285:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1598               		.loc 1 285 0 discriminator 1
 1599 055c 0C94 0000 		jmp layer_move
 1600               	.LVL161:
 1601               	.L123:
 1602               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 1603               		.loc 1 351 0
 1604 0560 2896      		adiw r28,8
 1605 0562 0FB6      		in __tmp_reg__,__SREG__
 1606 0564 F894      		cli
 1607 0566 DEBF      		out __SP_H__,r29
 1608 0568 0FBE      		out __SREG__,__tmp_reg__
 1609 056a CDBF      		out __SP_L__,r28
 1610 056c DF91      		pop r29
 1611 056e CF91      		pop r28
 1612 0570 1F91      		pop r17
 1613 0572 0F91      		pop r16
 1614               	.LVL162:
 1615 0574 FF90      		pop r15
 1616               	.LVL163:
 1617 0576 EF90      		pop r14
 1618 0578 DF90      		pop r13
 1619 057a CF90      		pop r12
 286:./tmk_core/common/action.c ****                                     layer_clear();
 1620               		.loc 1 286 0
 1621 057c 0C94 0000 		jmp layer_clear
 1622               	.LVL164:
 1623               	.L107:
 290:./tmk_core/common/action.c ****                     if (event.pressed) {
 1624               		.loc 1 290 0
 1625 0580 FF20      		tst r15
 1626 0582 01F0      		breq .L124
 291:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1627               		.loc 1 291 0
 1628 0584 2223      		tst r18
 1629 0586 01F4      		brne .+2
 1630 0588 00C0      		rjmp .L122
 1631               	.L157:
 293:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1632               		.loc 1 293 0
 1633 058a 862F      		mov r24,r22
 1634               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 1635               		.loc 1 351 0
 1636 058c 2896      		adiw r28,8
 1637 058e 0FB6      		in __tmp_reg__,__SREG__
 1638 0590 F894      		cli
 1639 0592 DEBF      		out __SP_H__,r29
 1640 0594 0FBE      		out __SREG__,__tmp_reg__
 1641 0596 CDBF      		out __SP_L__,r28
 1642 0598 DF91      		pop r29
 1643 059a CF91      		pop r28
 1644 059c 1F91      		pop r17
 1645 059e 0F91      		pop r16
 1646               	.LVL165:
 1647 05a0 FF90      		pop r15
 1648               	.LVL166:
 1649 05a2 EF90      		pop r14
 1650 05a4 DF90      		pop r13
 1651 05a6 CF90      		pop r12
 293:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1652               		.loc 1 293 0
 1653 05a8 0C94 0000 		jmp register_code
 1654               	.LVL167:
 1655               	.L124:
 299:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1656               		.loc 1 299 0
 1657 05ac 2223      		tst r18
 1658 05ae 01F4      		brne .+2
 1659 05b0 00C0      		rjmp .L121
 1660               	.L158:
 301:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1661               		.loc 1 301 0
 1662 05b2 862F      		mov r24,r22
 1663               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 1664               		.loc 1 351 0
 1665 05b4 2896      		adiw r28,8
 1666 05b6 0FB6      		in __tmp_reg__,__SREG__
 1667 05b8 F894      		cli
 1668 05ba DEBF      		out __SP_H__,r29
 1669 05bc 0FBE      		out __SREG__,__tmp_reg__
 1670 05be CDBF      		out __SP_L__,r28
 1671 05c0 DF91      		pop r29
 1672 05c2 CF91      		pop r28
 1673 05c4 1F91      		pop r17
 1674 05c6 0F91      		pop r16
 1675               	.LVL168:
 1676 05c8 FF90      		pop r15
 1677               	.LVL169:
 1678 05ca EF90      		pop r14
 1679 05cc DF90      		pop r13
 1680 05ce CF90      		pop r12
 301:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1681               		.loc 1 301 0
 1682 05d0 0C94 0000 		jmp unregister_code
 1683               	.LVL170:
 1684               	.L66:
 315:./tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1685               		.loc 1 315 0
 1686 05d4 4F70      		andi r20,lo8(15)
 1687 05d6 C801      		movw r24,r16
 1688 05d8 0E94 0000 		call action_get_macro
 1689               	.LVL171:
 1690               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 1691               		.loc 1 351 0
 1692 05dc 2896      		adiw r28,8
 1693 05de 0FB6      		in __tmp_reg__,__SREG__
 1694 05e0 F894      		cli
 1695 05e2 DEBF      		out __SP_H__,r29
 1696 05e4 0FBE      		out __SREG__,__tmp_reg__
 1697 05e6 CDBF      		out __SP_L__,r28
 1698 05e8 DF91      		pop r29
 1699 05ea CF91      		pop r28
 1700 05ec 1F91      		pop r17
 1701 05ee 0F91      		pop r16
 1702               	.LVL172:
 1703 05f0 FF90      		pop r15
 1704               	.LVL173:
 1705 05f2 EF90      		pop r14
 1706 05f4 DF90      		pop r13
 1707 05f6 CF90      		pop r12
 315:./tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1708               		.loc 1 315 0
 1709 05f8 0C94 0000 		jmp action_macro_play
 1710               	.LVL174:
 1711               	.L67:
 345:./tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1712               		.loc 1 345 0
 1713 05fc 4F70      		andi r20,lo8(15)
 1714 05fe C801      		movw r24,r16
 1715               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 1716               		.loc 1 351 0
 1717 0600 2896      		adiw r28,8
 1718 0602 0FB6      		in __tmp_reg__,__SREG__
 1719 0604 F894      		cli
 1720 0606 DEBF      		out __SP_H__,r29
 1721 0608 0FBE      		out __SREG__,__tmp_reg__
 1722 060a CDBF      		out __SP_L__,r28
 1723 060c DF91      		pop r29
 1724 060e CF91      		pop r28
 1725 0610 1F91      		pop r17
 1726 0612 0F91      		pop r16
 1727               	.LVL175:
 1728 0614 FF90      		pop r15
 1729               	.LVL176:
 1730 0616 EF90      		pop r14
 1731 0618 DF90      		pop r13
 1732 061a CF90      		pop r12
 345:./tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1733               		.loc 1 345 0
 1734 061c 0C94 0000 		jmp action_function
 1735               	.LVL177:
 1736               	.L54:
 1737               	/* epilogue start */
 351:./tmk_core/common/action.c **** }
 1738               		.loc 1 351 0
 1739 0620 2896      		adiw r28,8
 1740 0622 0FB6      		in __tmp_reg__,__SREG__
 1741 0624 F894      		cli
 1742 0626 DEBF      		out __SP_H__,r29
 1743 0628 0FBE      		out __SREG__,__tmp_reg__
 1744 062a CDBF      		out __SP_L__,r28
 1745 062c DF91      		pop r29
 1746 062e CF91      		pop r28
 1747 0630 1F91      		pop r17
 1748 0632 0F91      		pop r16
 1749               	.LVL178:
 1750 0634 FF90      		pop r15
 1751               	.LVL179:
 1752 0636 EF90      		pop r14
 1753 0638 DF90      		pop r13
 1754 063a CF90      		pop r12
 1755 063c 0895      		ret
 1756               		.cfi_endproc
 1757               	.LFE11:
 1759               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1760               	.global	clear_keyboard_but_mods
 1762               	clear_keyboard_but_mods:
 1763               	.LFB17:
 508:./tmk_core/common/action.c ****     }
 509:./tmk_core/common/action.c **** }
 510:./tmk_core/common/action.c **** 
 511:./tmk_core/common/action.c **** void clear_keyboard(void)
 512:./tmk_core/common/action.c **** {
 513:./tmk_core/common/action.c ****     clear_mods();
 514:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 515:./tmk_core/common/action.c **** }
 516:./tmk_core/common/action.c **** 
 517:./tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 518:./tmk_core/common/action.c **** {
 1764               		.loc 1 518 0
 1765               		.cfi_startproc
 1766               	/* prologue: function */
 1767               	/* frame size = 0 */
 1768               	/* stack size = 0 */
 1769               	.L__stack_usage = 0
 519:./tmk_core/common/action.c ****     clear_weak_mods();
 1770               		.loc 1 519 0
 1771 0000 0E94 0000 		call clear_weak_mods
 1772               	.LVL180:
 520:./tmk_core/common/action.c ****     clear_keys();
 1773               		.loc 1 520 0
 1774 0004 0E94 0000 		call clear_keys
 1775               	.LVL181:
 521:./tmk_core/common/action.c ****     send_keyboard_report();
 1776               		.loc 1 521 0
 1777 0008 0E94 0000 		call send_keyboard_report
 1778               	.LVL182:
 522:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 523:./tmk_core/common/action.c ****     mousekey_clear();
 1779               		.loc 1 523 0
 1780 000c 0E94 0000 		call mousekey_clear
 1781               	.LVL183:
 524:./tmk_core/common/action.c ****     mousekey_send();
 1782               		.loc 1 524 0
 1783 0010 0E94 0000 		call mousekey_send
 1784               	.LVL184:
 525:./tmk_core/common/action.c **** #endif
 526:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 527:./tmk_core/common/action.c ****     host_system_send(0);
 1785               		.loc 1 527 0
 1786 0014 80E0      		ldi r24,0
 1787 0016 90E0      		ldi r25,0
 1788 0018 0E94 0000 		call host_system_send
 1789               	.LVL185:
 528:./tmk_core/common/action.c ****     host_consumer_send(0);
 1790               		.loc 1 528 0
 1791 001c 80E0      		ldi r24,0
 1792 001e 90E0      		ldi r25,0
 1793 0020 0C94 0000 		jmp host_consumer_send
 1794               	.LVL186:
 1795               		.cfi_endproc
 1796               	.LFE17:
 1798               		.section	.text.clear_keyboard,"ax",@progbits
 1799               	.global	clear_keyboard
 1801               	clear_keyboard:
 1802               	.LFB16:
 512:./tmk_core/common/action.c **** {
 1803               		.loc 1 512 0
 1804               		.cfi_startproc
 1805               	/* prologue: function */
 1806               	/* frame size = 0 */
 1807               	/* stack size = 0 */
 1808               	.L__stack_usage = 0
 513:./tmk_core/common/action.c ****     clear_mods();
 1809               		.loc 1 513 0
 1810 0000 0E94 0000 		call clear_mods
 1811               	.LVL187:
 514:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1812               		.loc 1 514 0
 1813 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1814               	.LVL188:
 1815               		.cfi_endproc
 1816               	.LFE16:
 1818               		.section	.text.is_tap_key,"ax",@progbits
 1819               	.global	is_tap_key
 1821               	is_tap_key:
 1822               	.LFB18:
 529:./tmk_core/common/action.c **** #endif
 530:./tmk_core/common/action.c **** }
 531:./tmk_core/common/action.c **** 
 532:./tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 533:./tmk_core/common/action.c **** {
 1823               		.loc 1 533 0
 1824               		.cfi_startproc
 1825               	.LVL189:
 1826               	/* prologue: function */
 1827               	/* frame size = 0 */
 1828               	/* stack size = 0 */
 1829               	.L__stack_usage = 0
 534:./tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1830               		.loc 1 534 0
 1831 0000 0E94 0000 		call layer_switch_get_action
 1832               	.LVL190:
 535:./tmk_core/common/action.c **** 
 536:./tmk_core/common/action.c ****     switch (action.kind.id) {
 1833               		.loc 1 536 0
 1834 0004 292F      		mov r18,r25
 1835 0006 2295      		swap r18
 1836 0008 2F70      		andi r18,lo8(15)
 1837 000a 30E0      		ldi r19,0
 1838 000c 2C30      		cpi r18,12
 1839 000e 3105      		cpc r19,__zero_reg__
 1840 0010 04F4      		brge .L170
 1841 0012 2A30      		cpi r18,10
 1842 0014 3105      		cpc r19,__zero_reg__
 1843 0016 04F4      		brge .L171
 1844 0018 2250      		subi r18,2
 1845 001a 3109      		sbc r19,__zero_reg__
 1846 001c 2230      		cpi r18,2
 1847 001e 3105      		cpc r19,__zero_reg__
 1848 0020 00F0      		brlo .L189
 1849 0022 00C0      		rjmp .L177
 1850               	.L170:
 1851 0024 2C30      		cpi r18,12
 1852 0026 3105      		cpc r19,__zero_reg__
 1853 0028 01F0      		breq .L173
 1854 002a 2F30      		cpi r18,15
 1855 002c 3105      		cpc r19,__zero_reg__
 1856 002e 01F0      		breq .L173
 1857 0030 00C0      		rjmp .L177
 1858               	.L189:
 537:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 538:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 539:./tmk_core/common/action.c ****             switch (action.key.code) {
 1859               		.loc 1 539 0
 1860 0032 853A      		cpi r24,lo8(-91)
 1861 0034 00F4      		brsh .L174
 1862 0036 8430      		cpi r24,lo8(4)
 1863 0038 00F4      		brsh .L179
 1864 003a 8230      		cpi r24,lo8(2)
 1865 003c 00F4      		brsh .L171
 1866 003e 00C0      		rjmp .L179
 1867               	.L174:
 1868 0040 90E2      		ldi r25,lo8(32)
 1869               	.LVL191:
 1870 0042 980F      		add r25,r24
 1871 0044 9830      		cpi r25,lo8(8)
 1872 0046 00F0      		brlo .L179
 1873               	.LVL192:
 1874               	.L171:
 540:./tmk_core/common/action.c ****                 case MODS_ONESHOT:
 541:./tmk_core/common/action.c ****                 case MODS_TAP_TOGGLE:
 542:./tmk_core/common/action.c ****                 case KC_A ... KC_EXSEL:                 // tap key
 543:./tmk_core/common/action.c ****                 case KC_LCTRL ... KC_RGUI:              // tap key
 544:./tmk_core/common/action.c ****                     return true;
 545:./tmk_core/common/action.c ****             }
 546:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 547:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 548:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1875               		.loc 1 548 0
 1876 0048 883E      		cpi r24,lo8(-24)
 1877 004a 00F4      		brsh .L176
 1878 004c 803E      		cpi r24,lo8(-32)
 1879 004e 00F4      		brsh .L179
 1880 0050 8450      		subi r24,lo8(-(-4))
 1881               	.LVL193:
 1882 0052 813A      		cpi r24,lo8(-95)
 1883 0054 00F4      		brsh .L177
 1884 0056 00C0      		rjmp .L179
 1885               	.LVL194:
 1886               	.L176:
 1887 0058 803F      		cpi r24,lo8(-16)
 1888 005a 01F4      		brne .L177
 1889 005c 00C0      		rjmp .L179
 1890               	.L173:
 549:./tmk_core/common/action.c ****                 case 0xc0 ... 0xdf:         // with modifiers
 550:./tmk_core/common/action.c ****                     return false;
 551:./tmk_core/common/action.c ****                 case KC_A ... KC_EXSEL:     // tap key
 552:./tmk_core/common/action.c ****                 case KC_LCTRL ... KC_RGUI:  // tap key
 553:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 554:./tmk_core/common/action.c ****                     return true;
 555:./tmk_core/common/action.c ****             }
 556:./tmk_core/common/action.c ****             return false;
 557:./tmk_core/common/action.c ****         case ACT_MACRO:
 558:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 559:./tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1891               		.loc 1 559 0
 1892 005e 93FB      		bst r25,3
 1893 0060 8827      		clr r24
 1894 0062 80F9      		bld r24,0
 1895               	.LVL195:
 1896 0064 0895      		ret
 1897               	.LVL196:
 1898               	.L177:
 560:./tmk_core/common/action.c ****             return false;
 561:./tmk_core/common/action.c ****     }
 562:./tmk_core/common/action.c ****     return false;
 1899               		.loc 1 562 0
 1900 0066 80E0      		ldi r24,0
 1901               	.LVL197:
 1902 0068 0895      		ret
 1903               	.LVL198:
 1904               	.L179:
 554:./tmk_core/common/action.c ****                     return true;
 1905               		.loc 1 554 0
 1906 006a 81E0      		ldi r24,lo8(1)
 1907               	.LVL199:
 563:./tmk_core/common/action.c **** }
 1908               		.loc 1 563 0
 1909 006c 0895      		ret
 1910               		.cfi_endproc
 1911               	.LFE18:
 1913               		.section	.text.debug_event,"ax",@progbits
 1914               	.global	debug_event
 1916               	debug_event:
 1917               	.LFB19:
 564:./tmk_core/common/action.c **** 
 565:./tmk_core/common/action.c **** 
 566:./tmk_core/common/action.c **** /*
 567:./tmk_core/common/action.c ****  * debug print
 568:./tmk_core/common/action.c ****  */
 569:./tmk_core/common/action.c **** void debug_event(keyevent_t event)
 570:./tmk_core/common/action.c **** {
 1918               		.loc 1 570 0
 1919               		.cfi_startproc
 1920 0000 CF93      		push r28
 1921               	.LCFI15:
 1922               		.cfi_def_cfa_offset 3
 1923               		.cfi_offset 28, -2
 1924 0002 DF93      		push r29
 1925               	.LCFI16:
 1926               		.cfi_def_cfa_offset 4
 1927               		.cfi_offset 29, -3
 1928 0004 00D0      		rcall .
 1929 0006 00D0      		rcall .
 1930 0008 1F92      		push __zero_reg__
 1931               	.LCFI17:
 1932               		.cfi_def_cfa_offset 9
 1933 000a CDB7      		in r28,__SP_L__
 1934 000c DEB7      		in r29,__SP_H__
 1935               	.LCFI18:
 1936               		.cfi_def_cfa_register 28
 1937               	/* prologue: function */
 1938               	/* frame size = 5 */
 1939               	/* stack size = 7 */
 1940               	.L__stack_usage = 7
 1941               	/* epilogue start */
 571:./tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 572:./tmk_core/common/action.c **** }
 1942               		.loc 1 572 0
 1943 000e 0F90      		pop __tmp_reg__
 1944 0010 0F90      		pop __tmp_reg__
 1945 0012 0F90      		pop __tmp_reg__
 1946 0014 0F90      		pop __tmp_reg__
 1947 0016 0F90      		pop __tmp_reg__
 1948 0018 DF91      		pop r29
 1949 001a CF91      		pop r28
 1950 001c 0895      		ret
 1951               		.cfi_endproc
 1952               	.LFE19:
 1954               		.section	.text.debug_record,"ax",@progbits
 1955               	.global	debug_record
 1957               	debug_record:
 1958               	.LFB20:
 573:./tmk_core/common/action.c **** 
 574:./tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 575:./tmk_core/common/action.c **** {
 1959               		.loc 1 575 0
 1960               		.cfi_startproc
 1961 0000 CF93      		push r28
 1962               	.LCFI19:
 1963               		.cfi_def_cfa_offset 3
 1964               		.cfi_offset 28, -2
 1965 0002 DF93      		push r29
 1966               	.LCFI20:
 1967               		.cfi_def_cfa_offset 4
 1968               		.cfi_offset 29, -3
 1969 0004 00D0      		rcall .
 1970 0006 00D0      		rcall .
 1971 0008 00D0      		rcall .
 1972               	.LCFI21:
 1973               		.cfi_def_cfa_offset 10
 1974 000a CDB7      		in r28,__SP_L__
 1975 000c DEB7      		in r29,__SP_H__
 1976               	.LCFI22:
 1977               		.cfi_def_cfa_register 28
 1978               	/* prologue: function */
 1979               	/* frame size = 6 */
 1980               	/* stack size = 8 */
 1981               	.L__stack_usage = 8
 1982               	/* epilogue start */
 576:./tmk_core/common/action.c ****     debug_event(record.event);
 577:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 578:./tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 579:./tmk_core/common/action.c **** #endif
 580:./tmk_core/common/action.c **** }
 1983               		.loc 1 580 0
 1984 000e 2696      		adiw r28,6
 1985 0010 0FB6      		in __tmp_reg__,__SREG__
 1986 0012 F894      		cli
 1987 0014 DEBF      		out __SP_H__,r29
 1988 0016 0FBE      		out __SREG__,__tmp_reg__
 1989 0018 CDBF      		out __SP_L__,r28
 1990 001a DF91      		pop r29
 1991 001c CF91      		pop r28
 1992 001e 0895      		ret
 1993               		.cfi_endproc
 1994               	.LFE20:
 1996               		.section	.text.debug_action,"ax",@progbits
 1997               	.global	debug_action
 1999               	debug_action:
 2000               	.LFB21:
 581:./tmk_core/common/action.c **** 
 582:./tmk_core/common/action.c **** void debug_action(action_t action)
 583:./tmk_core/common/action.c **** {
 2001               		.loc 1 583 0
 2002               		.cfi_startproc
 2003               	.LVL200:
 2004               	/* prologue: function */
 2005               	/* frame size = 0 */
 2006               	/* stack size = 0 */
 2007               	.L__stack_usage = 0
 2008 0000 0895      		ret
 2009               		.cfi_endproc
 2010               	.LFE21:
 2012               		.text
 2013               	.Letext0:
 2014               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 2015               		.file 4 "./tmk_core/common/keycode.h"
 2016               		.file 5 "./tmk_core/common/action_code.h"
 2017               		.file 6 "./tmk_core/common/action_macro.h"
 2018               		.file 7 "./tmk_core/common/action.h"
 2019               		.file 8 "./tmk_core/common/hook.h"
 2020               		.file 9 "./tmk_core/common/action_tapping.h"
 2021               		.file 10 "./tmk_core/common/action_util.h"
 2022               		.file 11 "./tmk_core/common/host.h"
 2023               		.file 12 "./tmk_core/common/action_layer.h"
 2024               		.file 13 "./tmk_core/common/command.h"
 2025               		.file 14 "./tmk_core/common/mousekey.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action.c
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:2      *ABS*:0000003e __SP_H__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:3      *ABS*:0000003d __SP_L__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:4      *ABS*:0000003f __SREG__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:6      *ABS*:00000001 __zero_reg__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:13     .text.action_exec:00000000 action_exec
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:128    .text.register_code:00000000 register_code
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:397    .text.unregister_code:00000000 unregister_code
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:474    .text.register_mods:00000000 register_mods
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:500    .text.unregister_mods:00000000 unregister_mods
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:526    .text.process_action:00000000 process_action
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:1762   .text.clear_keyboard_but_mods:00000000 clear_keyboard_but_mods
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:1801   .text.clear_keyboard:00000000 clear_keyboard
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:1821   .text.is_tap_key:00000000 is_tap_key
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:1916   .text.debug_event:00000000 debug_event
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:1957   .text.debug_record:00000000 debug_record
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccgBXsnq.s:1999   .text.debug_action:00000000 debug_action

UNDEFINED SYMBOLS
hook_matrix_change
action_tapping_process
command_proc
add_key
add_mods
send_keyboard_report
host_system_send
host_consumer_send
del_key
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
get_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
mousekey_clear
clear_mods
