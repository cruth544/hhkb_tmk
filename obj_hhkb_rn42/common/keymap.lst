   1               		.file	"keymap.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_get_macro,"ax",@progbits
  11               		.weak	action_get_macro
  13               	action_get_macro:
  14               	.LFB11:
  15               		.file 1 "./tmk_core/common/keymap.c"
   1:./tmk_core/common/keymap.c **** /*
   2:./tmk_core/common/keymap.c **** Copyright 2013,2016 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keymap.c **** 
   4:./tmk_core/common/keymap.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keymap.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keymap.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keymap.c **** (at your option) any later version.
   8:./tmk_core/common/keymap.c **** 
   9:./tmk_core/common/keymap.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keymap.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keymap.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keymap.c **** GNU General Public License for more details.
  13:./tmk_core/common/keymap.c **** 
  14:./tmk_core/common/keymap.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keymap.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keymap.c **** */
  17:./tmk_core/common/keymap.c **** #include "keymap.h"
  18:./tmk_core/common/keymap.c **** #include "report.h"
  19:./tmk_core/common/keymap.c **** #include "keycode.h"
  20:./tmk_core/common/keymap.c **** #include "action_layer.h"
  21:./tmk_core/common/keymap.c **** #include "action.h"
  22:./tmk_core/common/keymap.c **** #include "action_macro.h"
  23:./tmk_core/common/keymap.c **** #include "wait.h"
  24:./tmk_core/common/keymap.c **** #include "debug.h"
  25:./tmk_core/common/keymap.c **** #include "bootloader.h"
  26:./tmk_core/common/keymap.c **** #if defined(__AVR__)
  27:./tmk_core/common/keymap.c **** #include <avr/pgmspace.h>
  28:./tmk_core/common/keymap.c **** #endif
  29:./tmk_core/common/keymap.c **** 
  30:./tmk_core/common/keymap.c **** #ifdef BOOTMAGIC_ENABLE
  31:./tmk_core/common/keymap.c **** extern keymap_config_t keymap_config;
  32:./tmk_core/common/keymap.c **** #endif
  33:./tmk_core/common/keymap.c **** 
  34:./tmk_core/common/keymap.c **** static action_t keycode_to_action(uint8_t keycode);
  35:./tmk_core/common/keymap.c **** 
  36:./tmk_core/common/keymap.c **** 
  37:./tmk_core/common/keymap.c **** /* converts key to action */
  38:./tmk_core/common/keymap.c **** __attribute__ ((weak))
  39:./tmk_core/common/keymap.c **** action_t action_for_key(uint8_t layer, keypos_t key)
  40:./tmk_core/common/keymap.c **** {
  41:./tmk_core/common/keymap.c ****     uint8_t keycode = keymap_key_to_keycode(layer, key);
  42:./tmk_core/common/keymap.c ****     switch (keycode) {
  43:./tmk_core/common/keymap.c ****         case KC_FN0 ... KC_FN31:
  44:./tmk_core/common/keymap.c ****             return keymap_fn_to_action(keycode);
  45:./tmk_core/common/keymap.c **** #ifdef BOOTMAGIC_ENABLE
  46:./tmk_core/common/keymap.c ****         case KC_CAPSLOCK:
  47:./tmk_core/common/keymap.c ****         case KC_LOCKING_CAPS:
  48:./tmk_core/common/keymap.c ****             if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
  49:./tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LCTL);
  50:./tmk_core/common/keymap.c ****             }
  51:./tmk_core/common/keymap.c ****             return keycode_to_action(keycode);
  52:./tmk_core/common/keymap.c ****         case KC_LCTL:
  53:./tmk_core/common/keymap.c ****             if (keymap_config.swap_control_capslock) {
  54:./tmk_core/common/keymap.c ****                 return keycode_to_action(KC_CAPSLOCK);
  55:./tmk_core/common/keymap.c ****             }
  56:./tmk_core/common/keymap.c ****             return keycode_to_action(KC_LCTL);
  57:./tmk_core/common/keymap.c ****         case KC_LALT:
  58:./tmk_core/common/keymap.c ****             if (keymap_config.swap_lalt_lgui) {
  59:./tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
  60:./tmk_core/common/keymap.c ****                     return keycode_to_action(KC_NO);
  61:./tmk_core/common/keymap.c ****                 }
  62:./tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LGUI);
  63:./tmk_core/common/keymap.c ****             }
  64:./tmk_core/common/keymap.c ****             return keycode_to_action(KC_LALT);
  65:./tmk_core/common/keymap.c ****         case KC_LGUI:
  66:./tmk_core/common/keymap.c ****             if (keymap_config.swap_lalt_lgui) {
  67:./tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LALT);
  68:./tmk_core/common/keymap.c ****             }
  69:./tmk_core/common/keymap.c ****             if (keymap_config.no_gui) {
  70:./tmk_core/common/keymap.c ****                 return keycode_to_action(KC_NO);
  71:./tmk_core/common/keymap.c ****             }
  72:./tmk_core/common/keymap.c ****             return keycode_to_action(KC_LGUI);
  73:./tmk_core/common/keymap.c ****         case KC_RALT:
  74:./tmk_core/common/keymap.c ****             if (keymap_config.swap_ralt_rgui) {
  75:./tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
  76:./tmk_core/common/keymap.c ****                     return keycode_to_action(KC_NO);
  77:./tmk_core/common/keymap.c ****                 }
  78:./tmk_core/common/keymap.c ****                 return keycode_to_action(KC_RGUI);
  79:./tmk_core/common/keymap.c ****             }
  80:./tmk_core/common/keymap.c ****             return keycode_to_action(KC_RALT);
  81:./tmk_core/common/keymap.c ****         case KC_RGUI:
  82:./tmk_core/common/keymap.c ****             if (keymap_config.swap_ralt_rgui) {
  83:./tmk_core/common/keymap.c ****                 return keycode_to_action(KC_RALT);
  84:./tmk_core/common/keymap.c ****             }
  85:./tmk_core/common/keymap.c ****             if (keymap_config.no_gui) {
  86:./tmk_core/common/keymap.c ****                 return keycode_to_action(KC_NO);
  87:./tmk_core/common/keymap.c ****             }
  88:./tmk_core/common/keymap.c ****             return keycode_to_action(KC_RGUI);
  89:./tmk_core/common/keymap.c ****         case KC_GRAVE:
  90:./tmk_core/common/keymap.c ****             if (keymap_config.swap_grave_esc) {
  91:./tmk_core/common/keymap.c ****                 return keycode_to_action(KC_ESC);
  92:./tmk_core/common/keymap.c ****             }
  93:./tmk_core/common/keymap.c ****             return keycode_to_action(KC_GRAVE);
  94:./tmk_core/common/keymap.c ****         case KC_ESC:
  95:./tmk_core/common/keymap.c ****             if (keymap_config.swap_grave_esc) {
  96:./tmk_core/common/keymap.c ****                 return keycode_to_action(KC_GRAVE);
  97:./tmk_core/common/keymap.c ****             }
  98:./tmk_core/common/keymap.c ****             return keycode_to_action(KC_ESC);
  99:./tmk_core/common/keymap.c ****         case KC_BSLASH:
 100:./tmk_core/common/keymap.c ****             if (keymap_config.swap_backslash_backspace) {
 101:./tmk_core/common/keymap.c ****                 return keycode_to_action(KC_BSPACE);
 102:./tmk_core/common/keymap.c ****             }
 103:./tmk_core/common/keymap.c ****             return keycode_to_action(KC_BSLASH);
 104:./tmk_core/common/keymap.c ****         case KC_BSPACE:
 105:./tmk_core/common/keymap.c ****             if (keymap_config.swap_backslash_backspace) {
 106:./tmk_core/common/keymap.c ****                 return keycode_to_action(KC_BSLASH);
 107:./tmk_core/common/keymap.c ****             }
 108:./tmk_core/common/keymap.c ****             return keycode_to_action(KC_BSPACE);
 109:./tmk_core/common/keymap.c **** #endif
 110:./tmk_core/common/keymap.c ****         default:
 111:./tmk_core/common/keymap.c ****             return keycode_to_action(keycode);
 112:./tmk_core/common/keymap.c ****     }
 113:./tmk_core/common/keymap.c **** }
 114:./tmk_core/common/keymap.c **** 
 115:./tmk_core/common/keymap.c **** 
 116:./tmk_core/common/keymap.c **** /* Macro */
 117:./tmk_core/common/keymap.c **** __attribute__ ((weak))
 118:./tmk_core/common/keymap.c **** const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
 119:./tmk_core/common/keymap.c **** {
  16               		.loc 1 119 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 120:./tmk_core/common/keymap.c ****     (void)record;
 121:./tmk_core/common/keymap.c ****     (void)id;
 122:./tmk_core/common/keymap.c ****     (void)opt;
 123:./tmk_core/common/keymap.c ****     return MACRO_NONE;
 124:./tmk_core/common/keymap.c **** }
  23               		.loc 1 124 0
  24 0000 80E0      		ldi r24,0
  25 0002 90E0      		ldi r25,0
  26               	.LVL1:
  27 0004 0895      		ret
  28               		.cfi_endproc
  29               	.LFE11:
  31               		.section	.text.action_function,"ax",@progbits
  32               		.weak	action_function
  34               	action_function:
  35               	.LFB12:
 125:./tmk_core/common/keymap.c **** 
 126:./tmk_core/common/keymap.c **** /* Function */
 127:./tmk_core/common/keymap.c **** __attribute__ ((weak))
 128:./tmk_core/common/keymap.c **** void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
 129:./tmk_core/common/keymap.c **** {
  36               		.loc 1 129 0
  37               		.cfi_startproc
  38               	.LVL2:
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 0 */
  42               	.L__stack_usage = 0
  43 0000 0895      		ret
  44               		.cfi_endproc
  45               	.LFE12:
  47               		.section	.text.keymap_key_to_keycode,"ax",@progbits
  48               		.weak	keymap_key_to_keycode
  50               	keymap_key_to_keycode:
  51               	.LFB14:
 130:./tmk_core/common/keymap.c ****     (void)record;
 131:./tmk_core/common/keymap.c ****     (void)id;
 132:./tmk_core/common/keymap.c ****     (void)opt;
 133:./tmk_core/common/keymap.c **** }
 134:./tmk_core/common/keymap.c **** 
 135:./tmk_core/common/keymap.c **** 
 136:./tmk_core/common/keymap.c **** 
 137:./tmk_core/common/keymap.c **** /* translates keycode to action */
 138:./tmk_core/common/keymap.c **** static action_t keycode_to_action(uint8_t keycode)
 139:./tmk_core/common/keymap.c **** {
 140:./tmk_core/common/keymap.c ****     switch (keycode) {
 141:./tmk_core/common/keymap.c ****         case KC_A ... KC_EXSEL:
 142:./tmk_core/common/keymap.c ****         case KC_LCTRL ... KC_RGUI:
 143:./tmk_core/common/keymap.c ****             return (action_t)ACTION_KEY(keycode);
 144:./tmk_core/common/keymap.c ****             break;
 145:./tmk_core/common/keymap.c ****         case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
 146:./tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
 147:./tmk_core/common/keymap.c ****             break;
 148:./tmk_core/common/keymap.c ****         case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
 149:./tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 150:./tmk_core/common/keymap.c ****             break;
 151:./tmk_core/common/keymap.c ****         case KC_MS_UP ... KC_MS_ACCEL2:
 152:./tmk_core/common/keymap.c ****             return (action_t)ACTION_MOUSEKEY(keycode);
 153:./tmk_core/common/keymap.c ****             break;
 154:./tmk_core/common/keymap.c ****         case KC_TRNS:
 155:./tmk_core/common/keymap.c ****             return (action_t)ACTION_TRANSPARENT;
 156:./tmk_core/common/keymap.c ****             break;
 157:./tmk_core/common/keymap.c ****         case KC_BOOTLOADER:
 158:./tmk_core/common/keymap.c ****             clear_keyboard();
 159:./tmk_core/common/keymap.c ****             wait_ms(50);
 160:./tmk_core/common/keymap.c ****             bootloader_jump(); // not return
 161:./tmk_core/common/keymap.c ****             break;
 162:./tmk_core/common/keymap.c ****         default:
 163:./tmk_core/common/keymap.c ****             return (action_t)ACTION_NO;
 164:./tmk_core/common/keymap.c ****             break;
 165:./tmk_core/common/keymap.c ****     }
 166:./tmk_core/common/keymap.c ****     return (action_t)ACTION_NO;
 167:./tmk_core/common/keymap.c **** }
 168:./tmk_core/common/keymap.c **** 
 169:./tmk_core/common/keymap.c **** 
 170:./tmk_core/common/keymap.c **** 
 171:./tmk_core/common/keymap.c **** #ifdef USE_LEGACY_KEYMAP
 172:./tmk_core/common/keymap.c **** /*
 173:./tmk_core/common/keymap.c ****  * Legacy keymap support
 174:./tmk_core/common/keymap.c ****  *      Consider using new keymap API instead.
 175:./tmk_core/common/keymap.c ****  */
 176:./tmk_core/common/keymap.c **** extern const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
 177:./tmk_core/common/keymap.c **** extern const uint8_t fn_layer[];
 178:./tmk_core/common/keymap.c **** extern const uint8_t fn_keycode[];
 179:./tmk_core/common/keymap.c **** 
 180:./tmk_core/common/keymap.c **** __attribute__ ((weak))
 181:./tmk_core/common/keymap.c **** uint8_t keymap_get_keycode(uint8_t layer, uint8_t row, uint8_t col)
 182:./tmk_core/common/keymap.c **** {
 183:./tmk_core/common/keymap.c ****     return pgm_read_byte(&keymaps[(layer)][(row)][(col)]);
 184:./tmk_core/common/keymap.c **** }
 185:./tmk_core/common/keymap.c **** 
 186:./tmk_core/common/keymap.c **** __attribute__ ((weak))
 187:./tmk_core/common/keymap.c **** uint8_t keymap_fn_layer(uint8_t index)
 188:./tmk_core/common/keymap.c **** {
 189:./tmk_core/common/keymap.c ****     return pgm_read_byte(&fn_layer[index]);
 190:./tmk_core/common/keymap.c **** }
 191:./tmk_core/common/keymap.c **** 
 192:./tmk_core/common/keymap.c **** __attribute__ ((weak))
 193:./tmk_core/common/keymap.c **** uint8_t keymap_fn_keycode(uint8_t index)
 194:./tmk_core/common/keymap.c **** {
 195:./tmk_core/common/keymap.c ****     return pgm_read_byte(&fn_keycode[index]);
 196:./tmk_core/common/keymap.c **** }
 197:./tmk_core/common/keymap.c **** 
 198:./tmk_core/common/keymap.c **** __attribute__ ((weak))
 199:./tmk_core/common/keymap.c **** uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
 200:./tmk_core/common/keymap.c **** {
 201:./tmk_core/common/keymap.c ****     return keymap_get_keycode(layer, key.row, key.col);
 202:./tmk_core/common/keymap.c **** }
 203:./tmk_core/common/keymap.c **** 
 204:./tmk_core/common/keymap.c **** 
 205:./tmk_core/common/keymap.c **** /* Legacy keymap support */
 206:./tmk_core/common/keymap.c **** __attribute__ ((weak))
 207:./tmk_core/common/keymap.c **** action_t keymap_fn_to_action(uint8_t keycode)
 208:./tmk_core/common/keymap.c **** {
 209:./tmk_core/common/keymap.c ****     switch (keycode) {
 210:./tmk_core/common/keymap.c ****         case KC_FN0 ... KC_FN31:
 211:./tmk_core/common/keymap.c ****             {
 212:./tmk_core/common/keymap.c ****                 uint8_t layer = keymap_fn_layer(FN_INDEX(keycode));
 213:./tmk_core/common/keymap.c ****                 uint8_t key = keymap_fn_keycode(FN_INDEX(keycode));
 214:./tmk_core/common/keymap.c ****                 if (key) {
 215:./tmk_core/common/keymap.c ****                     return (action_t)ACTION_LAYER_TAP_KEY(layer, key);
 216:./tmk_core/common/keymap.c ****                 } else {
 217:./tmk_core/common/keymap.c ****                     return (action_t)ACTION_LAYER_MOMENTARY(layer);
 218:./tmk_core/common/keymap.c ****                 }
 219:./tmk_core/common/keymap.c ****             }
 220:./tmk_core/common/keymap.c ****             return (action_t)ACTION_NO;
 221:./tmk_core/common/keymap.c ****         default:
 222:./tmk_core/common/keymap.c ****             return (action_t)ACTION_NO;
 223:./tmk_core/common/keymap.c ****     }
 224:./tmk_core/common/keymap.c **** }
 225:./tmk_core/common/keymap.c **** 
 226:./tmk_core/common/keymap.c **** #else
 227:./tmk_core/common/keymap.c **** 
 228:./tmk_core/common/keymap.c **** /* user keymaps should be defined somewhere */
 229:./tmk_core/common/keymap.c **** extern const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
 230:./tmk_core/common/keymap.c **** extern const action_t fn_actions[];
 231:./tmk_core/common/keymap.c **** 
 232:./tmk_core/common/keymap.c **** __attribute__ ((weak))
 233:./tmk_core/common/keymap.c **** uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
 234:./tmk_core/common/keymap.c **** {
  52               		.loc 1 234 0
  53               		.cfi_startproc
  54               	.LVL3:
  55               	/* prologue: function */
  56               	/* frame size = 0 */
  57               	/* stack size = 0 */
  58               	.L__stack_usage = 0
  59               	.LBB4:
 235:./tmk_core/common/keymap.c **** #if defined(__AVR__)
 236:./tmk_core/common/keymap.c ****     return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
  60               		.loc 1 236 0
  61 0000 E72F      		mov r30,r23
  62 0002 F0E0      		ldi r31,0
  63 0004 98E0      		ldi r25,lo8(8)
  64 0006 899F      		mul r24,r25
  65 0008 E00D      		add r30,r0
  66 000a F11D      		adc r31,r1
  67 000c 1124      		clr __zero_reg__
  68 000e 83E0      		ldi r24,3
  69               		1:
  70 0010 EE0F      		lsl r30
  71 0012 FF1F      		rol r31
  72 0014 8A95      		dec r24
  73 0016 01F4      		brne 1b
  74               	.LVL4:
  75 0018 E60F      		add r30,r22
  76 001a F11D      		adc r31,__zero_reg__
  77 001c E050      		subi r30,lo8(-(keymaps))
  78 001e F040      		sbci r31,hi8(-(keymaps))
  79               	/* #APP */
  80               	 ;  236 "./tmk_core/common/keymap.c" 1
  81 0020 8491      		lpm r24, Z
  82               		
  83               	 ;  0 "" 2
  84               	.LVL5:
  85               	/* #NOAPP */
  86               	.LBE4:
 237:./tmk_core/common/keymap.c **** #else
 238:./tmk_core/common/keymap.c ****     return keymaps[(layer)][(key.row)][(key.col)];
 239:./tmk_core/common/keymap.c **** #endif
 240:./tmk_core/common/keymap.c **** }
  87               		.loc 1 240 0
  88 0022 0895      		ret
  89               		.cfi_endproc
  90               	.LFE14:
  92               		.section	.text.keymap_fn_to_action,"ax",@progbits
  93               		.weak	keymap_fn_to_action
  95               	keymap_fn_to_action:
  96               	.LFB15:
 241:./tmk_core/common/keymap.c **** 
 242:./tmk_core/common/keymap.c **** __attribute__ ((weak))
 243:./tmk_core/common/keymap.c **** action_t keymap_fn_to_action(uint8_t keycode)
 244:./tmk_core/common/keymap.c **** {
  97               		.loc 1 244 0
  98               		.cfi_startproc
  99               	.LVL6:
 100               	/* prologue: function */
 101               	/* frame size = 0 */
 102               	/* stack size = 0 */
 103               	.L__stack_usage = 0
 104               	.LBB5:
 245:./tmk_core/common/keymap.c **** #if defined(__AVR__)
 246:./tmk_core/common/keymap.c ****     return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
 105               		.loc 1 246 0
 106 0000 E82F      		mov r30,r24
 107 0002 F0E0      		ldi r31,0
 108 0004 EE0F      		lsl r30
 109 0006 FF1F      		rol r31
 110 0008 E050      		subi r30,lo8(-(fn_actions-384))
 111 000a F040      		sbci r31,hi8(-(fn_actions-384))
 112               	.LVL7:
 113               	.LBE5:
 247:./tmk_core/common/keymap.c **** #else
 248:./tmk_core/common/keymap.c ****     return fn_actions[FN_INDEX(keycode)];
 249:./tmk_core/common/keymap.c **** #endif
 250:./tmk_core/common/keymap.c **** }
 114               		.loc 1 250 0
 115               	/* #APP */
 116               	 ;  246 "./tmk_core/common/keymap.c" 1
 117 000c 8591      		lpm r24, Z+
 118 000e 9491      		lpm r25, Z
 119               		
 120               	 ;  0 "" 2
 121               	.LVL8:
 122               	/* #NOAPP */
 123 0010 0895      		ret
 124               		.cfi_endproc
 125               	.LFE15:
 127               		.section	.text.action_for_key,"ax",@progbits
 128               		.weak	action_for_key
 130               	action_for_key:
 131               	.LFB10:
  40:./tmk_core/common/keymap.c **** {
 132               		.loc 1 40 0
 133               		.cfi_startproc
 134               	.LVL9:
 135               	/* prologue: function */
 136               	/* frame size = 0 */
 137               	/* stack size = 0 */
 138               	.L__stack_usage = 0
  41:./tmk_core/common/keymap.c ****     uint8_t keycode = keymap_key_to_keycode(layer, key);
 139               		.loc 1 41 0
 140 0000 0E94 0000 		call keymap_key_to_keycode
 141               	.LVL10:
  42:./tmk_core/common/keymap.c ****     switch (keycode) {
 142               		.loc 1 42 0
 143 0004 90E4      		ldi r25,lo8(64)
 144 0006 980F      		add r25,r24
 145 0008 9032      		cpi r25,lo8(32)
 146 000a 00F4      		brsh .L6
  44:./tmk_core/common/keymap.c ****             return keymap_fn_to_action(keycode);
 147               		.loc 1 44 0
 148 000c 0E94 0000 		call keymap_fn_to_action
 149               	.LVL11:
 150 0010 0895      		ret
 151               	.LVL12:
 152               	.L6:
 153               	.LBB10:
 154               	.LBB11:
 140:./tmk_core/common/keymap.c ****     switch (keycode) {
 155               		.loc 1 140 0
 156 0012 8D3B      		cpi r24,lo8(-67)
 157 0014 00F4      		brsh .L10
 158 0016 883A      		cpi r24,lo8(-88)
 159 0018 00F4      		brsh .L11
 160 001a 853A      		cpi r24,lo8(-91)
 161 001c 00F4      		brsh .L12
 162 001e 8430      		cpi r24,lo8(4)
 163 0020 00F4      		brsh .L13
 164 0022 8130      		cpi r24,lo8(1)
 165 0024 01F0      		breq .+2
 166 0026 00C0      		rjmp .L20
 155:./tmk_core/common/keymap.c ****             return (action_t)ACTION_TRANSPARENT;
 167               		.loc 1 155 0
 168 0028 21E0      		ldi r18,lo8(1)
 169 002a 30E0      		ldi r19,0
 170 002c 00C0      		rjmp .L9
 171               	.L10:
 140:./tmk_core/common/keymap.c ****     switch (keycode) {
 172               		.loc 1 140 0
 173 002e 883E      		cpi r24,lo8(-24)
 174 0030 00F4      		brsh .L15
 175 0032 803E      		cpi r24,lo8(-32)
 176 0034 00F4      		brsh .L13
 177 0036 8F3B      		cpi r24,lo8(-65)
 178 0038 01F0      		breq .+2
 179 003a 00C0      		rjmp .L20
 158:./tmk_core/common/keymap.c ****             clear_keyboard();
 180               		.loc 1 158 0
 181 003c 0E94 0000 		call clear_keyboard
 182               	.LVL13:
 183               	.LBB12:
 184               	.LBB13:
 185               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 186               		.loc 2 163 0
 187 0040 2FEF      		ldi r18,lo8(159999)
 188 0042 80E7      		ldi r24,hi8(159999)
 189 0044 92E0      		ldi r25,hlo8(159999)
 190 0046 2150      		1: subi r18,1
 191 0048 8040      		sbci r24,0
 192 004a 9040      		sbci r25,0
 193 004c 01F4      		brne 1b
 194 004e 00C0      		rjmp .
 195 0050 0000      		nop
 196               	.LBE13:
 197               	.LBE12:
 160:./tmk_core/common/keymap.c ****             bootloader_jump(); // not return
 198               		.loc 1 160 0
 199 0052 0E94 0000 		call bootloader_jump
 200               	.LVL14:
 201 0056 00C0      		rjmp .L20
 202               	.LVL15:
 203               	.L15:
 140:./tmk_core/common/keymap.c ****     switch (keycode) {
 204               		.loc 1 140 0
 205 0058 803F      		cpi r24,lo8(-16)
 206 005a 00F4      		brsh .+2
 207 005c 00C0      		rjmp .L20
 152:./tmk_core/common/keymap.c ****             return (action_t)ACTION_MOUSEKEY(keycode);
 208               		.loc 1 152 0
 209 005e 282F      		mov r18,r24
 210 0060 30E0      		ldi r19,0
 211 0062 3065      		ori r19,80
 212 0064 00C0      		rjmp .L9
 213               	.L13:
 143:./tmk_core/common/keymap.c ****             return (action_t)ACTION_KEY(keycode);
 214               		.loc 1 143 0
 215 0066 282F      		mov r18,r24
 216 0068 30E0      		ldi r19,0
 217 006a 00C0      		rjmp .L9
 218               	.L12:
 146:./tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
 219               		.loc 1 146 0
 220 006c 853A      		cpi r24,lo8(-91)
 221 006e 01F0      		breq .L21
 222 0070 863A      		cpi r24,lo8(-90)
 223 0072 01F4      		brne .L22
 224 0074 92E8      		ldi r25,lo8(-126)
 225 0076 00C0      		rjmp .L45
 226               	.L21:
 227 0078 91E8      		ldi r25,lo8(-127)
 228 007a 00C0      		rjmp .L45
 229               	.L22:
 230 007c 93E8      		ldi r25,lo8(-125)
 231               	.L45:
 232 007e 80E4      		ldi r24,lo8(64)
 233               	.LVL16:
 234 0080 00C0      		rjmp .L19
 235               	.LVL17:
 236               	.L11:
 149:./tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 237               		.loc 1 149 0
 238 0082 883A      		cpi r24,lo8(-88)
 239 0084 01F0      		breq .L23
 240 0086 893A      		cpi r24,lo8(-87)
 241 0088 01F0      		breq .L24
 242 008a 8A3A      		cpi r24,lo8(-86)
 243 008c 01F0      		breq .L25
 244 008e 8B3A      		cpi r24,lo8(-85)
 245 0090 01F0      		breq .L26
 246 0092 8C3A      		cpi r24,lo8(-84)
 247 0094 01F0      		breq .L27
 248 0096 8D3A      		cpi r24,lo8(-83)
 249 0098 01F0      		breq .L28
 250 009a 8E3A      		cpi r24,lo8(-82)
 251 009c 01F0      		breq .L29
 252 009e 8F3A      		cpi r24,lo8(-81)
 253 00a0 01F0      		breq .L30
 254 00a2 813B      		cpi r24,lo8(-79)
 255 00a4 01F0      		breq .L31
 256 00a6 803B      		cpi r24,lo8(-80)
 257 00a8 01F0      		breq .L32
 258 00aa 823B      		cpi r24,lo8(-78)
 259 00ac 01F0      		breq .L33
 260 00ae 833B      		cpi r24,lo8(-77)
 261 00b0 01F0      		breq .L34
 262 00b2 843B      		cpi r24,lo8(-76)
 263 00b4 01F0      		breq .L35
 264 00b6 853B      		cpi r24,lo8(-75)
 265 00b8 01F0      		breq .L36
 266 00ba 863B      		cpi r24,lo8(-74)
 267 00bc 01F0      		breq .L37
 268 00be 873B      		cpi r24,lo8(-73)
 269 00c0 01F0      		breq .L38
 270 00c2 883B      		cpi r24,lo8(-72)
 271 00c4 01F0      		breq .L39
 272 00c6 893B      		cpi r24,lo8(-71)
 273 00c8 01F0      		breq .L40
 274 00ca 8A3B      		cpi r24,lo8(-70)
 275 00cc 01F0      		breq .L41
 276 00ce 8B3B      		cpi r24,lo8(-69)
 277 00d0 01F0      		breq .L42
 278 00d2 8C3B      		cpi r24,lo8(-68)
 279 00d4 01F4      		brne .L43
 280 00d6 9AE2      		ldi r25,lo8(42)
 281 00d8 00C0      		rjmp .L46
 282               	.L23:
 283 00da 92EE      		ldi r25,lo8(-30)
 284 00dc 00C0      		rjmp .L47
 285               	.L24:
 286 00de 99EE      		ldi r25,lo8(-23)
 287 00e0 00C0      		rjmp .L47
 288               	.L25:
 289 00e2 9AEE      		ldi r25,lo8(-22)
 290 00e4 00C0      		rjmp .L47
 291               	.L26:
 292 00e6 95EB      		ldi r25,lo8(-75)
 293 00e8 00C0      		rjmp .L47
 294               	.L27:
 295 00ea 96EB      		ldi r25,lo8(-74)
 296 00ec 00C0      		rjmp .L47
 297               	.L28:
 298 00ee 93EB      		ldi r25,lo8(-77)
 299 00f0 00C0      		rjmp .L47
 300               	.L29:
 301 00f2 94EB      		ldi r25,lo8(-76)
 302 00f4 00C0      		rjmp .L47
 303               	.L30:
 304 00f6 97EB      		ldi r25,lo8(-73)
 305 00f8 00C0      		rjmp .L47
 306               	.L31:
 307 00fa 9CEC      		ldi r25,lo8(-52)
 308 00fc 00C0      		rjmp .L47
 309               	.L32:
 310 00fe 9DEC      		ldi r25,lo8(-51)
 311 0100 00C0      		rjmp .L47
 312               	.L33:
 313 0102 93E8      		ldi r25,lo8(-125)
 314 0104 00C0      		rjmp .L48
 315               	.L34:
 316 0106 9AE8      		ldi r25,lo8(-118)
 317 0108 00C0      		rjmp .L48
 318               	.L35:
 319 010a 92E9      		ldi r25,lo8(-110)
 320 010c 00C0      		rjmp .L48
 321               	.L36:
 322 010e 94E9      		ldi r25,lo8(-108)
 323               	.L48:
 324 0110 85E4      		ldi r24,lo8(69)
 325               	.LVL18:
 326 0112 00C0      		rjmp .L19
 327               	.LVL19:
 328               	.L37:
 329 0114 91E2      		ldi r25,lo8(33)
 330 0116 00C0      		rjmp .L46
 331               	.L38:
 332 0118 93E2      		ldi r25,lo8(35)
 333 011a 00C0      		rjmp .L46
 334               	.L39:
 335 011c 94E2      		ldi r25,lo8(36)
 336 011e 00C0      		rjmp .L46
 337               	.L40:
 338 0120 95E2      		ldi r25,lo8(37)
 339 0122 00C0      		rjmp .L46
 340               	.L41:
 341 0124 96E2      		ldi r25,lo8(38)
 342 0126 00C0      		rjmp .L46
 343               	.L42:
 344 0128 97E2      		ldi r25,lo8(39)
 345               	.L46:
 346 012a 86E4      		ldi r24,lo8(70)
 347               	.LVL20:
 348 012c 00C0      		rjmp .L19
 349               	.LVL21:
 350               	.L43:
 351 012e 90E0      		ldi r25,0
 352               	.L47:
 353 0130 84E4      		ldi r24,lo8(68)
 354               	.LVL22:
 355               	.L19:
 356 0132 292F      		mov r18,r25
 357 0134 382F      		mov r19,r24
 358 0136 00C0      		rjmp .L9
 359               	.L20:
 163:./tmk_core/common/keymap.c ****             return (action_t)ACTION_NO;
 360               		.loc 1 163 0
 361 0138 20E0      		ldi r18,0
 362 013a 30E0      		ldi r19,0
 363               	.L9:
 364 013c C901      		movw r24,r18
 365               	.LBE11:
 366               	.LBE10:
 113:./tmk_core/common/keymap.c **** }
 367               		.loc 1 113 0
 368 013e 0895      		ret
 369               		.cfi_endproc
 370               	.LFE10:
 372               		.text
 373               	.Letext0:
 374               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 375               		.file 4 "./tmk_core/common/keyboard.h"
 376               		.file 5 "./tmk_core/common/keycode.h"
 377               		.file 6 "./tmk_core/common/action_code.h"
 378               		.file 7 "./tmk_core/common/action_macro.h"
 379               		.file 8 "./tmk_core/common/action.h"
 380               		.file 9 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:00000000 keymap.c
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccLyrvwq.s:2      *ABS*:0000003e __SP_H__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccLyrvwq.s:3      *ABS*:0000003d __SP_L__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccLyrvwq.s:4      *ABS*:0000003f __SREG__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccLyrvwq.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccLyrvwq.s:6      *ABS*:00000001 __zero_reg__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccLyrvwq.s:13     .text.action_get_macro:00000000 action_get_macro
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccLyrvwq.s:34     .text.action_function:00000000 action_function
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccLyrvwq.s:50     .text.keymap_key_to_keycode:00000000 keymap_key_to_keycode
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccLyrvwq.s:95     .text.keymap_fn_to_action:00000000 keymap_fn_to_action
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccLyrvwq.s:130    .text.action_for_key:00000000 action_for_key

UNDEFINED SYMBOLS
keymaps
fn_actions
clear_keyboard
bootloader_jump
