   1               		.file	"keymap_custom.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_get_macro,"ax",@progbits
  11               	.global	action_get_macro
  13               	action_get_macro:
  14               	.LFB4:
  15               		.file 1 "keymap_custom.c"
   1:keymap_custom.c **** /*
   2:keymap_custom.c ****  * Hasu: my personal keymap
   3:keymap_custom.c ****  */
   4:keymap_custom.c **** #include "keymap_common.h"
   5:keymap_custom.c **** 
   6:keymap_custom.c **** 
   7:keymap_custom.c **** #ifdef KEYMAP_SECTION_ENABLE
   8:keymap_custom.c **** const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS] __attribute__ ((section (".keymap.keymaps"))) = {
   9:keymap_custom.c **** #else
  10:keymap_custom.c **** const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS] PROGMEM = {
  11:keymap_custom.c **** #endif
  12:keymap_custom.c ****     /* Layer 0: Fn0 Default Layer
  13:keymap_custom.c ****      * ,-----------------------------------------------------------.
  14:keymap_custom.c ****      * |Esc|  1|  2|  3|  4|  5|  6|  7|  8|  9|  0|  -|  =|  \|  `|
  15:keymap_custom.c ****      * |-----------------------------------------------------------|
  16:keymap_custom.c ****      * |Tab  |  Q|  W|  E|  R|  T|  Y|  U|  I|  O|  P|  [|  ]|Backs|
  17:keymap_custom.c ****      * |-----------------------------------------------------------|
  18:keymap_custom.c ****      * |Fn3   |  A|  S|  D|  F|  G|  H|  J|  K|  L|  ;|  '|Enter   |
  19:keymap_custom.c ****      * |-----------------------------------------------------------|
  20:keymap_custom.c ****      * |Shift   |  Z|  X|  C|  V|  B|  N|  M|  ,|  .|  /|Shift |Fn1|
  21:keymap_custom.c ****      * `-----------------------------------------------------------'
  22:keymap_custom.c ****      *       |Alt|Gui  |         Space         |Gui  |Alt|
  23:keymap_custom.c ****      *       `-------------------------------------------'
  24:keymap_custom.c ****      */
  25:keymap_custom.c ****     [0] = \
  26:keymap_custom.c ****     KEYMAP(ESC, 1,   2,   3,   4,   5,   6,   7,   8,   9,   0,   MINS,EQL, BSLS,GRV, \
  27:keymap_custom.c ****            TAB ,   Q,   W,   E,   R,   T,   Y,   U,   I,   O,   P,   LBRC,RBRC,BSPC, \
  28:keymap_custom.c ****            FN2  ,   A,   S,   D,   F,   G,   H,   J,   K,   L, SCLN, QUOT,ENT, \
  29:keymap_custom.c ****            LSFT  ,   Z,   X,   C,   V,   B,   N,   M, COMM, DOT, SLSH, RSFT,FN6, \
  30:keymap_custom.c ****                 LALT, FN1,           SPC           , RGUI, RALT),
  31:keymap_custom.c **** 
  32:keymap_custom.c ****     /* Layer 2: Fn2 Vi mode
  33:keymap_custom.c ****      * ,-----------------------------------------------------------.
  34:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  35:keymap_custom.c ****      * |-----------------------------------------------------------|
  36:keymap_custom.c ****      * |Tab  |   |   |   |   |   |   |   |   |   |   |   |    Backs|
  37:keymap_custom.c ****      * |-----------------------------------------------------------|
  38:keymap_custom.c ****      * |Fn3   |   |   |  |BSPC|   |Lef|Dow|Up |Rig|   |   |Return  |
  39:keymap_custom.c ****      * |-----------------------------------------------------------|
  40:keymap_custom.c ****      * |Shift   |   |   |   |   |   |   |   |   |   |   Shift |    |
  41:keymap_custom.c ****      * `-----------------------------------------------------------'
  42:keymap_custom.c ****      *       |Alt|Gui  |          Space        |Gui  |Alt|
  43:keymap_custom.c ****      *       `-------------------------------------------`
  44:keymap_custom.c ****      */
  45:keymap_custom.c ****     [1] = \
  46:keymap_custom.c ****     KEYMAP(GRV, 1,   2,   3,   4,   5,   6,   7,   8,   9,   0, MINS, EQL, BSLS, GRV, \
  47:keymap_custom.c ****            TAB ,   Q,   W,   E,   R,   T,   Y,   U,   I,   O,  P, LBRC, RBRC, BSPC, \
  48:keymap_custom.c ****            LCTL ,   A,   S,   D,   F,   G,   H,    J,   K ,  L, SCLN, QUOT, ENT, \
  49:keymap_custom.c ****            LSFT  ,   Z,   X,   C,   V,   B,   N,   M, COMM, DOT, SLSH, RSFT,TRNS, \
  50:keymap_custom.c ****                 LALT, TRNS,           SPC           , RGUI, RALT),
  51:keymap_custom.c **** 
  52:keymap_custom.c ****     /* Layer 3: Fn3 Vi mode[Slash]
  53:keymap_custom.c ****      * ,-----------------------------------------------------------.
  54:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  55:keymap_custom.c ****      * |-----------------------------------------------------------|
  56:keymap_custom.c ****      * |Tab  |   |   |   |   |   |   |   |   |   |   |   |    Backs|
  57:keymap_custom.c ****      * |-----------------------------------------------------------|
  58:keymap_custom.c ****      * |Fn2   |   |   |  |BSPC|   |Lef|Dow|Up |Rig|   |   |Return  |
  59:keymap_custom.c ****      * |-----------------------------------------------------------|
  60:keymap_custom.c ****      * |Shift   |   |   |   |   |   |   |   |   |   |   Shift |    |
  61:keymap_custom.c ****      * `-----------------------------------------------------------'
  62:keymap_custom.c ****      *       |Alt|Gui  |          Space        |Gui  |Alt|
  63:keymap_custom.c ****      *       `-------------------------------------------`
  64:keymap_custom.c ****      */
  65:keymap_custom.c ****     [2] = \
  66:keymap_custom.c ****     KEYMAP(ESC, TRNS, TRNS, TRNS, FN19, TRNS, FN20, TRNS, TRNS, TRNS, TRNS, TRNS, TRNS, INS, DEL, \
  67:keymap_custom.c ****            TAB , TRNS, TRNS, FN17, TRNS, TRNS, TRNS, TRNS, PPLS, TRNS, TRNS, TRNS, TRNS, BSPC, \
  68:keymap_custom.c ****            TRNS  , TRNS, TRNS, FN15, FN14, FN16, FN10, FN11,  FN12,  FN13, TRNS, TRNS, FN8, \
  69:keymap_custom.c ****            LSFT   , TRNS, TRNS, TRNS,   A , FN18, TRNS, TRNS, TRNS, TRNS, TRNS, RSFT, TRNS, \
  70:keymap_custom.c ****                 LALT, LGUI,    /*SPC*/ FN9 /*SPC*/    , RGUI, RALT),
  71:keymap_custom.c **** 
  72:keymap_custom.c **** 
  73:keymap_custom.c **** 
  74:keymap_custom.c ****     /* Layer 1: Fn1 HHKB mode[HHKB Fn]
  75:keymap_custom.c ****      * ,-----------------------------------------------------------.
  76:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  77:keymap_custom.c ****      * |-----------------------------------------------------------|
  78:keymap_custom.c ****      * |Caps |   |   |   |   |   |   |   |Psc|Slk|Pus|Up |   |Backs|
  79:keymap_custom.c ****      * |-----------------------------------------------------------|
  80:keymap_custom.c ****      * |Contro|VoD|VoU|Mut|   |   |  *|  /|Hom|PgU|Lef|Rig|Enter   |
  81:keymap_custom.c ****      * |-----------------------------------------------------------|
  82:keymap_custom.c ****      * |Shift   |   |   |   |   |   |  +|  -|End|PgD|Dow|Shift |   |
  83:keymap_custom.c ****      * `-----------------------------------------------------------'
  84:keymap_custom.c ****      *       |Alt|Gui  |         Space         |Gui  |Alt|
  85:keymap_custom.c ****      *       `-------------------------------------------'
  86:keymap_custom.c ****      */
  87:keymap_custom.c ****     [6] = \
  88:keymap_custom.c ****     KEYMAP(PWR, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
  89:keymap_custom.c ****            CAPS,  NO, MPRV, MPLY, MNXT,  NO,  NO,  NO,  NO, NO, NO, UP,  FN4,  BSPC, \
  90:keymap_custom.c ****            LCTL,   NO, VOLD, MUTE, VOLU,  NO, PAST, PSLS,HOME, PGUP, LEFT, RGHT, ENT, \
  91:keymap_custom.c ****             LSFT,  NO,  NO,  NO,  NO,  NO, PPLS, PMNS, END, PGDN, DOWN, RSFT, FN6, \
  92:keymap_custom.c ****                 LALT, LGUI,          TRNS,             RGUI, RALT),
  93:keymap_custom.c **** 
  94:keymap_custom.c **** #if 0
  95:keymap_custom.c ****     /* Layer 3: Fn3 Mouse mode(IJKL)[Semicolon]
  96:keymap_custom.c ****      * ,-----------------------------------------------------------.
  97:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  98:keymap_custom.c ****      * |-----------------------------------------------------------|
  99:keymap_custom.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|McU|MwU|MwR|Wbk|Wfr|Alt-T|
 100:keymap_custom.c ****      * |-----------------------------------------------------------|
 101:keymap_custom.c ****      * |Contro|   |   |   |   |   |Mb2|McL|McD|McR|Fn |   |Return  |
 102:keymap_custom.c ****      * |-----------------------------------------------------------|
 103:keymap_custom.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 104:keymap_custom.c ****      * `-----------------------------------------------------------'
 105:keymap_custom.c ****      *      |Alt |Gui  |          Mb1          |Fn   |Fn |
 106:keymap_custom.c ****      *      `--------------------------------------------'
 107:keymap_custom.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
 108:keymap_custom.c ****      */
 109:keymap_custom.c ****     [3] = \
 110:keymap_custom.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 111:keymap_custom.c ****            FN8, NO,  NO,  NO,  NO,  NO,  WH_L,WH_D,MS_U,WH_U,WH_R,FN9, FN10,FN8, \
 112:keymap_custom.c ****            LCTL,ACL0,ACL1,ACL2,ACL2,NO,  NO,  MS_L,MS_D,MS_R,FN3, NO,  ENT, \
 113:keymap_custom.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,NO,  RSFT,TRNS, \
 114:keymap_custom.c ****                 LALT,LGUI,          BTN1,               TRNS,TRNS),
 115:keymap_custom.c **** 
 116:keymap_custom.c ****     /* Layer 4: Fn4 Mouse mode(IJKL)[Space]
 117:keymap_custom.c ****      * ,-----------------------------------------------------------.
 118:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
 119:keymap_custom.c ****      * |-----------------------------------------------------------|
 120:keymap_custom.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|McU|MwU|MwR|Wbk|Wfr|Alt-T|
 121:keymap_custom.c ****      * |-----------------------------------------------------------|
 122:keymap_custom.c ****      * |Contro|   |   |   |   |   |Mb2|McL|McD|McR|Mb1|   |Return  |
 123:keymap_custom.c ****      * |-----------------------------------------------------------|
 124:keymap_custom.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 125:keymap_custom.c ****      * `-----------------------------------------------------------'
 126:keymap_custom.c ****      *      |Alt |Gui  |          Mb1          |Fn   |Fn |
 127:keymap_custom.c ****      *      `--------------------------------------------'
 128:keymap_custom.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
 129:keymap_custom.c ****      */
 130:keymap_custom.c ****     [4] = \
 131:keymap_custom.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 132:keymap_custom.c ****            FN8, NO,  NO,  NO,  NO,  NO,  WH_L,WH_D,MS_U,WH_U,WH_R,BTN4,BTN5,FN8, \
 133:keymap_custom.c ****            LCTL,VOLD,VOLU,MUTE,NO,  NO,  NO,  MS_L,MS_D,MS_R,BTN1,NO,  ENT, \
 134:keymap_custom.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,NO,  RSFT,TRNS, \
 135:keymap_custom.c ****                 LALT,LGUI,          TRNS,               TRNS,TRNS),
 136:keymap_custom.c **** #endif
 137:keymap_custom.c **** #if 0
 138:keymap_custom.c ****     /* Layer 3: Mouse mode(HJKL)[Semicolon]
 139:keymap_custom.c ****      * ,-----------------------------------------------------------.
 140:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
 141:keymap_custom.c ****      * |-----------------------------------------------------------|
 142:keymap_custom.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|MwU|MwR|   |   |   |Backs|
 143:keymap_custom.c ****      * |-----------------------------------------------------------|
 144:keymap_custom.c ****      * |Contro|   |   |   |   |   |McL|McD|McU|McR|Fn0|   |Return  |
 145:keymap_custom.c ****      * |-----------------------------------------------------------|
 146:keymap_custom.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 147:keymap_custom.c ****      * `-----------------------------------------------------------'
 148:keymap_custom.c ****      *      |Alt |Gui  |          Mb1          |Gui  |Fn0|
 149:keymap_custom.c ****      *      `--------------------------------------------'
 150:keymap_custom.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
 151:keymap_custom.c ****      */
 152:keymap_custom.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 153:keymap_custom.c ****            TAB, NO,  NO,  NO,  NO,  NO,  NO,  WH_D,WH_U,RGHT,NO,  NO,  NO,  BSPC, \
 154:keymap_custom.c ****            LCTL,NO,  ACL0,ACL1,ACL2,NO,  MS_L,MS_D,MS_U,MS_R,TRNS,QUOT,ENT, \
 155:keymap_custom.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,SLSH,RSFT,NO, \
 156:keymap_custom.c ****                 LALT,LGUI,          BTN1,               RGUI,TRNS),
 157:keymap_custom.c **** 
 158:keymap_custom.c ****     /* Layer4: Mouse mode(HJKL)[Space]
 159:keymap_custom.c ****      * ,-----------------------------------------------------------.
 160:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
 161:keymap_custom.c ****      * |-----------------------------------------------------------|
 162:keymap_custom.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|MwU|MwR|   |Wbk|Wfr|Alt-T|
 163:keymap_custom.c ****      * |-----------------------------------------------------------|
 164:keymap_custom.c ****      * |Contro|   |   |   |   |   |McL|McD|McU|McR|Fn0|   |Return  |
 165:keymap_custom.c ****      * |-----------------------------------------------------------|
 166:keymap_custom.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 167:keymap_custom.c ****      * `-----------------------------------------------------------'
 168:keymap_custom.c ****      *      |Alt |Gui  |          Fn0          |Gui  |Fn0|
 169:keymap_custom.c ****      *      `--------------------------------------------'
 170:keymap_custom.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
 171:keymap_custom.c ****      */
 172:keymap_custom.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 173:keymap_custom.c ****            FN8, NO,  NO,  NO,  NO,  NO,  NO,  WH_D,WH_U,RGHT,NO,  FN9, FN10,FN8, \
 174:keymap_custom.c ****            LCTL,NO,  ACL0,ACL1,ACL2,NO,  MS_L,MS_D,MS_U,MS_R,BTN1,NO,  ENT, \
 175:keymap_custom.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,NO,  RSFT,NO, \
 176:keymap_custom.c ****                 LALT,LGUI,          TRNS,               RGUI,RALT),
 177:keymap_custom.c **** #endif
 178:keymap_custom.c **** #if 0
 179:keymap_custom.c ****     /* Layer x: Matias half-qwerty keyboard style[Space]
 180:keymap_custom.c ****      * ,-----------------------------------------------------------.
 181:keymap_custom.c ****      * |  -|  0|  9|  8|  7|  6|  5|  4|  3|  2|  1|   |   |   |Esc|
 182:keymap_custom.c ****      * |-----------------------------------------------------------|
 183:keymap_custom.c ****      * |Backs|  P|  O|  I|  U|  Y|  T|  R|  E|  W|  Q|   |   |Tab  |
 184:keymap_custom.c ****      * |-----------------------------------------------------------|
 185:keymap_custom.c ****      * |Contro|  ;|  L|  K|  J|  H|  G|  F|  D|  S|  A|Con|Control |
 186:keymap_custom.c ****      * |-----------------------------------------------------------|
 187:keymap_custom.c ****      * |Shift   |  /|  .|  ,|  M|  N|  B|  V|  C|  X|  Z|Shift |   |
 188:keymap_custom.c ****      * `-----------------------------------------------------------'
 189:keymap_custom.c ****      *      |Alt |Gui  |          Fn0          |Gui  |Alt|
 190:keymap_custom.c ****      *      `--------------------------------------------'
 191:keymap_custom.c ****      */
 192:keymap_custom.c ****     KEYMAP(MINS,0,   9,   8,   7,   6,   5,   4,   3,   2,   1,   NO,  NO,  NO,  ESC, \
 193:keymap_custom.c ****            BSPC,P,   O,   I,   U,   Y,   T,   R,   E,   W,   Q,   NO,  NO,  TAB, \
 194:keymap_custom.c ****            LCTL,SCLN,L,   K,   J,   H,   G,   F,   D,   S,   A,   RCTL,RCTL, \
 195:keymap_custom.c ****            LSFT,SLSH,DOT, COMM,M,   N,   B,   V,   C,   X,   Z,   RSFT,NO, \
 196:keymap_custom.c ****                 LALT,LGUI,          TRNS,               RGUI,RALT),
 197:keymap_custom.c **** #endif
 198:keymap_custom.c **** };
 199:keymap_custom.c **** 
 200:keymap_custom.c **** 
 201:keymap_custom.c **** 
 202:keymap_custom.c **** /* id for user defined functions */
 203:keymap_custom.c **** enum function_id {
 204:keymap_custom.c ****     SPACE,
 205:keymap_custom.c ****     ENTER,
 206:keymap_custom.c **** 
 207:keymap_custom.c ****     UP,
 208:keymap_custom.c ****     DOWN,
 209:keymap_custom.c ****     LEFT,
 210:keymap_custom.c ****     RIGHT,
 211:keymap_custom.c **** 
 212:keymap_custom.c ****     BCKSPC,
 213:keymap_custom.c ****     DEL_WORD,
 214:keymap_custom.c ****     FWD_DEL,
 215:keymap_custom.c **** 
 216:keymap_custom.c ****     END_WORD,
 217:keymap_custom.c ****     BEGIN_WORD,
 218:keymap_custom.c ****     END_LINE,
 219:keymap_custom.c ****     BEGIN_LINE,
 220:keymap_custom.c ****     // LSHIFT_LPAREN,
 221:keymap_custom.c **** };
 222:keymap_custom.c **** 
 223:keymap_custom.c **** enum macro_id {
 224:keymap_custom.c ****     HELLO,
 225:keymap_custom.c ****     VOLUP,
 226:keymap_custom.c ****     ALT_TAB,
 227:keymap_custom.c ****     ALT_TILDE,
 228:keymap_custom.c **** };
 229:keymap_custom.c **** 
 230:keymap_custom.c **** 
 231:keymap_custom.c **** /*
 232:keymap_custom.c ****  * Fn action definition
 233:keymap_custom.c ****  */
 234:keymap_custom.c **** #ifdef KEYMAP_SECTION_ENABLE
 235:keymap_custom.c **** const action_t fn_actions[] __attribute__ ((section (".keymap.fn_actions"))) = {
 236:keymap_custom.c **** #else
 237:keymap_custom.c **** const action_t fn_actions[] PROGMEM = {
 238:keymap_custom.c **** #endif
 239:keymap_custom.c ****     [0]  = ACTION_DEFAULT_LAYER_SET(0),                // Default layer(not used)
 240:keymap_custom.c ****     [1]  = ACTION_LAYER_MODS(1, MOD_LGUI),             // Cursor layer with Slash* /*KC_SLASH*/
 241:keymap_custom.c ****     [2]  = ACTION_LAYER_MODS(2, MOD_LCTL),             // Cursor layer with Slash* /*KC_SLASH*/
 242:keymap_custom.c ****     // [2]  = ACTION_MODS_TAP_KEY(MOD_LCTL, KC_ESC)
 243:keymap_custom.c ****     // [3] = ACTION_LAYER_MOMENTARY(2),
 244:keymap_custom.c ****     [6]  = ACTION_LAYER_MOMENTARY(6),                 // HHKB layer
 245:keymap_custom.c ****     // [4] = ACTION_MACRO(ALT_TILDE),                    // Macro: CMD + Tilde
 246:keymap_custom.c **** 
 247:keymap_custom.c ****     [8]  = ACTION_FUNCTION(ENTER),
 248:keymap_custom.c ****     [9]  = ACTION_FUNCTION(SPACE),
 249:keymap_custom.c ****     [10] = ACTION_FUNCTION(LEFT),
 250:keymap_custom.c ****     [11] = ACTION_FUNCTION(DOWN),
 251:keymap_custom.c ****     [12] = ACTION_FUNCTION(UP),
 252:keymap_custom.c ****     [13] = ACTION_FUNCTION(RIGHT),
 253:keymap_custom.c **** 
 254:keymap_custom.c ****     [14] = ACTION_FUNCTION(BCKSPC),
 255:keymap_custom.c ****     [15] = ACTION_FUNCTION(DEL_WORD),
 256:keymap_custom.c ****     [16] = ACTION_FUNCTION(FWD_DEL),
 257:keymap_custom.c **** 
 258:keymap_custom.c ****     [17] = ACTION_FUNCTION(END_WORD),
 259:keymap_custom.c ****     [18] = ACTION_FUNCTION(BEGIN_WORD),
 260:keymap_custom.c ****     [19] = ACTION_FUNCTION(END_LINE),
 261:keymap_custom.c ****     [20] = ACTION_FUNCTION(BEGIN_LINE)
 262:keymap_custom.c **** 
 263:keymap_custom.c ****     // [3] = ACTION_LAYER_TAP_KEY(3, KC_SCLN),           // Mousekey layer with Semicolon*
 264:keymap_custom.c ****     // [4] = ACTION_LAYER_TAP_KEY(4, KC_SPC),            // Mousekey layer with Space
 265:keymap_custom.c ****    //  [5] = ACTION_LAYER_MOMENTARY(4),                  // Mousekey layer(IJKL)
 266:keymap_custom.c ****    //  [6] = ACTION_MODS_TAP_KEY(MOD_RCTL, KC_ENT),      // RControl with tap Enter
 267:keymap_custom.c ****    //  [7] = ACTION_MODS_ONESHOT(MOD_LSFT),              // Oneshot Shift
 268:keymap_custom.c ****    //  [8] = ACTION_MACRO(ALT_TAB),                      // Application switching
 269:keymap_custom.c ****    //  [9] = ACTION_MODS_KEY(MOD_LALT, KC_LEFT),
 270:keymap_custom.c ****    // [10] = ACTION_MODS_KEY(MOD_LALT, KC_RIGHT),
 271:keymap_custom.c **** 
 272:keymap_custom.c **** //  [x] = ACTION_LMOD_TAP_KEY(KC_LCTL, KC_BSPC),        // LControl with tap Backspace
 273:keymap_custom.c **** //  [x] = ACTION_LMOD_TAP_KEY(KC_LCTL, KC_ESC),         // LControl with tap Esc
 274:keymap_custom.c **** //  [x] = ACTION_FUNCTION_TAP(LSHIFT_LPAREN),           // Function: LShift with tap '('
 275:keymap_custom.c ****  // [x] = ACTION_MACRO(HELLO),                          // Macro: say hello
 276:keymap_custom.c **** //  [x] = ACTION_MACRO(VOLUP),                          // Macro: media key
 277:keymap_custom.c **** };
 278:keymap_custom.c **** 
 279:keymap_custom.c **** 
 280:keymap_custom.c **** /*
 281:keymap_custom.c ****  * Macro definition
 282:keymap_custom.c ****  */
 283:keymap_custom.c **** const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
 284:keymap_custom.c **** {
  16               		.loc 1 284 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 FC01      		movw r30,r24
 285:keymap_custom.c ****     switch (id) {
  24               		.loc 1 285 0
  25 0002 6130      		cpi r22,lo8(1)
  26 0004 01F0      		breq .L3
  27 0006 00F0      		brlo .L4
  28 0008 6230      		cpi r22,lo8(2)
  29 000a 01F0      		breq .L5
  30 000c 6330      		cpi r22,lo8(3)
  31 000e 01F0      		breq .L6
  32 0010 00C0      		rjmp .L9
  33               	.L4:
 286:keymap_custom.c ****         case HELLO:
 287:keymap_custom.c ****             return (record->event.pressed ?
 288:keymap_custom.c ****                     MACRO( I(0), T(H), T(E), T(L), T(L), W(255), T(O), END ) :
  34               		.loc 1 288 0
  35 0012 8281      		ldd r24,Z+2
  36               	.LVL1:
  37 0014 8823      		tst r24
  38 0016 01F0      		breq .L9
  39 0018 80E0      		ldi r24,lo8(__m.2322)
  40 001a 90E0      		ldi r25,hi8(__m.2322)
  41 001c 0895      		ret
  42               	.LVL2:
  43               	.L3:
 289:keymap_custom.c ****                     MACRO_NONE );
 290:keymap_custom.c ****         case VOLUP:
 291:keymap_custom.c ****             return (record->event.pressed ?
 292:keymap_custom.c ****                     MACRO( D(VOLU), U(VOLU), END ) :
  44               		.loc 1 292 0
  45 001e 8281      		ldd r24,Z+2
  46               	.LVL3:
  47 0020 8823      		tst r24
  48 0022 01F0      		breq .L9
  49 0024 80E0      		ldi r24,lo8(__m.2325)
  50 0026 90E0      		ldi r25,hi8(__m.2325)
  51 0028 0895      		ret
  52               	.LVL4:
  53               	.L5:
 293:keymap_custom.c ****                     MACRO_NONE );
 294:keymap_custom.c ****         case ALT_TAB:
 295:keymap_custom.c ****             return (record->event.pressed ?
 296:keymap_custom.c ****                     MACRO( D(LALT), D(TAB), END ) :
  54               		.loc 1 296 0
  55 002a 8281      		ldd r24,Z+2
  56               	.LVL5:
  57 002c 8823      		tst r24
  58 002e 01F0      		breq .L10
  59 0030 80E0      		ldi r24,lo8(__m.2328)
  60 0032 90E0      		ldi r25,hi8(__m.2328)
  61 0034 0895      		ret
  62               	.LVL6:
  63               	.L6:
 297:keymap_custom.c ****                     MACRO( U(TAB), END ));
 298:keymap_custom.c ****         case ALT_TILDE:
 299:keymap_custom.c ****             return (record->event.pressed ?
 300:keymap_custom.c ****                     MACRO( D(LGUI), D(GRV), END ) :
  64               		.loc 1 300 0
  65 0036 8281      		ldd r24,Z+2
  66               	.LVL7:
  67 0038 8823      		tst r24
  68 003a 01F0      		breq .L11
  69 003c 80E0      		ldi r24,lo8(__m.2333)
  70 003e 90E0      		ldi r25,hi8(__m.2333)
  71 0040 0895      		ret
  72               	.L9:
 288:keymap_custom.c ****                     MACRO( I(0), T(H), T(E), T(L), T(L), W(255), T(O), END ) :
  73               		.loc 1 288 0
  74 0042 80E0      		ldi r24,0
  75 0044 90E0      		ldi r25,0
  76 0046 0895      		ret
  77               	.L10:
 296:keymap_custom.c ****                     MACRO( D(LALT), D(TAB), END ) :
  78               		.loc 1 296 0
  79 0048 80E0      		ldi r24,lo8(__m.2330)
  80 004a 90E0      		ldi r25,hi8(__m.2330)
  81 004c 0895      		ret
  82               	.L11:
  83               		.loc 1 300 0
  84 004e 80E0      		ldi r24,lo8(__m.2335)
  85 0050 90E0      		ldi r25,hi8(__m.2335)
 301:keymap_custom.c ****                     MACRO( U(GRV), END ));
 302:keymap_custom.c ****     }
 303:keymap_custom.c ****     return MACRO_NONE;
 304:keymap_custom.c **** }
  86               		.loc 1 304 0
  87 0052 0895      		ret
  88               		.cfi_endproc
  89               	.LFE4:
  91               		.section	.text.action_function,"ax",@progbits
  92               	.global	action_function
  94               	action_function:
  95               	.LFB5:
 305:keymap_custom.c **** 
 306:keymap_custom.c **** 
 307:keymap_custom.c **** 
 308:keymap_custom.c **** /*
 309:keymap_custom.c ****  * user defined action function
 310:keymap_custom.c ****  */
 311:keymap_custom.c **** void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
 312:keymap_custom.c **** {
  96               		.loc 1 312 0
  97               		.cfi_startproc
  98               	.LVL8:
  99 0000 CF93      		push r28
 100               	.LCFI0:
 101               		.cfi_def_cfa_offset 3
 102               		.cfi_offset 28, -2
 103 0002 DF93      		push r29
 104               	.LCFI1:
 105               		.cfi_def_cfa_offset 4
 106               		.cfi_offset 29, -3
 107               	/* prologue: function */
 108               	/* frame size = 0 */
 109               	/* stack size = 2 */
 110               	.L__stack_usage = 2
 111 0004 EC01      		movw r28,r24
 313:keymap_custom.c **** #   define MODS_GUI_MASK   (MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI))
 314:keymap_custom.c **** // #   define MODS_ALT_MASK   (MOD_BIT(KC_LALT)|MOD_BIT(KC_RALT))
 315:keymap_custom.c **** #   define MODS_CTRL_MASK   (MOD_BIT(KC_LCTRL)|MOD_BIT(KC_RCTRL))
 316:keymap_custom.c **** // #   define MODS_SFT_MASK   (MOD_BIT(KC_LSFT)|MOD_BIT(KC_RSFT))
 317:keymap_custom.c ****     static uint8_t gui_mod;
 318:keymap_custom.c ****     // static uint8_t alt_mod;
 319:keymap_custom.c ****     static uint8_t ctrl_mod;
 320:keymap_custom.c ****     // static uint8_t sft_mod;
 321:keymap_custom.c ****     // if (record->event.pressed) dprint("P"); else dprint("R");
 322:keymap_custom.c ****     // dprintf("%d", record->tap.count);
 323:keymap_custom.c ****     // if (record->tap.interrupted) dprint("i");
 324:keymap_custom.c ****     // dprint("\n");
 325:keymap_custom.c **** 
 326:keymap_custom.c ****     switch (id) {
 112               		.loc 1 326 0
 113 0006 462F      		mov r20,r22
 114               	.LVL9:
 115 0008 50E0      		ldi r21,0
 116 000a 4D30      		cpi r20,13
 117 000c 5105      		cpc r21,__zero_reg__
 118 000e 00F0      		brlo .+2
 119 0010 00C0      		rjmp .L14
 120 0012 FA01      		movw r30,r20
 121 0014 E050      		subi r30,lo8(-(gs(.L17)))
 122 0016 F040      		sbci r31,hi8(-(gs(.L17)))
 123 0018 0C94 0000 		jmp __tablejump2__
 124               	.LVL10:
 125               		.section	.progmem.gcc_sw_table.action_function,"a",@progbits
 126               		.p2align	1
 127               	.L17:
 128 0000 0000      		.word gs(.L16)
 129 0002 0000      		.word gs(.L18)
 130 0004 0000      		.word gs(.L19)
 131 0006 0000      		.word gs(.L20)
 132 0008 0000      		.word gs(.L21)
 133 000a 0000      		.word gs(.L22)
 134 000c 0000      		.word gs(.L23)
 135 000e 0000      		.word gs(.L24)
 136 0010 0000      		.word gs(.L25)
 137 0012 0000      		.word gs(.L26)
 138 0014 0000      		.word gs(.L27)
 139 0016 0000      		.word gs(.L28)
 140 0018 0000      		.word gs(.L29)
 141               		.section	.text.action_function
 142               	.L16:
 327:keymap_custom.c ****         case SPACE:
 328:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 143               		.loc 1 328 0
 144 001c 0E94 0000 		call get_mods
 145               	.LVL11:
 146 0020 8171      		andi r24,lo8(17)
 147 0022 8093 0000 		sts ctrl_mod.2343,r24
 329:keymap_custom.c ****             if(record->event.pressed) {
 148               		.loc 1 329 0
 149 0026 9A81      		ldd r25,Y+2
 150 0028 9923      		tst r25
 151 002a 01F0      		breq .L30
 330:keymap_custom.c ****                 del_mods(ctrl_mod);
 152               		.loc 1 330 0
 153 002c 0E94 0000 		call del_mods
 154               	.LVL12:
 331:keymap_custom.c ****                 add_key(KC_SPC);
 155               		.loc 1 331 0
 156 0030 8CE2      		ldi r24,lo8(44)
 157 0032 00C0      		rjmp .L43
 158               	.L30:
 332:keymap_custom.c ****                 send_keyboard_report();
 333:keymap_custom.c ****                 add_mods(ctrl_mod);
 334:keymap_custom.c ****             } else {
 335:keymap_custom.c ****                 del_key(KC_SPC);
 159               		.loc 1 335 0
 160 0034 8CE2      		ldi r24,lo8(44)
 161 0036 00C0      		rjmp .L44
 162               	.LVL13:
 163               	.L18:
 336:keymap_custom.c ****                 register_mods(ctrl_mod);
 337:keymap_custom.c ****                 send_keyboard_report();
 338:keymap_custom.c ****             }
 339:keymap_custom.c ****             return;
 340:keymap_custom.c **** 
 341:keymap_custom.c ****         case ENTER:
 342:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 164               		.loc 1 342 0
 165 0038 0E94 0000 		call get_mods
 166               	.LVL14:
 167 003c 8171      		andi r24,lo8(17)
 168 003e 8093 0000 		sts ctrl_mod.2343,r24
 343:keymap_custom.c ****             if(record->event.pressed) {
 169               		.loc 1 343 0
 170 0042 9A81      		ldd r25,Y+2
 171 0044 9923      		tst r25
 172 0046 01F0      		breq .L31
 344:keymap_custom.c ****                 del_mods(ctrl_mod);
 173               		.loc 1 344 0
 174 0048 0E94 0000 		call del_mods
 175               	.LVL15:
 345:keymap_custom.c ****                 add_key(KC_ENT);
 176               		.loc 1 345 0
 177 004c 88E2      		ldi r24,lo8(40)
 178               	.L43:
 179 004e 0E94 0000 		call add_key
 180               	.LVL16:
 346:keymap_custom.c ****                 send_keyboard_report();
 181               		.loc 1 346 0
 182 0052 0E94 0000 		call send_keyboard_report
 183               	.LVL17:
 184               	.L45:
 347:keymap_custom.c ****                 add_mods(ctrl_mod);
 185               		.loc 1 347 0
 186 0056 8091 0000 		lds r24,ctrl_mod.2343
 187               	/* epilogue start */
 348:keymap_custom.c ****             } else {
 349:keymap_custom.c ****                 del_key(KC_ENT);
 350:keymap_custom.c ****                 register_mods(ctrl_mod);
 351:keymap_custom.c ****                 send_keyboard_report();
 352:keymap_custom.c ****             }
 353:keymap_custom.c ****             return;
 354:keymap_custom.c **** 
 355:keymap_custom.c ****         // ****************************************
 356:keymap_custom.c ****         // VIM: LEFT, DOWN, UP, RIGHT
 357:keymap_custom.c ****         // ****************************************
 358:keymap_custom.c ****         case UP:
 359:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 360:keymap_custom.c ****             if(record->event.pressed) {
 361:keymap_custom.c ****                 del_mods(ctrl_mod);
 362:keymap_custom.c ****                 add_key(KC_UP);
 363:keymap_custom.c ****                 send_keyboard_report();
 364:keymap_custom.c ****                 add_mods(ctrl_mod);
 365:keymap_custom.c ****             } else {
 366:keymap_custom.c ****                 del_key(KC_UP);
 367:keymap_custom.c ****                 register_mods(ctrl_mod);
 368:keymap_custom.c ****                 send_keyboard_report();
 369:keymap_custom.c ****             }
 370:keymap_custom.c ****             return;
 371:keymap_custom.c **** 
 372:keymap_custom.c ****         case DOWN:
 373:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 374:keymap_custom.c ****             if(record->event.pressed) {
 375:keymap_custom.c ****                 del_mods(ctrl_mod);
 376:keymap_custom.c ****                 add_key(KC_DOWN);
 377:keymap_custom.c ****                 send_keyboard_report();
 378:keymap_custom.c ****                 add_mods(ctrl_mod);
 379:keymap_custom.c ****             } else {
 380:keymap_custom.c ****                 del_key(KC_DOWN);
 381:keymap_custom.c ****                 register_mods(ctrl_mod);
 382:keymap_custom.c ****                 send_keyboard_report();
 383:keymap_custom.c ****             }
 384:keymap_custom.c ****             return;
 385:keymap_custom.c **** 
 386:keymap_custom.c ****         case LEFT:
 387:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 388:keymap_custom.c ****             if(record->event.pressed) {
 389:keymap_custom.c ****                 del_mods(ctrl_mod);
 390:keymap_custom.c ****                 add_key(KC_LEFT);
 391:keymap_custom.c ****                 send_keyboard_report();
 392:keymap_custom.c ****                 add_mods(ctrl_mod);
 393:keymap_custom.c ****             } else {
 394:keymap_custom.c ****                 del_key(KC_LEFT);
 395:keymap_custom.c ****                 register_mods(ctrl_mod);
 396:keymap_custom.c ****                 send_keyboard_report();
 397:keymap_custom.c ****             }
 398:keymap_custom.c ****             return;
 399:keymap_custom.c **** 
 400:keymap_custom.c ****         case RIGHT:
 401:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 402:keymap_custom.c ****             if(record->event.pressed) {
 403:keymap_custom.c ****                 del_mods(ctrl_mod);
 404:keymap_custom.c ****                 add_key(KC_RIGHT);
 405:keymap_custom.c ****                 send_keyboard_report();
 406:keymap_custom.c ****                 add_mods(ctrl_mod);
 407:keymap_custom.c ****             } else {
 408:keymap_custom.c ****                 del_key(KC_RIGHT);
 409:keymap_custom.c ****                 register_mods(ctrl_mod);
 410:keymap_custom.c ****                 send_keyboard_report();
 411:keymap_custom.c ****             }
 412:keymap_custom.c ****             return;
 413:keymap_custom.c **** 
 414:keymap_custom.c ****         // ****************************************
 415:keymap_custom.c ****         // BACKSPACE, DELETE_WORD, FORWARD_DELETE
 416:keymap_custom.c ****         // ****************************************
 417:keymap_custom.c ****         case BCKSPC:
 418:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 419:keymap_custom.c ****             if(record->event.pressed) {
 420:keymap_custom.c ****                 del_mods(ctrl_mod);
 421:keymap_custom.c ****                 add_key(KC_BSPC);
 422:keymap_custom.c ****                 send_keyboard_report();
 423:keymap_custom.c ****                 add_mods(ctrl_mod);
 424:keymap_custom.c ****             } else {
 425:keymap_custom.c ****                 del_key(KC_BSPC);
 426:keymap_custom.c ****                 register_mods(ctrl_mod);
 427:keymap_custom.c ****                 send_keyboard_report();
 428:keymap_custom.c ****             }
 429:keymap_custom.c ****             return;
 430:keymap_custom.c **** 
 431:keymap_custom.c ****         case DEL_WORD:
 432:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 433:keymap_custom.c ****             if(record->event.pressed) {
 434:keymap_custom.c ****                 del_mods(ctrl_mod);
 435:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 436:keymap_custom.c ****                 add_key(KC_BSPC);
 437:keymap_custom.c ****                 send_keyboard_report();
 438:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LALT));
 439:keymap_custom.c ****                 add_mods(ctrl_mod);
 440:keymap_custom.c ****             } else {
 441:keymap_custom.c ****                 del_key(KC_BSPC);
 442:keymap_custom.c ****                 register_mods(ctrl_mod);
 443:keymap_custom.c ****                 send_keyboard_report();
 444:keymap_custom.c ****             }
 445:keymap_custom.c ****             return;
 446:keymap_custom.c **** 
 447:keymap_custom.c ****         case FWD_DEL:
 448:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 449:keymap_custom.c ****             if(record->event.pressed) {
 450:keymap_custom.c ****                 del_mods(ctrl_mod);
 451:keymap_custom.c ****                 add_key(KC_DEL);
 452:keymap_custom.c ****                 send_keyboard_report();
 453:keymap_custom.c ****                 add_mods(ctrl_mod);
 454:keymap_custom.c ****             } else {
 455:keymap_custom.c ****                 del_key(KC_DEL);
 456:keymap_custom.c ****                 register_mods(ctrl_mod);
 457:keymap_custom.c ****                 send_keyboard_report();
 458:keymap_custom.c ****             }
 459:keymap_custom.c ****             return;
 460:keymap_custom.c **** 
 461:keymap_custom.c ****         // ****************************************
 462:keymap_custom.c ****         // END_WORD, BEGIN_WORD, END_LINE, BEGIN_LINE
 463:keymap_custom.c ****         // ****************************************
 464:keymap_custom.c **** 
 465:keymap_custom.c ****         case END_WORD:
 466:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 467:keymap_custom.c ****             if(record->event.pressed) {
 468:keymap_custom.c ****                 del_mods(ctrl_mod);
 469:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 470:keymap_custom.c ****                 add_key(KC_RIGHT);
 471:keymap_custom.c ****                 send_keyboard_report();
 472:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LALT));
 473:keymap_custom.c ****                 add_mods(ctrl_mod);
 474:keymap_custom.c ****             } else {
 475:keymap_custom.c ****                 del_key(KC_RIGHT);
 476:keymap_custom.c ****                 register_mods(ctrl_mod);
 477:keymap_custom.c ****                 send_keyboard_report();
 478:keymap_custom.c ****             }
 479:keymap_custom.c ****             return;
 480:keymap_custom.c **** 
 481:keymap_custom.c ****         case BEGIN_WORD:
 482:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 483:keymap_custom.c ****             if(record->event.pressed) {
 484:keymap_custom.c ****                 del_mods(ctrl_mod);
 485:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 486:keymap_custom.c ****                 add_key(KC_LEFT);
 487:keymap_custom.c ****                 send_keyboard_report();
 488:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LALT));
 489:keymap_custom.c ****                 add_mods(ctrl_mod);
 490:keymap_custom.c ****             } else {
 491:keymap_custom.c ****                 del_key(KC_LEFT);
 492:keymap_custom.c ****                 register_mods(ctrl_mod);
 493:keymap_custom.c ****                 send_keyboard_report();
 494:keymap_custom.c ****             }
 495:keymap_custom.c ****             return;
 496:keymap_custom.c **** 
 497:keymap_custom.c ****         case END_LINE:
 498:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 499:keymap_custom.c ****             if(record->event.pressed) {
 500:keymap_custom.c ****                 del_mods(ctrl_mod);
 501:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LGUI));
 502:keymap_custom.c ****                 add_key(KC_RIGHT);
 503:keymap_custom.c ****                 send_keyboard_report();
 504:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LGUI));
 505:keymap_custom.c ****                 add_mods(ctrl_mod);
 506:keymap_custom.c ****             } else {
 507:keymap_custom.c ****                 del_key(KC_RIGHT);
 508:keymap_custom.c ****                 register_mods(ctrl_mod);
 509:keymap_custom.c ****                 send_keyboard_report();
 510:keymap_custom.c ****             }
 511:keymap_custom.c ****             return;
 512:keymap_custom.c **** 
 513:keymap_custom.c ****         case BEGIN_LINE:
 514:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 515:keymap_custom.c ****             if(record->event.pressed) {
 516:keymap_custom.c ****                 del_mods(ctrl_mod);
 517:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LGUI));
 518:keymap_custom.c ****                 add_key(KC_LEFT);
 519:keymap_custom.c ****                 send_keyboard_report();
 520:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LGUI));
 521:keymap_custom.c ****                 add_mods(ctrl_mod);
 522:keymap_custom.c ****             } else {
 523:keymap_custom.c ****                 del_key(KC_LEFT);
 524:keymap_custom.c ****                 register_mods(ctrl_mod);
 525:keymap_custom.c ****                 send_keyboard_report();
 526:keymap_custom.c ****             }
 527:keymap_custom.c ****             return;
 528:keymap_custom.c **** 
 529:keymap_custom.c ****         // case LSHIFT_LPAREN:
 530:keymap_custom.c ****         //     // Shift parentheses example: LShft + tap '('
 531:keymap_custom.c ****         //     // http://stevelosh.com/blog/2012/10/a-modern-space-cadet/#shift-parentheses
 532:keymap_custom.c ****         //     // http://geekhack.org/index.php?topic=41989.msg1304899#msg1304899
 533:keymap_custom.c ****         //     if (record->event.pressed) {
 534:keymap_custom.c ****         //         if (record->tap.count > 0 && !record->tap.interrupted) {
 535:keymap_custom.c ****         //             if (record->tap.interrupted) {
 536:keymap_custom.c ****         //                 dprint("tap interrupted\n");
 537:keymap_custom.c ****         //                 register_mods(MOD_BIT(KC_LSHIFT));
 538:keymap_custom.c ****         //             }
 539:keymap_custom.c ****         //         } else {
 540:keymap_custom.c ****         //             register_mods(MOD_BIT(KC_LSHIFT));
 541:keymap_custom.c ****         //         }
 542:keymap_custom.c ****         //     } else {
 543:keymap_custom.c ****         //         if (record->tap.count > 0 && !(record->tap.interrupted)) {
 544:keymap_custom.c ****         //             add_weak_mods(MOD_BIT(KC_LSHIFT));
 545:keymap_custom.c ****         //             send_keyboard_report();
 546:keymap_custom.c ****         //             register_code(KC_9);
 547:keymap_custom.c ****         //             unregister_code(KC_9);
 548:keymap_custom.c ****         //             del_weak_mods(MOD_BIT(KC_LSHIFT));
 549:keymap_custom.c ****         //             send_keyboard_report();
 550:keymap_custom.c ****         //             record->tap.count = 0;  // ad hoc: cancel tap
 551:keymap_custom.c ****         //         } else {
 552:keymap_custom.c ****         //             unregister_mods(MOD_BIT(KC_LSHIFT));
 553:keymap_custom.c ****         //         }
 554:keymap_custom.c ****         //     }
 555:keymap_custom.c ****         //     break;
 556:keymap_custom.c ****     }
 557:keymap_custom.c **** }
 188               		.loc 1 557 0
 189 005a DF91      		pop r29
 190 005c CF91      		pop r28
 191               	.LVL18:
 347:keymap_custom.c ****                 add_mods(ctrl_mod);
 192               		.loc 1 347 0
 193 005e 0C94 0000 		jmp add_mods
 194               	.LVL19:
 195               	.L31:
 349:keymap_custom.c ****                 del_key(KC_ENT);
 196               		.loc 1 349 0
 197 0062 88E2      		ldi r24,lo8(40)
 198 0064 00C0      		rjmp .L44
 199               	.LVL20:
 200               	.L19:
 359:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 201               		.loc 1 359 0
 202 0066 0E94 0000 		call get_mods
 203               	.LVL21:
 204 006a 8171      		andi r24,lo8(17)
 205 006c 8093 0000 		sts ctrl_mod.2343,r24
 360:keymap_custom.c ****             if(record->event.pressed) {
 206               		.loc 1 360 0
 207 0070 9A81      		ldd r25,Y+2
 208 0072 9923      		tst r25
 209 0074 01F0      		breq .L32
 361:keymap_custom.c ****                 del_mods(ctrl_mod);
 210               		.loc 1 361 0
 211 0076 0E94 0000 		call del_mods
 212               	.LVL22:
 362:keymap_custom.c ****                 add_key(KC_UP);
 213               		.loc 1 362 0
 214 007a 82E5      		ldi r24,lo8(82)
 215 007c 00C0      		rjmp .L43
 216               	.L32:
 366:keymap_custom.c ****                 del_key(KC_UP);
 217               		.loc 1 366 0
 218 007e 82E5      		ldi r24,lo8(82)
 219 0080 00C0      		rjmp .L44
 220               	.LVL23:
 221               	.L20:
 373:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 222               		.loc 1 373 0
 223 0082 0E94 0000 		call get_mods
 224               	.LVL24:
 225 0086 8171      		andi r24,lo8(17)
 226 0088 8093 0000 		sts ctrl_mod.2343,r24
 374:keymap_custom.c ****             if(record->event.pressed) {
 227               		.loc 1 374 0
 228 008c 9A81      		ldd r25,Y+2
 229 008e 9923      		tst r25
 230 0090 01F0      		breq .L33
 375:keymap_custom.c ****                 del_mods(ctrl_mod);
 231               		.loc 1 375 0
 232 0092 0E94 0000 		call del_mods
 233               	.LVL25:
 376:keymap_custom.c ****                 add_key(KC_DOWN);
 234               		.loc 1 376 0
 235 0096 81E5      		ldi r24,lo8(81)
 236 0098 00C0      		rjmp .L43
 237               	.L33:
 380:keymap_custom.c ****                 del_key(KC_DOWN);
 238               		.loc 1 380 0
 239 009a 81E5      		ldi r24,lo8(81)
 240 009c 00C0      		rjmp .L44
 241               	.LVL26:
 242               	.L21:
 387:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 243               		.loc 1 387 0
 244 009e 0E94 0000 		call get_mods
 245               	.LVL27:
 246 00a2 8171      		andi r24,lo8(17)
 247 00a4 8093 0000 		sts ctrl_mod.2343,r24
 388:keymap_custom.c ****             if(record->event.pressed) {
 248               		.loc 1 388 0
 249 00a8 9A81      		ldd r25,Y+2
 250 00aa 9923      		tst r25
 251 00ac 01F4      		brne .+2
 252 00ae 00C0      		rjmp .L42
 389:keymap_custom.c ****                 del_mods(ctrl_mod);
 253               		.loc 1 389 0
 254 00b0 0E94 0000 		call del_mods
 255               	.LVL28:
 390:keymap_custom.c ****                 add_key(KC_LEFT);
 256               		.loc 1 390 0
 257 00b4 80E5      		ldi r24,lo8(80)
 258 00b6 00C0      		rjmp .L43
 259               	.LVL29:
 260               	.L22:
 401:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 261               		.loc 1 401 0
 262 00b8 0E94 0000 		call get_mods
 263               	.LVL30:
 264 00bc 8171      		andi r24,lo8(17)
 265 00be 8093 0000 		sts ctrl_mod.2343,r24
 402:keymap_custom.c ****             if(record->event.pressed) {
 266               		.loc 1 402 0
 267 00c2 9A81      		ldd r25,Y+2
 268 00c4 9923      		tst r25
 269 00c6 01F4      		brne .+2
 270 00c8 00C0      		rjmp .L41
 403:keymap_custom.c ****                 del_mods(ctrl_mod);
 271               		.loc 1 403 0
 272 00ca 0E94 0000 		call del_mods
 273               	.LVL31:
 404:keymap_custom.c ****                 add_key(KC_RIGHT);
 274               		.loc 1 404 0
 275 00ce 8FE4      		ldi r24,lo8(79)
 276 00d0 00C0      		rjmp .L43
 277               	.LVL32:
 278               	.L23:
 418:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 279               		.loc 1 418 0
 280 00d2 0E94 0000 		call get_mods
 281               	.LVL33:
 282 00d6 8171      		andi r24,lo8(17)
 283 00d8 8093 0000 		sts ctrl_mod.2343,r24
 419:keymap_custom.c ****             if(record->event.pressed) {
 284               		.loc 1 419 0
 285 00dc 9A81      		ldd r25,Y+2
 286 00de 9923      		tst r25
 287 00e0 01F0      		breq .L37
 420:keymap_custom.c ****                 del_mods(ctrl_mod);
 288               		.loc 1 420 0
 289 00e2 0E94 0000 		call del_mods
 290               	.LVL34:
 421:keymap_custom.c ****                 add_key(KC_BSPC);
 291               		.loc 1 421 0
 292 00e6 8AE2      		ldi r24,lo8(42)
 293 00e8 00C0      		rjmp .L43
 294               	.LVL35:
 295               	.L24:
 432:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 296               		.loc 1 432 0
 297 00ea 0E94 0000 		call get_mods
 298               	.LVL36:
 299 00ee 8171      		andi r24,lo8(17)
 300 00f0 8093 0000 		sts ctrl_mod.2343,r24
 433:keymap_custom.c ****             if(record->event.pressed) {
 301               		.loc 1 433 0
 302 00f4 9A81      		ldd r25,Y+2
 303 00f6 9923      		tst r25
 304 00f8 01F0      		breq .L37
 434:keymap_custom.c ****                 del_mods(ctrl_mod);
 305               		.loc 1 434 0
 306 00fa 0E94 0000 		call del_mods
 307               	.LVL37:
 435:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 308               		.loc 1 435 0
 309 00fe 84E0      		ldi r24,lo8(4)
 310 0100 0E94 0000 		call add_weak_mods
 311               	.LVL38:
 436:keymap_custom.c ****                 add_key(KC_BSPC);
 312               		.loc 1 436 0
 313 0104 8AE2      		ldi r24,lo8(42)
 314 0106 00C0      		rjmp .L48
 315               	.L37:
 441:keymap_custom.c ****                 del_key(KC_BSPC);
 316               		.loc 1 441 0
 317 0108 8AE2      		ldi r24,lo8(42)
 318 010a 00C0      		rjmp .L44
 319               	.LVL39:
 320               	.L25:
 448:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 321               		.loc 1 448 0
 322 010c 0E94 0000 		call get_mods
 323               	.LVL40:
 324 0110 8171      		andi r24,lo8(17)
 325 0112 8093 0000 		sts ctrl_mod.2343,r24
 449:keymap_custom.c ****             if(record->event.pressed) {
 326               		.loc 1 449 0
 327 0116 9A81      		ldd r25,Y+2
 328 0118 9923      		tst r25
 329 011a 01F0      		breq .L38
 450:keymap_custom.c ****                 del_mods(ctrl_mod);
 330               		.loc 1 450 0
 331 011c 0E94 0000 		call del_mods
 332               	.LVL41:
 451:keymap_custom.c ****                 add_key(KC_DEL);
 333               		.loc 1 451 0
 334 0120 8CE4      		ldi r24,lo8(76)
 335 0122 00C0      		rjmp .L43
 336               	.L38:
 455:keymap_custom.c ****                 del_key(KC_DEL);
 337               		.loc 1 455 0
 338 0124 8CE4      		ldi r24,lo8(76)
 339 0126 00C0      		rjmp .L44
 340               	.LVL42:
 341               	.L26:
 466:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 342               		.loc 1 466 0
 343 0128 0E94 0000 		call get_mods
 344               	.LVL43:
 345 012c 8171      		andi r24,lo8(17)
 346 012e 8093 0000 		sts ctrl_mod.2343,r24
 467:keymap_custom.c ****             if(record->event.pressed) {
 347               		.loc 1 467 0
 348 0132 9A81      		ldd r25,Y+2
 349 0134 9923      		tst r25
 350 0136 01F0      		breq .L41
 468:keymap_custom.c ****                 del_mods(ctrl_mod);
 351               		.loc 1 468 0
 352 0138 0E94 0000 		call del_mods
 353               	.LVL44:
 469:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 354               		.loc 1 469 0
 355 013c 84E0      		ldi r24,lo8(4)
 356 013e 0E94 0000 		call add_weak_mods
 357               	.LVL45:
 470:keymap_custom.c ****                 add_key(KC_RIGHT);
 358               		.loc 1 470 0
 359 0142 8FE4      		ldi r24,lo8(79)
 360               	.L48:
 361 0144 0E94 0000 		call add_key
 362               	.LVL46:
 471:keymap_custom.c ****                 send_keyboard_report();
 363               		.loc 1 471 0
 364 0148 0E94 0000 		call send_keyboard_report
 365               	.LVL47:
 472:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LALT));
 366               		.loc 1 472 0
 367 014c 84E0      		ldi r24,lo8(4)
 368 014e 00C0      		rjmp .L47
 369               	.LVL48:
 370               	.L27:
 482:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 371               		.loc 1 482 0
 372 0150 0E94 0000 		call get_mods
 373               	.LVL49:
 374 0154 8171      		andi r24,lo8(17)
 375 0156 8093 0000 		sts ctrl_mod.2343,r24
 483:keymap_custom.c ****             if(record->event.pressed) {
 376               		.loc 1 483 0
 377 015a 9A81      		ldd r25,Y+2
 378 015c 9923      		tst r25
 379 015e 01F0      		breq .L42
 484:keymap_custom.c ****                 del_mods(ctrl_mod);
 380               		.loc 1 484 0
 381 0160 0E94 0000 		call del_mods
 382               	.LVL50:
 485:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 383               		.loc 1 485 0
 384 0164 84E0      		ldi r24,lo8(4)
 385 0166 0E94 0000 		call add_weak_mods
 386               	.LVL51:
 486:keymap_custom.c ****                 add_key(KC_LEFT);
 387               		.loc 1 486 0
 388 016a 80E5      		ldi r24,lo8(80)
 389 016c 00C0      		rjmp .L48
 390               	.LVL52:
 391               	.L28:
 498:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 392               		.loc 1 498 0
 393 016e 0E94 0000 		call get_mods
 394               	.LVL53:
 395 0172 8171      		andi r24,lo8(17)
 396 0174 8093 0000 		sts ctrl_mod.2343,r24
 499:keymap_custom.c ****             if(record->event.pressed) {
 397               		.loc 1 499 0
 398 0178 9A81      		ldd r25,Y+2
 399 017a 9923      		tst r25
 400 017c 01F0      		breq .L41
 500:keymap_custom.c ****                 del_mods(ctrl_mod);
 401               		.loc 1 500 0
 402 017e 0E94 0000 		call del_mods
 403               	.LVL54:
 501:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LGUI));
 404               		.loc 1 501 0
 405 0182 88E0      		ldi r24,lo8(8)
 406 0184 0E94 0000 		call add_weak_mods
 407               	.LVL55:
 502:keymap_custom.c ****                 add_key(KC_RIGHT);
 408               		.loc 1 502 0
 409 0188 8FE4      		ldi r24,lo8(79)
 410 018a 00C0      		rjmp .L46
 411               	.L41:
 507:keymap_custom.c ****                 del_key(KC_RIGHT);
 412               		.loc 1 507 0
 413 018c 8FE4      		ldi r24,lo8(79)
 414 018e 00C0      		rjmp .L44
 415               	.LVL56:
 416               	.L29:
 514:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 417               		.loc 1 514 0
 418 0190 0E94 0000 		call get_mods
 419               	.LVL57:
 420 0194 8171      		andi r24,lo8(17)
 421 0196 8093 0000 		sts ctrl_mod.2343,r24
 515:keymap_custom.c ****             if(record->event.pressed) {
 422               		.loc 1 515 0
 423 019a 9A81      		ldd r25,Y+2
 424 019c 9923      		tst r25
 425 019e 01F0      		breq .L42
 516:keymap_custom.c ****                 del_mods(ctrl_mod);
 426               		.loc 1 516 0
 427 01a0 0E94 0000 		call del_mods
 428               	.LVL58:
 517:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LGUI));
 429               		.loc 1 517 0
 430 01a4 88E0      		ldi r24,lo8(8)
 431 01a6 0E94 0000 		call add_weak_mods
 432               	.LVL59:
 518:keymap_custom.c ****                 add_key(KC_LEFT);
 433               		.loc 1 518 0
 434 01aa 80E5      		ldi r24,lo8(80)
 435               	.L46:
 436 01ac 0E94 0000 		call add_key
 437               	.LVL60:
 519:keymap_custom.c ****                 send_keyboard_report();
 438               		.loc 1 519 0
 439 01b0 0E94 0000 		call send_keyboard_report
 440               	.LVL61:
 520:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LGUI));
 441               		.loc 1 520 0
 442 01b4 88E0      		ldi r24,lo8(8)
 443               	.L47:
 444 01b6 0E94 0000 		call del_weak_mods
 445               	.LVL62:
 446 01ba 00C0      		rjmp .L45
 447               	.L42:
 523:keymap_custom.c ****                 del_key(KC_LEFT);
 448               		.loc 1 523 0
 449 01bc 80E5      		ldi r24,lo8(80)
 450               	.L44:
 451 01be 0E94 0000 		call del_key
 452               	.LVL63:
 524:keymap_custom.c ****                 register_mods(ctrl_mod);
 453               		.loc 1 524 0
 454 01c2 8091 0000 		lds r24,ctrl_mod.2343
 455 01c6 0E94 0000 		call register_mods
 456               	.LVL64:
 457               	/* epilogue start */
 458               		.loc 1 557 0
 459 01ca DF91      		pop r29
 460 01cc CF91      		pop r28
 461               	.LVL65:
 525:keymap_custom.c ****                 send_keyboard_report();
 462               		.loc 1 525 0
 463 01ce 0C94 0000 		jmp send_keyboard_report
 464               	.LVL66:
 465               	.L14:
 466               	/* epilogue start */
 467               		.loc 1 557 0
 468 01d2 DF91      		pop r29
 469 01d4 CF91      		pop r28
 470 01d6 0895      		ret
 471               		.cfi_endproc
 472               	.LFE5:
 474               		.section	.bss.ctrl_mod.2343,"aw",@nobits
 477               	ctrl_mod.2343:
 478 0000 00        		.zero	1
 479               		.section	.progmem.data.__m.2335,"a",@progbits
 482               	__m.2335:
 483 0000 02        		.byte	2
 484 0001 35        		.byte	53
 485 0002 00        		.byte	0
 486               		.section	.progmem.data.__m.2333,"a",@progbits
 489               	__m.2333:
 490 0000 01        		.byte	1
 491 0001 E3        		.byte	-29
 492 0002 01        		.byte	1
 493 0003 35        		.byte	53
 494 0004 00        		.byte	0
 495               		.section	.progmem.data.__m.2330,"a",@progbits
 498               	__m.2330:
 499 0000 02        		.byte	2
 500 0001 2B        		.byte	43
 501 0002 00        		.byte	0
 502               		.section	.progmem.data.__m.2328,"a",@progbits
 505               	__m.2328:
 506 0000 01        		.byte	1
 507 0001 E2        		.byte	-30
 508 0002 01        		.byte	1
 509 0003 2B        		.byte	43
 510 0004 00        		.byte	0
 511               		.section	.progmem.data.__m.2325,"a",@progbits
 514               	__m.2325:
 515 0000 01        		.byte	1
 516 0001 A9        		.byte	-87
 517 0002 02        		.byte	2
 518 0003 A9        		.byte	-87
 519 0004 00        		.byte	0
 520               		.section	.progmem.data.__m.2322,"a",@progbits
 523               	__m.2322:
 524 0000 75        		.byte	117
 525 0001 00        		.byte	0
 526 0002 01        		.byte	1
 527 0003 0B        		.byte	11
 528 0004 02        		.byte	2
 529 0005 0B        		.byte	11
 530 0006 01        		.byte	1
 531 0007 08        		.byte	8
 532 0008 02        		.byte	2
 533 0009 08        		.byte	8
 534 000a 01        		.byte	1
 535 000b 0F        		.byte	15
 536 000c 02        		.byte	2
 537 000d 0F        		.byte	15
 538 000e 01        		.byte	1
 539 000f 0F        		.byte	15
 540 0010 02        		.byte	2
 541 0011 0F        		.byte	15
 542 0012 74        		.byte	116
 543 0013 FF        		.byte	-1
 544 0014 01        		.byte	1
 545 0015 12        		.byte	18
 546 0016 02        		.byte	2
 547 0017 12        		.byte	18
 548 0018 00        		.byte	0
 549               	.global	fn_actions
 550               		.section	.progmem.data.fn_actions,"a",@progbits
 553               	fn_actions:
 554 0000 018C      		.word	-29695
 555 0002 C8A1      		.word	-24120
 556 0004 C1A2      		.word	-23871
 557 0006 0000 0000 		.zero	6
 557      0000 
 558 000c F1A6      		.word	-22799
 559 000e 0000      		.zero	2
 560 0010 01F0      		.word	-4095
 561 0012 00F0      		.word	-4096
 562 0014 04F0      		.word	-4092
 563 0016 03F0      		.word	-4093
 564 0018 02F0      		.word	-4094
 565 001a 05F0      		.word	-4091
 566 001c 06F0      		.word	-4090
 567 001e 07F0      		.word	-4089
 568 0020 08F0      		.word	-4088
 569 0022 09F0      		.word	-4087
 570 0024 0AF0      		.word	-4086
 571 0026 0BF0      		.word	-4085
 572 0028 0CF0      		.word	-4084
 573               	.global	keymaps
 574               		.section	.progmem.data.keymaps,"a",@progbits
 577               	keymaps:
 578 0000 1F        		.byte	31
 579 0001 14        		.byte	20
 580 0002 1A        		.byte	26
 581 0003 16        		.byte	22
 582 0004 04        		.byte	4
 583 0005 1D        		.byte	29
 584 0006 1B        		.byte	27
 585 0007 06        		.byte	6
 586 0008 20        		.byte	32
 587 0009 21        		.byte	33
 588 000a 15        		.byte	21
 589 000b 08        		.byte	8
 590 000c 07        		.byte	7
 591 000d 09        		.byte	9
 592 000e 19        		.byte	25
 593 000f 05        		.byte	5
 594 0010 22        		.byte	34
 595 0011 23        		.byte	35
 596 0012 1C        		.byte	28
 597 0013 17        		.byte	23
 598 0014 0A        		.byte	10
 599 0015 0B        		.byte	11
 600 0016 11        		.byte	17
 601 0017 00        		.byte	0
 602 0018 1E        		.byte	30
 603 0019 29        		.byte	41
 604 001a 2B        		.byte	43
 605 001b C2        		.byte	-62
 606 001c E1        		.byte	-31
 607 001d E2        		.byte	-30
 608 001e C1        		.byte	-63
 609 001f 2C        		.byte	44
 610 0020 24        		.byte	36
 611 0021 25        		.byte	37
 612 0022 18        		.byte	24
 613 0023 0C        		.byte	12
 614 0024 0E        		.byte	14
 615 0025 0D        		.byte	13
 616 0026 10        		.byte	16
 617 0027 00        		.byte	0
 618 0028 31        		.byte	49
 619 0029 35        		.byte	53
 620 002a 2A        		.byte	42
 621 002b 28        		.byte	40
 622 002c C6        		.byte	-58
 623 002d E5        		.byte	-27
 624 002e E6        		.byte	-26
 625 002f E7        		.byte	-25
 626 0030 26        		.byte	38
 627 0031 27        		.byte	39
 628 0032 12        		.byte	18
 629 0033 13        		.byte	19
 630 0034 33        		.byte	51
 631 0035 0F        		.byte	15
 632 0036 36        		.byte	54
 633 0037 00        		.byte	0
 634 0038 2D        		.byte	45
 635 0039 2E        		.byte	46
 636 003a 30        		.byte	48
 637 003b 2F        		.byte	47
 638 003c 34        		.byte	52
 639 003d 38        		.byte	56
 640 003e 37        		.byte	55
 641 003f 00        		.byte	0
 642 0040 1F        		.byte	31
 643 0041 14        		.byte	20
 644 0042 1A        		.byte	26
 645 0043 16        		.byte	22
 646 0044 04        		.byte	4
 647 0045 1D        		.byte	29
 648 0046 1B        		.byte	27
 649 0047 06        		.byte	6
 650 0048 20        		.byte	32
 651 0049 21        		.byte	33
 652 004a 15        		.byte	21
 653 004b 08        		.byte	8
 654 004c 07        		.byte	7
 655 004d 09        		.byte	9
 656 004e 19        		.byte	25
 657 004f 05        		.byte	5
 658 0050 22        		.byte	34
 659 0051 23        		.byte	35
 660 0052 1C        		.byte	28
 661 0053 17        		.byte	23
 662 0054 0A        		.byte	10
 663 0055 0B        		.byte	11
 664 0056 11        		.byte	17
 665 0057 00        		.byte	0
 666 0058 1E        		.byte	30
 667 0059 35        		.byte	53
 668 005a 2B        		.byte	43
 669 005b E0        		.byte	-32
 670 005c E1        		.byte	-31
 671 005d E2        		.byte	-30
 672 005e 01        		.byte	1
 673 005f 2C        		.byte	44
 674 0060 24        		.byte	36
 675 0061 25        		.byte	37
 676 0062 18        		.byte	24
 677 0063 0C        		.byte	12
 678 0064 0E        		.byte	14
 679 0065 0D        		.byte	13
 680 0066 10        		.byte	16
 681 0067 00        		.byte	0
 682 0068 31        		.byte	49
 683 0069 35        		.byte	53
 684 006a 2A        		.byte	42
 685 006b 28        		.byte	40
 686 006c 01        		.byte	1
 687 006d E5        		.byte	-27
 688 006e E6        		.byte	-26
 689 006f E7        		.byte	-25
 690 0070 26        		.byte	38
 691 0071 27        		.byte	39
 692 0072 12        		.byte	18
 693 0073 13        		.byte	19
 694 0074 33        		.byte	51
 695 0075 0F        		.byte	15
 696 0076 36        		.byte	54
 697 0077 00        		.byte	0
 698 0078 2D        		.byte	45
 699 0079 2E        		.byte	46
 700 007a 30        		.byte	48
 701 007b 2F        		.byte	47
 702 007c 34        		.byte	52
 703 007d 38        		.byte	56
 704 007e 37        		.byte	55
 705 007f 00        		.byte	0
 706 0080 01        		.byte	1
 707 0081 01        		.byte	1
 708 0082 01        		.byte	1
 709 0083 01        		.byte	1
 710 0084 01        		.byte	1
 711 0085 01        		.byte	1
 712 0086 01        		.byte	1
 713 0087 01        		.byte	1
 714 0088 01        		.byte	1
 715 0089 D3        		.byte	-45
 716 008a 01        		.byte	1
 717 008b D1        		.byte	-47
 718 008c CF        		.byte	-49
 719 008d CE        		.byte	-50
 720 008e 04        		.byte	4
 721 008f D2        		.byte	-46
 722 0090 01        		.byte	1
 723 0091 D4        		.byte	-44
 724 0092 01        		.byte	1
 725 0093 01        		.byte	1
 726 0094 D0        		.byte	-48
 727 0095 CA        		.byte	-54
 728 0096 01        		.byte	1
 729 0097 00        		.byte	0
 730 0098 01        		.byte	1
 731 0099 29        		.byte	41
 732 009a 2B        		.byte	43
 733 009b 01        		.byte	1
 734 009c E1        		.byte	-31
 735 009d E2        		.byte	-30
 736 009e E3        		.byte	-29
 737 009f C9        		.byte	-55
 738 00a0 01        		.byte	1
 739 00a1 01        		.byte	1
 740 00a2 01        		.byte	1
 741 00a3 57        		.byte	87
 742 00a4 CC        		.byte	-52
 743 00a5 CB        		.byte	-53
 744 00a6 01        		.byte	1
 745 00a7 00        		.byte	0
 746 00a8 49        		.byte	73
 747 00a9 4C        		.byte	76
 748 00aa 2A        		.byte	42
 749 00ab C8        		.byte	-56
 750 00ac 01        		.byte	1
 751 00ad E5        		.byte	-27
 752 00ae E6        		.byte	-26
 753 00af E7        		.byte	-25
 754 00b0 01        		.byte	1
 755 00b1 01        		.byte	1
 756 00b2 01        		.byte	1
 757 00b3 01        		.byte	1
 758 00b4 01        		.byte	1
 759 00b5 CD        		.byte	-51
 760 00b6 01        		.byte	1
 761 00b7 00        		.byte	0
 762 00b8 01        		.byte	1
 763 00b9 01        		.byte	1
 764 00ba 01        		.byte	1
 765 00bb 01        		.byte	1
 766 00bc 01        		.byte	1
 767 00bd 01        		.byte	1
 768 00be 01        		.byte	1
 769 00bf 00        		.byte	0
 770 00c0 0000 0000 		.zero	192
 770      0000 0000 
 770      0000 0000 
 770      0000 0000 
 770      0000 0000 
 771 0180 3B        		.byte	59
 772 0181 00        		.byte	0
 773 0182 AC        		.byte	-84
 774 0183 AA        		.byte	-86
 775 0184 00        		.byte	0
 776 0185 00        		.byte	0
 777 0186 00        		.byte	0
 778 0187 00        		.byte	0
 779 0188 3C        		.byte	60
 780 0189 3D        		.byte	61
 781 018a AB        		.byte	-85
 782 018b B0        		.byte	-80
 783 018c A8        		.byte	-88
 784 018d A9        		.byte	-87
 785 018e 00        		.byte	0
 786 018f 00        		.byte	0
 787 0190 3E        		.byte	62
 788 0191 3F        		.byte	63
 789 0192 00        		.byte	0
 790 0193 00        		.byte	0
 791 0194 00        		.byte	0
 792 0195 55        		.byte	85
 793 0196 57        		.byte	87
 794 0197 00        		.byte	0
 795 0198 3A        		.byte	58
 796 0199 A5        		.byte	-91
 797 019a 39        		.byte	57
 798 019b E0        		.byte	-32
 799 019c E1        		.byte	-31
 800 019d E2        		.byte	-30
 801 019e E3        		.byte	-29
 802 019f 01        		.byte	1
 803 01a0 40        		.byte	64
 804 01a1 41        		.byte	65
 805 01a2 00        		.byte	0
 806 01a3 00        		.byte	0
 807 01a4 4A        		.byte	74
 808 01a5 54        		.byte	84
 809 01a6 56        		.byte	86
 810 01a7 00        		.byte	0
 811 01a8 49        		.byte	73
 812 01a9 4C        		.byte	76
 813 01aa 2A        		.byte	42
 814 01ab 28        		.byte	40
 815 01ac C6        		.byte	-58
 816 01ad E5        		.byte	-27
 817 01ae E6        		.byte	-26
 818 01af E7        		.byte	-25
 819 01b0 42        		.byte	66
 820 01b1 43        		.byte	67
 821 01b2 00        		.byte	0
 822 01b3 00        		.byte	0
 823 01b4 50        		.byte	80
 824 01b5 4B        		.byte	75
 825 01b6 4D        		.byte	77
 826 01b7 00        		.byte	0
 827 01b8 44        		.byte	68
 828 01b9 45        		.byte	69
 829 01ba C4        		.byte	-60
 830 01bb 52        		.byte	82
 831 01bc 4F        		.byte	79
 832 01bd 51        		.byte	81
 833 01be 4E        		.byte	78
 834 01bf 00        		.byte	0
 835               		.text
 836               	.Letext0:
 837               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 838               		.file 3 "./tmk_core/common/keycode.h"
 839               		.file 4 "./tmk_core/common/keyboard.h"
 840               		.file 5 "./tmk_core/common/action_code.h"
 841               		.file 6 "./tmk_core/common/action_macro.h"
 842               		.file 7 "./tmk_core/common/action.h"
 843               		.file 8 "./tmk_core/common/action_util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 keymap_custom.c
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:2      *ABS*:0000003e __SP_H__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:3      *ABS*:0000003d __SP_L__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:4      *ABS*:0000003f __SREG__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:6      *ABS*:00000001 __zero_reg__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:13     .text.action_get_macro:00000000 action_get_macro
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:523    .progmem.data.__m.2322:00000000 __m.2322
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:514    .progmem.data.__m.2325:00000000 __m.2325
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:505    .progmem.data.__m.2328:00000000 __m.2328
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:489    .progmem.data.__m.2333:00000000 __m.2333
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:498    .progmem.data.__m.2330:00000000 __m.2330
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:482    .progmem.data.__m.2335:00000000 __m.2335
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:94     .text.action_function:00000000 action_function
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:477    .bss.ctrl_mod.2343:00000000 ctrl_mod.2343
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:553    .progmem.data.fn_actions:00000000 fn_actions
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccGFfN7h.s:577    .progmem.data.keymaps:00000000 keymaps

UNDEFINED SYMBOLS
__tablejump2__
get_mods
del_mods
add_key
send_keyboard_report
add_mods
add_weak_mods
del_weak_mods
del_key
register_mods
__do_clear_bss
