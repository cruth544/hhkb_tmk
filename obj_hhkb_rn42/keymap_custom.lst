   1               		.file	"keymap_custom.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_get_macro,"ax",@progbits
  11               	.global	action_get_macro
  13               	action_get_macro:
  14               	.LFB4:
  15               		.file 1 "keymap_custom.c"
   1:keymap_custom.c **** /*
   2:keymap_custom.c ****  * Hasu: my personal keymap
   3:keymap_custom.c ****  */
   4:keymap_custom.c **** #include "keymap_common.h"
   5:keymap_custom.c **** 
   6:keymap_custom.c **** 
   7:keymap_custom.c **** #ifdef KEYMAP_SECTION_ENABLE
   8:keymap_custom.c **** const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS] __attribute__ ((section (".keymap.keymaps"))) = {
   9:keymap_custom.c **** #else
  10:keymap_custom.c **** const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS] PROGMEM = {
  11:keymap_custom.c **** #endif
  12:keymap_custom.c ****     /* Layer 0: Fn0 Default Layer
  13:keymap_custom.c ****      * ,-----------------------------------------------------------.
  14:keymap_custom.c ****      * |Esc|  1|  2|  3|  4|  5|  6|  7|  8|  9|  0|  -|  =|  \|  `|
  15:keymap_custom.c ****      * |-----------------------------------------------------------|
  16:keymap_custom.c ****      * |Tab  |  Q|  W|  E|  R|  T|  Y|  U|  I|  O|  P|  [|  ]|Backs|
  17:keymap_custom.c ****      * |-----------------------------------------------------------|
  18:keymap_custom.c ****      * |Fn3   |  A|  S|  D|  F|  G|  H|  J|  K|  L|  ;|  '|Enter   |
  19:keymap_custom.c ****      * |-----------------------------------------------------------|
  20:keymap_custom.c ****      * |Shift   |  Z|  X|  C|  V|  B|  N|  M|  ,|  .|  /|Shift |Fn1|
  21:keymap_custom.c ****      * `-----------------------------------------------------------'
  22:keymap_custom.c ****      *       |Alt|Gui  |         Space         |Gui  |Alt|
  23:keymap_custom.c ****      *       `-------------------------------------------'
  24:keymap_custom.c ****      */
  25:keymap_custom.c ****     [0] = \
  26:keymap_custom.c ****     KEYMAP(ESC, 1,   2,   3,   4,   5,   6,   7,   8,   9,   0,   MINS,EQL, BSLS,GRV, \
  27:keymap_custom.c ****            TAB ,   Q,   W,   E,   R,   T,   Y,   U,   I,   O,   P,   LBRC,RBRC,BSPC, \
  28:keymap_custom.c ****            FN2  ,   A,   S,   D,   F,   G,   H,   J,   K,   L, SCLN, QUOT,ENT, \
  29:keymap_custom.c ****            LSFT  ,   Z,   X,   C,   V,   B,   N,   M, COMM, DOT, SLSH, RSFT,FN6, \
  30:keymap_custom.c ****                 LALT, FN1,           SPC           , RGUI, RALT),
  31:keymap_custom.c **** 
  32:keymap_custom.c ****     /* Layer 2: Fn2 Vi mode
  33:keymap_custom.c ****      * ,-----------------------------------------------------------.
  34:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  35:keymap_custom.c ****      * |-----------------------------------------------------------|
  36:keymap_custom.c ****      * |Tab  |   |   |   |   |   |   |   |   |   |   |   |    Backs|
  37:keymap_custom.c ****      * |-----------------------------------------------------------|
  38:keymap_custom.c ****      * |Fn3   |   |   |  |BSPC|   |Lef|Dow|Up |Rig|   |   |Return  |
  39:keymap_custom.c ****      * |-----------------------------------------------------------|
  40:keymap_custom.c ****      * |Shift   |   |   |   |   |   |   |   |   |   |   Shift |    |
  41:keymap_custom.c ****      * `-----------------------------------------------------------'
  42:keymap_custom.c ****      *       |Alt|Gui  |          Space        |Gui  |Alt|
  43:keymap_custom.c ****      *       `-------------------------------------------`
  44:keymap_custom.c ****      */
  45:keymap_custom.c ****     [1] = \
  46:keymap_custom.c ****     KEYMAP(GRV, 1,   2,   3,   4,   5,   6,   7,   8,   9,   0, MINS, EQL, BSLS, GRV, \
  47:keymap_custom.c ****            TAB ,   Q,   W,   E,   R,   T,   Y,   U,   I,   O,  P, LBRC, RBRC, BSPC, \
  48:keymap_custom.c ****            LCTL ,   A,   S,   D,   F,   G,   H,    J,   K ,  L, SCLN, QUOT, ENT, \
  49:keymap_custom.c ****            LSFT  ,   Z,   X,   C,   V,   B,   N,   M, COMM, DOT, SLSH, RSFT,TRNS, \
  50:keymap_custom.c ****                 LALT, TRNS,           SPC           , RGUI, RALT),
  51:keymap_custom.c **** 
  52:keymap_custom.c ****     /* Layer 3: Fn3 Vi mode[Slash]
  53:keymap_custom.c ****      * ,-----------------------------------------------------------.
  54:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  55:keymap_custom.c ****      * |-----------------------------------------------------------|
  56:keymap_custom.c ****      * |Tab  |   |   |   |   |   |   |   |   |   |   |   |    Backs|
  57:keymap_custom.c ****      * |-----------------------------------------------------------|
  58:keymap_custom.c ****      * |Fn2   |   |   |  |BSPC|   |Lef|Dow|Up |Rig|   |   |Return  |
  59:keymap_custom.c ****      * |-----------------------------------------------------------|
  60:keymap_custom.c ****      * |Shift   |   |   |   |   |   |   |   |   |   |   Shift |    |
  61:keymap_custom.c ****      * `-----------------------------------------------------------'
  62:keymap_custom.c ****      *       |Alt|Gui  |          Space        |Gui  |Alt|
  63:keymap_custom.c ****      *       `-------------------------------------------`
  64:keymap_custom.c ****      */
  65:keymap_custom.c ****     [2] = \
  66:keymap_custom.c ****     KEYMAP(ESC, TRNS, TRNS, TRNS, FN19, TRNS, FN20, TRNS, TRNS, TRNS, TRNS, TRNS, TRNS, INS, DEL, \
  67:keymap_custom.c ****            TAB , TRNS, TRNS, FN17, TRNS, TRNS, TRNS, TRNS, PPLS, TRNS, TRNS, TRNS, TRNS, BSPC, \
  68:keymap_custom.c ****            TRNS  , TRNS, TRNS, FN15, FN14, FN16, FN10, FN11,  FN12,  FN13, TRNS, TRNS, ENT, \
  69:keymap_custom.c ****            LSFT   , TRNS, TRNS, TRNS,   A , FN18, TRNS, TRNS, TRNS, TRNS, TRNS, RSFT, TRNS, \
  70:keymap_custom.c ****                 LALT, LGUI,    /*SPC*/ FN9 /*SPC*/    , RGUI, RALT),
  71:keymap_custom.c **** 
  72:keymap_custom.c **** 
  73:keymap_custom.c **** 
  74:keymap_custom.c ****     /* Layer 1: Fn1 HHKB mode[HHKB Fn]
  75:keymap_custom.c ****      * ,-----------------------------------------------------------.
  76:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  77:keymap_custom.c ****      * |-----------------------------------------------------------|
  78:keymap_custom.c ****      * |Caps |   |   |   |   |   |   |   |Psc|Slk|Pus|Up |   |Backs|
  79:keymap_custom.c ****      * |-----------------------------------------------------------|
  80:keymap_custom.c ****      * |Contro|VoD|VoU|Mut|   |   |  *|  /|Hom|PgU|Lef|Rig|Enter   |
  81:keymap_custom.c ****      * |-----------------------------------------------------------|
  82:keymap_custom.c ****      * |Shift   |   |   |   |   |   |  +|  -|End|PgD|Dow|Shift |   |
  83:keymap_custom.c ****      * `-----------------------------------------------------------'
  84:keymap_custom.c ****      *       |Alt|Gui  |         Space         |Gui  |Alt|
  85:keymap_custom.c ****      *       `-------------------------------------------'
  86:keymap_custom.c ****      */
  87:keymap_custom.c ****     [6] = \
  88:keymap_custom.c ****     KEYMAP(PWR, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
  89:keymap_custom.c ****            CAPS,  NO, MPRV, MPLY, MNXT,  NO,  NO,  NO,  NO, NO, NO, UP,  FN4,  BSPC, \
  90:keymap_custom.c ****            LCTL, VOLD,VOLU,MUTE,  NO,  NO, PAST, PSLS,HOME, PGUP, LEFT, RGHT, ENT, \
  91:keymap_custom.c ****             LSFT,  NO,  NO,  NO,  NO,  NO, PPLS, PMNS, END, PGDN, DOWN, RSFT, FN6, \
  92:keymap_custom.c ****                 LALT, LGUI,          TRNS,             RGUI, RALT),
  93:keymap_custom.c **** 
  94:keymap_custom.c **** #if 0
  95:keymap_custom.c ****     /* Layer 3: Fn3 Mouse mode(IJKL)[Semicolon]
  96:keymap_custom.c ****      * ,-----------------------------------------------------------.
  97:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  98:keymap_custom.c ****      * |-----------------------------------------------------------|
  99:keymap_custom.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|McU|MwU|MwR|Wbk|Wfr|Alt-T|
 100:keymap_custom.c ****      * |-----------------------------------------------------------|
 101:keymap_custom.c ****      * |Contro|   |   |   |   |   |Mb2|McL|McD|McR|Fn |   |Return  |
 102:keymap_custom.c ****      * |-----------------------------------------------------------|
 103:keymap_custom.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 104:keymap_custom.c ****      * `-----------------------------------------------------------'
 105:keymap_custom.c ****      *      |Alt |Gui  |          Mb1          |Fn   |Fn |
 106:keymap_custom.c ****      *      `--------------------------------------------'
 107:keymap_custom.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
 108:keymap_custom.c ****      */
 109:keymap_custom.c ****     [3] = \
 110:keymap_custom.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 111:keymap_custom.c ****            FN8, NO,  NO,  NO,  NO,  NO,  WH_L,WH_D,MS_U,WH_U,WH_R,FN9, FN10,FN8, \
 112:keymap_custom.c ****            LCTL,ACL0,ACL1,ACL2,ACL2,NO,  NO,  MS_L,MS_D,MS_R,FN3, NO,  ENT, \
 113:keymap_custom.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,NO,  RSFT,TRNS, \
 114:keymap_custom.c ****                 LALT,LGUI,          BTN1,               TRNS,TRNS),
 115:keymap_custom.c **** 
 116:keymap_custom.c ****     /* Layer 4: Fn4 Mouse mode(IJKL)[Space]
 117:keymap_custom.c ****      * ,-----------------------------------------------------------.
 118:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
 119:keymap_custom.c ****      * |-----------------------------------------------------------|
 120:keymap_custom.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|McU|MwU|MwR|Wbk|Wfr|Alt-T|
 121:keymap_custom.c ****      * |-----------------------------------------------------------|
 122:keymap_custom.c ****      * |Contro|   |   |   |   |   |Mb2|McL|McD|McR|Mb1|   |Return  |
 123:keymap_custom.c ****      * |-----------------------------------------------------------|
 124:keymap_custom.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 125:keymap_custom.c ****      * `-----------------------------------------------------------'
 126:keymap_custom.c ****      *      |Alt |Gui  |          Mb1          |Fn   |Fn |
 127:keymap_custom.c ****      *      `--------------------------------------------'
 128:keymap_custom.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
 129:keymap_custom.c ****      */
 130:keymap_custom.c ****     [4] = \
 131:keymap_custom.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 132:keymap_custom.c ****            FN8, NO,  NO,  NO,  NO,  NO,  WH_L,WH_D,MS_U,WH_U,WH_R,BTN4,BTN5,FN8, \
 133:keymap_custom.c ****            LCTL,VOLD,VOLU,MUTE,NO,  NO,  NO,  MS_L,MS_D,MS_R,BTN1,NO,  ENT, \
 134:keymap_custom.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,NO,  RSFT,TRNS, \
 135:keymap_custom.c ****                 LALT,LGUI,          TRNS,               TRNS,TRNS),
 136:keymap_custom.c **** #endif
 137:keymap_custom.c **** #if 0
 138:keymap_custom.c ****     /* Layer 3: Mouse mode(HJKL)[Semicolon]
 139:keymap_custom.c ****      * ,-----------------------------------------------------------.
 140:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
 141:keymap_custom.c ****      * |-----------------------------------------------------------|
 142:keymap_custom.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|MwU|MwR|   |   |   |Backs|
 143:keymap_custom.c ****      * |-----------------------------------------------------------|
 144:keymap_custom.c ****      * |Contro|   |   |   |   |   |McL|McD|McU|McR|Fn0|   |Return  |
 145:keymap_custom.c ****      * |-----------------------------------------------------------|
 146:keymap_custom.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 147:keymap_custom.c ****      * `-----------------------------------------------------------'
 148:keymap_custom.c ****      *      |Alt |Gui  |          Mb1          |Gui  |Fn0|
 149:keymap_custom.c ****      *      `--------------------------------------------'
 150:keymap_custom.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
 151:keymap_custom.c ****      */
 152:keymap_custom.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 153:keymap_custom.c ****            TAB, NO,  NO,  NO,  NO,  NO,  NO,  WH_D,WH_U,RGHT,NO,  NO,  NO,  BSPC, \
 154:keymap_custom.c ****            LCTL,NO,  ACL0,ACL1,ACL2,NO,  MS_L,MS_D,MS_U,MS_R,TRNS,QUOT,ENT, \
 155:keymap_custom.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,SLSH,RSFT,NO, \
 156:keymap_custom.c ****                 LALT,LGUI,          BTN1,               RGUI,TRNS),
 157:keymap_custom.c **** 
 158:keymap_custom.c ****     /* Layer4: Mouse mode(HJKL)[Space]
 159:keymap_custom.c ****      * ,-----------------------------------------------------------.
 160:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
 161:keymap_custom.c ****      * |-----------------------------------------------------------|
 162:keymap_custom.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|MwU|MwR|   |Wbk|Wfr|Alt-T|
 163:keymap_custom.c ****      * |-----------------------------------------------------------|
 164:keymap_custom.c ****      * |Contro|   |   |   |   |   |McL|McD|McU|McR|Fn0|   |Return  |
 165:keymap_custom.c ****      * |-----------------------------------------------------------|
 166:keymap_custom.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 167:keymap_custom.c ****      * `-----------------------------------------------------------'
 168:keymap_custom.c ****      *      |Alt |Gui  |          Fn0          |Gui  |Fn0|
 169:keymap_custom.c ****      *      `--------------------------------------------'
 170:keymap_custom.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
 171:keymap_custom.c ****      */
 172:keymap_custom.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 173:keymap_custom.c ****            FN8, NO,  NO,  NO,  NO,  NO,  NO,  WH_D,WH_U,RGHT,NO,  FN9, FN10,FN8, \
 174:keymap_custom.c ****            LCTL,NO,  ACL0,ACL1,ACL2,NO,  MS_L,MS_D,MS_U,MS_R,BTN1,NO,  ENT, \
 175:keymap_custom.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,NO,  RSFT,NO, \
 176:keymap_custom.c ****                 LALT,LGUI,          TRNS,               RGUI,RALT),
 177:keymap_custom.c **** #endif
 178:keymap_custom.c **** #if 0
 179:keymap_custom.c ****     /* Layer x: Matias half-qwerty keyboard style[Space]
 180:keymap_custom.c ****      * ,-----------------------------------------------------------.
 181:keymap_custom.c ****      * |  -|  0|  9|  8|  7|  6|  5|  4|  3|  2|  1|   |   |   |Esc|
 182:keymap_custom.c ****      * |-----------------------------------------------------------|
 183:keymap_custom.c ****      * |Backs|  P|  O|  I|  U|  Y|  T|  R|  E|  W|  Q|   |   |Tab  |
 184:keymap_custom.c ****      * |-----------------------------------------------------------|
 185:keymap_custom.c ****      * |Contro|  ;|  L|  K|  J|  H|  G|  F|  D|  S|  A|Con|Control |
 186:keymap_custom.c ****      * |-----------------------------------------------------------|
 187:keymap_custom.c ****      * |Shift   |  /|  .|  ,|  M|  N|  B|  V|  C|  X|  Z|Shift |   |
 188:keymap_custom.c ****      * `-----------------------------------------------------------'
 189:keymap_custom.c ****      *      |Alt |Gui  |          Fn0          |Gui  |Alt|
 190:keymap_custom.c ****      *      `--------------------------------------------'
 191:keymap_custom.c ****      */
 192:keymap_custom.c ****     KEYMAP(MINS,0,   9,   8,   7,   6,   5,   4,   3,   2,   1,   NO,  NO,  NO,  ESC, \
 193:keymap_custom.c ****            BSPC,P,   O,   I,   U,   Y,   T,   R,   E,   W,   Q,   NO,  NO,  TAB, \
 194:keymap_custom.c ****            LCTL,SCLN,L,   K,   J,   H,   G,   F,   D,   S,   A,   RCTL,RCTL, \
 195:keymap_custom.c ****            LSFT,SLSH,DOT, COMM,M,   N,   B,   V,   C,   X,   Z,   RSFT,NO, \
 196:keymap_custom.c ****                 LALT,LGUI,          TRNS,               RGUI,RALT),
 197:keymap_custom.c **** #endif
 198:keymap_custom.c **** };
 199:keymap_custom.c **** 
 200:keymap_custom.c **** 
 201:keymap_custom.c **** 
 202:keymap_custom.c **** /* id for user defined functions */
 203:keymap_custom.c **** enum function_id {
 204:keymap_custom.c ****     SPACE,
 205:keymap_custom.c **** 
 206:keymap_custom.c ****     UP,
 207:keymap_custom.c ****     DOWN,
 208:keymap_custom.c ****     LEFT,
 209:keymap_custom.c ****     RIGHT,
 210:keymap_custom.c **** 
 211:keymap_custom.c ****     BCKSPC,
 212:keymap_custom.c ****     DEL_WORD,
 213:keymap_custom.c ****     FWD_DEL,
 214:keymap_custom.c **** 
 215:keymap_custom.c ****     END_WORD,
 216:keymap_custom.c ****     BEGIN_WORD,
 217:keymap_custom.c ****     END_LINE,
 218:keymap_custom.c ****     BEGIN_LINE,
 219:keymap_custom.c ****     // LSHIFT_LPAREN,
 220:keymap_custom.c **** };
 221:keymap_custom.c **** 
 222:keymap_custom.c **** enum macro_id {
 223:keymap_custom.c ****     HELLO,
 224:keymap_custom.c ****     VOLUP,
 225:keymap_custom.c ****     ALT_TAB,
 226:keymap_custom.c ****     ALT_TILDE,
 227:keymap_custom.c **** };
 228:keymap_custom.c **** 
 229:keymap_custom.c **** 
 230:keymap_custom.c **** /*
 231:keymap_custom.c ****  * Fn action definition
 232:keymap_custom.c ****  */
 233:keymap_custom.c **** #ifdef KEYMAP_SECTION_ENABLE
 234:keymap_custom.c **** const action_t fn_actions[] __attribute__ ((section (".keymap.fn_actions"))) = {
 235:keymap_custom.c **** #else
 236:keymap_custom.c **** const action_t fn_actions[] PROGMEM = {
 237:keymap_custom.c **** #endif
 238:keymap_custom.c ****     [0]  = ACTION_DEFAULT_LAYER_SET(0),                // Default layer(not used)
 239:keymap_custom.c ****     [1]  = ACTION_LAYER_MODS(1, MOD_LGUI),             // Cursor layer with Slash* /*KC_SLASH*/
 240:keymap_custom.c ****     [2]  = ACTION_LAYER_MODS(2, MOD_LCTL),             // Cursor layer with Slash* /*KC_SLASH*/
 241:keymap_custom.c ****     // [2]  = ACTION_MODS_TAP_KEY(MOD_LCTL, KC_ESC)
 242:keymap_custom.c ****     // [3] = ACTION_LAYER_MOMENTARY(2),
 243:keymap_custom.c ****     [6]  = ACTION_LAYER_MOMENTARY(6),                 // HHKB layer
 244:keymap_custom.c ****     // [4] = ACTION_MACRO(ALT_TILDE),                    // Macro: CMD + Tilde
 245:keymap_custom.c **** 
 246:keymap_custom.c ****     [9]  = ACTION_FUNCTION(SPACE),
 247:keymap_custom.c ****     [10] = ACTION_FUNCTION(LEFT),
 248:keymap_custom.c ****     [11] = ACTION_FUNCTION(DOWN),
 249:keymap_custom.c ****     [12] = ACTION_FUNCTION(UP),
 250:keymap_custom.c ****     [13] = ACTION_FUNCTION(RIGHT),
 251:keymap_custom.c **** 
 252:keymap_custom.c ****     [14] = ACTION_FUNCTION(BCKSPC),
 253:keymap_custom.c ****     [15] = ACTION_FUNCTION(DEL_WORD),
 254:keymap_custom.c ****     [16] = ACTION_FUNCTION(FWD_DEL),
 255:keymap_custom.c **** 
 256:keymap_custom.c ****     [17] = ACTION_FUNCTION(END_WORD),
 257:keymap_custom.c ****     [18] = ACTION_FUNCTION(BEGIN_WORD),
 258:keymap_custom.c ****     [19] = ACTION_FUNCTION(END_LINE),
 259:keymap_custom.c ****     [20] = ACTION_FUNCTION(BEGIN_LINE)
 260:keymap_custom.c **** 
 261:keymap_custom.c ****     // [3] = ACTION_LAYER_TAP_KEY(3, KC_SCLN),           // Mousekey layer with Semicolon*
 262:keymap_custom.c ****     // [4] = ACTION_LAYER_TAP_KEY(4, KC_SPC),            // Mousekey layer with Space
 263:keymap_custom.c ****    //  [5] = ACTION_LAYER_MOMENTARY(4),                  // Mousekey layer(IJKL)
 264:keymap_custom.c ****    //  [6] = ACTION_MODS_TAP_KEY(MOD_RCTL, KC_ENT),      // RControl with tap Enter
 265:keymap_custom.c ****    //  [7] = ACTION_MODS_ONESHOT(MOD_LSFT),              // Oneshot Shift
 266:keymap_custom.c ****    //  [8] = ACTION_MACRO(ALT_TAB),                      // Application switching
 267:keymap_custom.c ****    //  [9] = ACTION_MODS_KEY(MOD_LALT, KC_LEFT),
 268:keymap_custom.c ****    // [10] = ACTION_MODS_KEY(MOD_LALT, KC_RIGHT),
 269:keymap_custom.c **** 
 270:keymap_custom.c **** //  [x] = ACTION_LMOD_TAP_KEY(KC_LCTL, KC_BSPC),        // LControl with tap Backspace
 271:keymap_custom.c **** //  [x] = ACTION_LMOD_TAP_KEY(KC_LCTL, KC_ESC),         // LControl with tap Esc
 272:keymap_custom.c **** //  [x] = ACTION_FUNCTION_TAP(LSHIFT_LPAREN),           // Function: LShift with tap '('
 273:keymap_custom.c ****  // [x] = ACTION_MACRO(HELLO),                          // Macro: say hello
 274:keymap_custom.c **** //  [x] = ACTION_MACRO(VOLUP),                          // Macro: media key
 275:keymap_custom.c **** };
 276:keymap_custom.c **** 
 277:keymap_custom.c **** 
 278:keymap_custom.c **** /*
 279:keymap_custom.c ****  * Macro definition
 280:keymap_custom.c ****  */
 281:keymap_custom.c **** const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
 282:keymap_custom.c **** {
  16               		.loc 1 282 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 FC01      		movw r30,r24
 283:keymap_custom.c ****     switch (id) {
  24               		.loc 1 283 0
  25 0002 6130      		cpi r22,lo8(1)
  26 0004 01F0      		breq .L3
  27 0006 00F0      		brlo .L4
  28 0008 6230      		cpi r22,lo8(2)
  29 000a 01F0      		breq .L5
  30 000c 6330      		cpi r22,lo8(3)
  31 000e 01F0      		breq .L6
  32 0010 00C0      		rjmp .L9
  33               	.L4:
 284:keymap_custom.c ****         case HELLO:
 285:keymap_custom.c ****             return (record->event.pressed ?
 286:keymap_custom.c ****                     MACRO( I(0), T(H), T(E), T(L), T(L), W(255), T(O), END ) :
  34               		.loc 1 286 0
  35 0012 8281      		ldd r24,Z+2
  36               	.LVL1:
  37 0014 8823      		tst r24
  38 0016 01F0      		breq .L9
  39 0018 80E0      		ldi r24,lo8(__m.2321)
  40 001a 90E0      		ldi r25,hi8(__m.2321)
  41 001c 0895      		ret
  42               	.LVL2:
  43               	.L3:
 287:keymap_custom.c ****                     MACRO_NONE );
 288:keymap_custom.c ****         case VOLUP:
 289:keymap_custom.c ****             return (record->event.pressed ?
 290:keymap_custom.c ****                     MACRO( D(VOLU), U(VOLU), END ) :
  44               		.loc 1 290 0
  45 001e 8281      		ldd r24,Z+2
  46               	.LVL3:
  47 0020 8823      		tst r24
  48 0022 01F0      		breq .L9
  49 0024 80E0      		ldi r24,lo8(__m.2324)
  50 0026 90E0      		ldi r25,hi8(__m.2324)
  51 0028 0895      		ret
  52               	.LVL4:
  53               	.L5:
 291:keymap_custom.c ****                     MACRO_NONE );
 292:keymap_custom.c ****         case ALT_TAB:
 293:keymap_custom.c ****             return (record->event.pressed ?
 294:keymap_custom.c ****                     MACRO( D(LALT), D(TAB), END ) :
  54               		.loc 1 294 0
  55 002a 8281      		ldd r24,Z+2
  56               	.LVL5:
  57 002c 8823      		tst r24
  58 002e 01F0      		breq .L10
  59 0030 80E0      		ldi r24,lo8(__m.2327)
  60 0032 90E0      		ldi r25,hi8(__m.2327)
  61 0034 0895      		ret
  62               	.LVL6:
  63               	.L6:
 295:keymap_custom.c ****                     MACRO( U(TAB), END ));
 296:keymap_custom.c ****         case ALT_TILDE:
 297:keymap_custom.c ****             return (record->event.pressed ?
 298:keymap_custom.c ****                     MACRO( D(LGUI), D(GRV), END ) :
  64               		.loc 1 298 0
  65 0036 8281      		ldd r24,Z+2
  66               	.LVL7:
  67 0038 8823      		tst r24
  68 003a 01F0      		breq .L11
  69 003c 80E0      		ldi r24,lo8(__m.2332)
  70 003e 90E0      		ldi r25,hi8(__m.2332)
  71 0040 0895      		ret
  72               	.L9:
 286:keymap_custom.c ****                     MACRO( I(0), T(H), T(E), T(L), T(L), W(255), T(O), END ) :
  73               		.loc 1 286 0
  74 0042 80E0      		ldi r24,0
  75 0044 90E0      		ldi r25,0
  76 0046 0895      		ret
  77               	.L10:
 294:keymap_custom.c ****                     MACRO( D(LALT), D(TAB), END ) :
  78               		.loc 1 294 0
  79 0048 80E0      		ldi r24,lo8(__m.2329)
  80 004a 90E0      		ldi r25,hi8(__m.2329)
  81 004c 0895      		ret
  82               	.L11:
  83               		.loc 1 298 0
  84 004e 80E0      		ldi r24,lo8(__m.2334)
  85 0050 90E0      		ldi r25,hi8(__m.2334)
 299:keymap_custom.c ****                     MACRO( U(GRV), END ));
 300:keymap_custom.c ****     }
 301:keymap_custom.c ****     return MACRO_NONE;
 302:keymap_custom.c **** }
  86               		.loc 1 302 0
  87 0052 0895      		ret
  88               		.cfi_endproc
  89               	.LFE4:
  91               		.section	.text.action_function,"ax",@progbits
  92               	.global	action_function
  94               	action_function:
  95               	.LFB5:
 303:keymap_custom.c **** 
 304:keymap_custom.c **** 
 305:keymap_custom.c **** 
 306:keymap_custom.c **** /*
 307:keymap_custom.c ****  * user defined action function
 308:keymap_custom.c ****  */
 309:keymap_custom.c **** void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
 310:keymap_custom.c **** {
  96               		.loc 1 310 0
  97               		.cfi_startproc
  98               	.LVL8:
  99 0000 CF93      		push r28
 100               	.LCFI0:
 101               		.cfi_def_cfa_offset 3
 102               		.cfi_offset 28, -2
 103 0002 DF93      		push r29
 104               	.LCFI1:
 105               		.cfi_def_cfa_offset 4
 106               		.cfi_offset 29, -3
 107               	/* prologue: function */
 108               	/* frame size = 0 */
 109               	/* stack size = 2 */
 110               	.L__stack_usage = 2
 111 0004 EC01      		movw r28,r24
 311:keymap_custom.c **** #   define MODS_GUI_MASK   (MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI))
 312:keymap_custom.c **** // #   define MODS_ALT_MASK   (MOD_BIT(KC_LALT)|MOD_BIT(KC_RALT))
 313:keymap_custom.c **** #   define MODS_CTRL_MASK   (MOD_BIT(KC_LCTRL)|MOD_BIT(KC_RCTRL))
 314:keymap_custom.c **** // #   define MODS_SFT_MASK   (MOD_BIT(KC_LSFT)|MOD_BIT(KC_RSFT))
 315:keymap_custom.c ****     static uint8_t gui_mod;
 316:keymap_custom.c ****     // static uint8_t alt_mod;
 317:keymap_custom.c ****     static uint8_t ctrl_mod;
 318:keymap_custom.c ****     // static uint8_t sft_mod;
 319:keymap_custom.c ****     // if (record->event.pressed) dprint("P"); else dprint("R");
 320:keymap_custom.c ****     // dprintf("%d", record->tap.count);
 321:keymap_custom.c ****     // if (record->tap.interrupted) dprint("i");
 322:keymap_custom.c ****     // dprint("\n");
 323:keymap_custom.c **** 
 324:keymap_custom.c ****     switch (id) {
 112               		.loc 1 324 0
 113 0006 462F      		mov r20,r22
 114               	.LVL9:
 115 0008 50E0      		ldi r21,0
 116 000a 4C30      		cpi r20,12
 117 000c 5105      		cpc r21,__zero_reg__
 118 000e 00F0      		brlo .+2
 119 0010 00C0      		rjmp .L14
 120 0012 FA01      		movw r30,r20
 121 0014 E050      		subi r30,lo8(-(gs(.L17)))
 122 0016 F040      		sbci r31,hi8(-(gs(.L17)))
 123 0018 0C94 0000 		jmp __tablejump2__
 124               	.LVL10:
 125               		.section	.progmem.gcc_sw_table.action_function,"a",@progbits
 126               		.p2align	1
 127               	.L17:
 128 0000 0000      		.word gs(.L16)
 129 0002 0000      		.word gs(.L18)
 130 0004 0000      		.word gs(.L19)
 131 0006 0000      		.word gs(.L20)
 132 0008 0000      		.word gs(.L21)
 133 000a 0000      		.word gs(.L22)
 134 000c 0000      		.word gs(.L23)
 135 000e 0000      		.word gs(.L24)
 136 0010 0000      		.word gs(.L25)
 137 0012 0000      		.word gs(.L26)
 138 0014 0000      		.word gs(.L27)
 139 0016 0000      		.word gs(.L28)
 140               		.section	.text.action_function
 141               	.L16:
 325:keymap_custom.c ****         case SPACE:
 326:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 142               		.loc 1 326 0
 143 001c 0E94 0000 		call get_mods
 144               	.LVL11:
 145 0020 8171      		andi r24,lo8(17)
 146 0022 8093 0000 		sts ctrl_mod.2342,r24
 327:keymap_custom.c ****             if(record->event.pressed) {
 147               		.loc 1 327 0
 148 0026 9A81      		ldd r25,Y+2
 149 0028 9923      		tst r25
 150 002a 01F0      		breq .L29
 328:keymap_custom.c ****                 del_mods(ctrl_mod);
 151               		.loc 1 328 0
 152 002c 0E94 0000 		call del_mods
 153               	.LVL12:
 329:keymap_custom.c ****                 add_key(KC_SPC);
 154               		.loc 1 329 0
 155 0030 8CE2      		ldi r24,lo8(44)
 156 0032 00C0      		rjmp .L41
 157               	.L29:
 330:keymap_custom.c ****                 send_keyboard_report();
 331:keymap_custom.c ****                 add_mods(ctrl_mod);
 332:keymap_custom.c ****             } else {
 333:keymap_custom.c ****                 del_key(KC_SPC);
 158               		.loc 1 333 0
 159 0034 8CE2      		ldi r24,lo8(44)
 160 0036 00C0      		rjmp .L42
 161               	.LVL13:
 162               	.L18:
 334:keymap_custom.c ****                 register_mods(ctrl_mod);
 335:keymap_custom.c ****                 send_keyboard_report();
 336:keymap_custom.c ****             }
 337:keymap_custom.c ****             return;
 338:keymap_custom.c **** 
 339:keymap_custom.c ****         // ****************************************
 340:keymap_custom.c ****         // VIM: LEFT, DOWN, UP, RIGHT
 341:keymap_custom.c ****         // ****************************************
 342:keymap_custom.c ****         case UP:
 343:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 163               		.loc 1 343 0
 164 0038 0E94 0000 		call get_mods
 165               	.LVL14:
 166 003c 8171      		andi r24,lo8(17)
 167 003e 8093 0000 		sts ctrl_mod.2342,r24
 344:keymap_custom.c ****             if(record->event.pressed) {
 168               		.loc 1 344 0
 169 0042 9A81      		ldd r25,Y+2
 170 0044 9923      		tst r25
 171 0046 01F0      		breq .L30
 345:keymap_custom.c ****                 del_mods(ctrl_mod);
 172               		.loc 1 345 0
 173 0048 0E94 0000 		call del_mods
 174               	.LVL15:
 346:keymap_custom.c ****                 add_key(KC_UP);
 175               		.loc 1 346 0
 176 004c 82E5      		ldi r24,lo8(82)
 177               	.L41:
 178 004e 0E94 0000 		call add_key
 179               	.LVL16:
 347:keymap_custom.c ****                 send_keyboard_report();
 180               		.loc 1 347 0
 181 0052 0E94 0000 		call send_keyboard_report
 182               	.LVL17:
 183               	.L43:
 348:keymap_custom.c ****                 add_mods(ctrl_mod);
 184               		.loc 1 348 0
 185 0056 8091 0000 		lds r24,ctrl_mod.2342
 186               	/* epilogue start */
 349:keymap_custom.c ****             } else {
 350:keymap_custom.c ****                 del_key(KC_UP);
 351:keymap_custom.c ****                 register_mods(ctrl_mod);
 352:keymap_custom.c ****                 send_keyboard_report();
 353:keymap_custom.c ****             }
 354:keymap_custom.c ****             return;
 355:keymap_custom.c **** 
 356:keymap_custom.c ****         case DOWN:
 357:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 358:keymap_custom.c ****             if(record->event.pressed) {
 359:keymap_custom.c ****                 del_mods(ctrl_mod);
 360:keymap_custom.c ****                 add_key(KC_DOWN);
 361:keymap_custom.c ****                 send_keyboard_report();
 362:keymap_custom.c ****                 add_mods(ctrl_mod);
 363:keymap_custom.c ****             } else {
 364:keymap_custom.c ****                 del_key(KC_DOWN);
 365:keymap_custom.c ****                 register_mods(ctrl_mod);
 366:keymap_custom.c ****                 send_keyboard_report();
 367:keymap_custom.c ****             }
 368:keymap_custom.c ****             return;
 369:keymap_custom.c **** 
 370:keymap_custom.c ****         case LEFT:
 371:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 372:keymap_custom.c ****             if(record->event.pressed) {
 373:keymap_custom.c ****                 del_mods(ctrl_mod);
 374:keymap_custom.c ****                 add_key(KC_LEFT);
 375:keymap_custom.c ****                 send_keyboard_report();
 376:keymap_custom.c ****                 add_mods(ctrl_mod);
 377:keymap_custom.c ****             } else {
 378:keymap_custom.c ****                 del_key(KC_LEFT);
 379:keymap_custom.c ****                 register_mods(ctrl_mod);
 380:keymap_custom.c ****                 send_keyboard_report();
 381:keymap_custom.c ****             }
 382:keymap_custom.c ****             return;
 383:keymap_custom.c **** 
 384:keymap_custom.c ****         case RIGHT:
 385:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 386:keymap_custom.c ****             if(record->event.pressed) {
 387:keymap_custom.c ****                 del_mods(ctrl_mod);
 388:keymap_custom.c ****                 add_key(KC_RIGHT);
 389:keymap_custom.c ****                 send_keyboard_report();
 390:keymap_custom.c ****                 add_mods(ctrl_mod);
 391:keymap_custom.c ****             } else {
 392:keymap_custom.c ****                 del_key(KC_RIGHT);
 393:keymap_custom.c ****                 register_mods(ctrl_mod);
 394:keymap_custom.c ****                 send_keyboard_report();
 395:keymap_custom.c ****             }
 396:keymap_custom.c ****             return;
 397:keymap_custom.c **** 
 398:keymap_custom.c ****         // ****************************************
 399:keymap_custom.c ****         // BACKSPACE, DELETE_WORD, FORWARD_DELETE
 400:keymap_custom.c ****         // ****************************************
 401:keymap_custom.c ****         case BCKSPC:
 402:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 403:keymap_custom.c ****             if(record->event.pressed) {
 404:keymap_custom.c ****                 del_mods(ctrl_mod);
 405:keymap_custom.c ****                 add_key(KC_BSPC);
 406:keymap_custom.c ****                 send_keyboard_report();
 407:keymap_custom.c ****                 add_mods(ctrl_mod);
 408:keymap_custom.c ****             } else {
 409:keymap_custom.c ****                 del_key(KC_BSPC);
 410:keymap_custom.c ****                 register_mods(ctrl_mod);
 411:keymap_custom.c ****                 send_keyboard_report();
 412:keymap_custom.c ****             }
 413:keymap_custom.c ****             return;
 414:keymap_custom.c **** 
 415:keymap_custom.c ****         case DEL_WORD:
 416:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 417:keymap_custom.c ****             if(record->event.pressed) {
 418:keymap_custom.c ****                 del_mods(ctrl_mod);
 419:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 420:keymap_custom.c ****                 add_key(KC_BSPC);
 421:keymap_custom.c ****                 send_keyboard_report();
 422:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LALT));
 423:keymap_custom.c ****                 add_mods(ctrl_mod);
 424:keymap_custom.c ****             } else {
 425:keymap_custom.c ****                 del_key(KC_BSPC);
 426:keymap_custom.c ****                 register_mods(ctrl_mod);
 427:keymap_custom.c ****                 send_keyboard_report();
 428:keymap_custom.c ****             }
 429:keymap_custom.c ****             return;
 430:keymap_custom.c **** 
 431:keymap_custom.c ****         case FWD_DEL:
 432:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 433:keymap_custom.c ****             if(record->event.pressed) {
 434:keymap_custom.c ****                 del_mods(ctrl_mod);
 435:keymap_custom.c ****                 add_key(KC_DEL);
 436:keymap_custom.c ****                 send_keyboard_report();
 437:keymap_custom.c ****                 add_mods(ctrl_mod);
 438:keymap_custom.c ****             } else {
 439:keymap_custom.c ****                 del_key(KC_DEL);
 440:keymap_custom.c ****                 register_mods(ctrl_mod);
 441:keymap_custom.c ****                 send_keyboard_report();
 442:keymap_custom.c ****             }
 443:keymap_custom.c ****             return;
 444:keymap_custom.c **** 
 445:keymap_custom.c ****         // ****************************************
 446:keymap_custom.c ****         // END_WORD, BEGIN_WORD, END_LINE, BEGIN_LINE
 447:keymap_custom.c ****         // ****************************************
 448:keymap_custom.c **** 
 449:keymap_custom.c ****         case END_WORD:
 450:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 451:keymap_custom.c ****             if(record->event.pressed) {
 452:keymap_custom.c ****                 del_mods(ctrl_mod);
 453:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 454:keymap_custom.c ****                 add_key(KC_RIGHT);
 455:keymap_custom.c ****                 send_keyboard_report();
 456:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LALT));
 457:keymap_custom.c ****                 add_mods(ctrl_mod);
 458:keymap_custom.c ****             } else {
 459:keymap_custom.c ****                 del_key(KC_RIGHT);
 460:keymap_custom.c ****                 register_mods(ctrl_mod);
 461:keymap_custom.c ****                 send_keyboard_report();
 462:keymap_custom.c ****             }
 463:keymap_custom.c ****             return;
 464:keymap_custom.c **** 
 465:keymap_custom.c ****         case BEGIN_WORD:
 466:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 467:keymap_custom.c ****             if(record->event.pressed) {
 468:keymap_custom.c ****                 del_mods(ctrl_mod);
 469:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 470:keymap_custom.c ****                 add_key(KC_LEFT);
 471:keymap_custom.c ****                 send_keyboard_report();
 472:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LALT));
 473:keymap_custom.c ****                 add_mods(ctrl_mod);
 474:keymap_custom.c ****             } else {
 475:keymap_custom.c ****                 del_key(KC_LEFT);
 476:keymap_custom.c ****                 register_mods(ctrl_mod);
 477:keymap_custom.c ****                 send_keyboard_report();
 478:keymap_custom.c ****             }
 479:keymap_custom.c ****             return;
 480:keymap_custom.c **** 
 481:keymap_custom.c ****         case END_LINE:
 482:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 483:keymap_custom.c ****             if(record->event.pressed) {
 484:keymap_custom.c ****                 del_mods(ctrl_mod);
 485:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LGUI));
 486:keymap_custom.c ****                 add_key(KC_RIGHT);
 487:keymap_custom.c ****                 send_keyboard_report();
 488:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LGUI));
 489:keymap_custom.c ****                 add_mods(ctrl_mod);
 490:keymap_custom.c ****             } else {
 491:keymap_custom.c ****                 del_key(KC_RIGHT);
 492:keymap_custom.c ****                 register_mods(ctrl_mod);
 493:keymap_custom.c ****                 send_keyboard_report();
 494:keymap_custom.c ****             }
 495:keymap_custom.c ****             return;
 496:keymap_custom.c **** 
 497:keymap_custom.c ****         case BEGIN_LINE:
 498:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 499:keymap_custom.c ****             if(record->event.pressed) {
 500:keymap_custom.c ****                 del_mods(ctrl_mod);
 501:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LGUI));
 502:keymap_custom.c ****                 add_key(KC_LEFT);
 503:keymap_custom.c ****                 send_keyboard_report();
 504:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LGUI));
 505:keymap_custom.c ****                 add_mods(ctrl_mod);
 506:keymap_custom.c ****             } else {
 507:keymap_custom.c ****                 del_key(KC_LEFT);
 508:keymap_custom.c ****                 register_mods(ctrl_mod);
 509:keymap_custom.c ****                 send_keyboard_report();
 510:keymap_custom.c ****             }
 511:keymap_custom.c ****             return;
 512:keymap_custom.c **** 
 513:keymap_custom.c ****         // case LSHIFT_LPAREN:
 514:keymap_custom.c ****         //     // Shift parentheses example: LShft + tap '('
 515:keymap_custom.c ****         //     // http://stevelosh.com/blog/2012/10/a-modern-space-cadet/#shift-parentheses
 516:keymap_custom.c ****         //     // http://geekhack.org/index.php?topic=41989.msg1304899#msg1304899
 517:keymap_custom.c ****         //     if (record->event.pressed) {
 518:keymap_custom.c ****         //         if (record->tap.count > 0 && !record->tap.interrupted) {
 519:keymap_custom.c ****         //             if (record->tap.interrupted) {
 520:keymap_custom.c ****         //                 dprint("tap interrupted\n");
 521:keymap_custom.c ****         //                 register_mods(MOD_BIT(KC_LSHIFT));
 522:keymap_custom.c ****         //             }
 523:keymap_custom.c ****         //         } else {
 524:keymap_custom.c ****         //             register_mods(MOD_BIT(KC_LSHIFT));
 525:keymap_custom.c ****         //         }
 526:keymap_custom.c ****         //     } else {
 527:keymap_custom.c ****         //         if (record->tap.count > 0 && !(record->tap.interrupted)) {
 528:keymap_custom.c ****         //             add_weak_mods(MOD_BIT(KC_LSHIFT));
 529:keymap_custom.c ****         //             send_keyboard_report();
 530:keymap_custom.c ****         //             register_code(KC_9);
 531:keymap_custom.c ****         //             unregister_code(KC_9);
 532:keymap_custom.c ****         //             del_weak_mods(MOD_BIT(KC_LSHIFT));
 533:keymap_custom.c ****         //             send_keyboard_report();
 534:keymap_custom.c ****         //             record->tap.count = 0;  // ad hoc: cancel tap
 535:keymap_custom.c ****         //         } else {
 536:keymap_custom.c ****         //             unregister_mods(MOD_BIT(KC_LSHIFT));
 537:keymap_custom.c ****         //         }
 538:keymap_custom.c ****         //     }
 539:keymap_custom.c ****         //     break;
 540:keymap_custom.c ****     }
 541:keymap_custom.c **** }
 187               		.loc 1 541 0
 188 005a DF91      		pop r29
 189 005c CF91      		pop r28
 190               	.LVL18:
 348:keymap_custom.c ****                 add_mods(ctrl_mod);
 191               		.loc 1 348 0
 192 005e 0C94 0000 		jmp add_mods
 193               	.LVL19:
 194               	.L30:
 350:keymap_custom.c ****                 del_key(KC_UP);
 195               		.loc 1 350 0
 196 0062 82E5      		ldi r24,lo8(82)
 197 0064 00C0      		rjmp .L42
 198               	.LVL20:
 199               	.L19:
 357:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 200               		.loc 1 357 0
 201 0066 0E94 0000 		call get_mods
 202               	.LVL21:
 203 006a 8171      		andi r24,lo8(17)
 204 006c 8093 0000 		sts ctrl_mod.2342,r24
 358:keymap_custom.c ****             if(record->event.pressed) {
 205               		.loc 1 358 0
 206 0070 9A81      		ldd r25,Y+2
 207 0072 9923      		tst r25
 208 0074 01F0      		breq .L31
 359:keymap_custom.c ****                 del_mods(ctrl_mod);
 209               		.loc 1 359 0
 210 0076 0E94 0000 		call del_mods
 211               	.LVL22:
 360:keymap_custom.c ****                 add_key(KC_DOWN);
 212               		.loc 1 360 0
 213 007a 81E5      		ldi r24,lo8(81)
 214 007c 00C0      		rjmp .L41
 215               	.L31:
 364:keymap_custom.c ****                 del_key(KC_DOWN);
 216               		.loc 1 364 0
 217 007e 81E5      		ldi r24,lo8(81)
 218 0080 00C0      		rjmp .L42
 219               	.LVL23:
 220               	.L20:
 371:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 221               		.loc 1 371 0
 222 0082 0E94 0000 		call get_mods
 223               	.LVL24:
 224 0086 8171      		andi r24,lo8(17)
 225 0088 8093 0000 		sts ctrl_mod.2342,r24
 372:keymap_custom.c ****             if(record->event.pressed) {
 226               		.loc 1 372 0
 227 008c 9A81      		ldd r25,Y+2
 228 008e 9923      		tst r25
 229 0090 01F4      		brne .+2
 230 0092 00C0      		rjmp .L40
 373:keymap_custom.c ****                 del_mods(ctrl_mod);
 231               		.loc 1 373 0
 232 0094 0E94 0000 		call del_mods
 233               	.LVL25:
 374:keymap_custom.c ****                 add_key(KC_LEFT);
 234               		.loc 1 374 0
 235 0098 80E5      		ldi r24,lo8(80)
 236 009a 00C0      		rjmp .L41
 237               	.LVL26:
 238               	.L21:
 385:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 239               		.loc 1 385 0
 240 009c 0E94 0000 		call get_mods
 241               	.LVL27:
 242 00a0 8171      		andi r24,lo8(17)
 243 00a2 8093 0000 		sts ctrl_mod.2342,r24
 386:keymap_custom.c ****             if(record->event.pressed) {
 244               		.loc 1 386 0
 245 00a6 9A81      		ldd r25,Y+2
 246 00a8 9923      		tst r25
 247 00aa 01F4      		brne .+2
 248 00ac 00C0      		rjmp .L39
 387:keymap_custom.c ****                 del_mods(ctrl_mod);
 249               		.loc 1 387 0
 250 00ae 0E94 0000 		call del_mods
 251               	.LVL28:
 388:keymap_custom.c ****                 add_key(KC_RIGHT);
 252               		.loc 1 388 0
 253 00b2 8FE4      		ldi r24,lo8(79)
 254 00b4 00C0      		rjmp .L41
 255               	.LVL29:
 256               	.L22:
 402:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 257               		.loc 1 402 0
 258 00b6 0E94 0000 		call get_mods
 259               	.LVL30:
 260 00ba 8171      		andi r24,lo8(17)
 261 00bc 8093 0000 		sts ctrl_mod.2342,r24
 403:keymap_custom.c ****             if(record->event.pressed) {
 262               		.loc 1 403 0
 263 00c0 9A81      		ldd r25,Y+2
 264 00c2 9923      		tst r25
 265 00c4 01F0      		breq .L35
 404:keymap_custom.c ****                 del_mods(ctrl_mod);
 266               		.loc 1 404 0
 267 00c6 0E94 0000 		call del_mods
 268               	.LVL31:
 405:keymap_custom.c ****                 add_key(KC_BSPC);
 269               		.loc 1 405 0
 270 00ca 8AE2      		ldi r24,lo8(42)
 271 00cc 00C0      		rjmp .L41
 272               	.LVL32:
 273               	.L23:
 416:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 274               		.loc 1 416 0
 275 00ce 0E94 0000 		call get_mods
 276               	.LVL33:
 277 00d2 8171      		andi r24,lo8(17)
 278 00d4 8093 0000 		sts ctrl_mod.2342,r24
 417:keymap_custom.c ****             if(record->event.pressed) {
 279               		.loc 1 417 0
 280 00d8 9A81      		ldd r25,Y+2
 281 00da 9923      		tst r25
 282 00dc 01F0      		breq .L35
 418:keymap_custom.c ****                 del_mods(ctrl_mod);
 283               		.loc 1 418 0
 284 00de 0E94 0000 		call del_mods
 285               	.LVL34:
 419:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 286               		.loc 1 419 0
 287 00e2 84E0      		ldi r24,lo8(4)
 288 00e4 0E94 0000 		call add_weak_mods
 289               	.LVL35:
 420:keymap_custom.c ****                 add_key(KC_BSPC);
 290               		.loc 1 420 0
 291 00e8 8AE2      		ldi r24,lo8(42)
 292 00ea 00C0      		rjmp .L46
 293               	.L35:
 425:keymap_custom.c ****                 del_key(KC_BSPC);
 294               		.loc 1 425 0
 295 00ec 8AE2      		ldi r24,lo8(42)
 296 00ee 00C0      		rjmp .L42
 297               	.LVL36:
 298               	.L24:
 432:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 299               		.loc 1 432 0
 300 00f0 0E94 0000 		call get_mods
 301               	.LVL37:
 302 00f4 8171      		andi r24,lo8(17)
 303 00f6 8093 0000 		sts ctrl_mod.2342,r24
 433:keymap_custom.c ****             if(record->event.pressed) {
 304               		.loc 1 433 0
 305 00fa 9A81      		ldd r25,Y+2
 306 00fc 9923      		tst r25
 307 00fe 01F0      		breq .L36
 434:keymap_custom.c ****                 del_mods(ctrl_mod);
 308               		.loc 1 434 0
 309 0100 0E94 0000 		call del_mods
 310               	.LVL38:
 435:keymap_custom.c ****                 add_key(KC_DEL);
 311               		.loc 1 435 0
 312 0104 8CE4      		ldi r24,lo8(76)
 313 0106 00C0      		rjmp .L41
 314               	.L36:
 439:keymap_custom.c ****                 del_key(KC_DEL);
 315               		.loc 1 439 0
 316 0108 8CE4      		ldi r24,lo8(76)
 317 010a 00C0      		rjmp .L42
 318               	.LVL39:
 319               	.L25:
 450:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 320               		.loc 1 450 0
 321 010c 0E94 0000 		call get_mods
 322               	.LVL40:
 323 0110 8171      		andi r24,lo8(17)
 324 0112 8093 0000 		sts ctrl_mod.2342,r24
 451:keymap_custom.c ****             if(record->event.pressed) {
 325               		.loc 1 451 0
 326 0116 9A81      		ldd r25,Y+2
 327 0118 9923      		tst r25
 328 011a 01F0      		breq .L39
 452:keymap_custom.c ****                 del_mods(ctrl_mod);
 329               		.loc 1 452 0
 330 011c 0E94 0000 		call del_mods
 331               	.LVL41:
 453:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 332               		.loc 1 453 0
 333 0120 84E0      		ldi r24,lo8(4)
 334 0122 0E94 0000 		call add_weak_mods
 335               	.LVL42:
 454:keymap_custom.c ****                 add_key(KC_RIGHT);
 336               		.loc 1 454 0
 337 0126 8FE4      		ldi r24,lo8(79)
 338               	.L46:
 339 0128 0E94 0000 		call add_key
 340               	.LVL43:
 455:keymap_custom.c ****                 send_keyboard_report();
 341               		.loc 1 455 0
 342 012c 0E94 0000 		call send_keyboard_report
 343               	.LVL44:
 456:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LALT));
 344               		.loc 1 456 0
 345 0130 84E0      		ldi r24,lo8(4)
 346 0132 00C0      		rjmp .L45
 347               	.LVL45:
 348               	.L26:
 466:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 349               		.loc 1 466 0
 350 0134 0E94 0000 		call get_mods
 351               	.LVL46:
 352 0138 8171      		andi r24,lo8(17)
 353 013a 8093 0000 		sts ctrl_mod.2342,r24
 467:keymap_custom.c ****             if(record->event.pressed) {
 354               		.loc 1 467 0
 355 013e 9A81      		ldd r25,Y+2
 356 0140 9923      		tst r25
 357 0142 01F0      		breq .L40
 468:keymap_custom.c ****                 del_mods(ctrl_mod);
 358               		.loc 1 468 0
 359 0144 0E94 0000 		call del_mods
 360               	.LVL47:
 469:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 361               		.loc 1 469 0
 362 0148 84E0      		ldi r24,lo8(4)
 363 014a 0E94 0000 		call add_weak_mods
 364               	.LVL48:
 470:keymap_custom.c ****                 add_key(KC_LEFT);
 365               		.loc 1 470 0
 366 014e 80E5      		ldi r24,lo8(80)
 367 0150 00C0      		rjmp .L46
 368               	.LVL49:
 369               	.L27:
 482:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 370               		.loc 1 482 0
 371 0152 0E94 0000 		call get_mods
 372               	.LVL50:
 373 0156 8171      		andi r24,lo8(17)
 374 0158 8093 0000 		sts ctrl_mod.2342,r24
 483:keymap_custom.c ****             if(record->event.pressed) {
 375               		.loc 1 483 0
 376 015c 9A81      		ldd r25,Y+2
 377 015e 9923      		tst r25
 378 0160 01F0      		breq .L39
 484:keymap_custom.c ****                 del_mods(ctrl_mod);
 379               		.loc 1 484 0
 380 0162 0E94 0000 		call del_mods
 381               	.LVL51:
 485:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LGUI));
 382               		.loc 1 485 0
 383 0166 88E0      		ldi r24,lo8(8)
 384 0168 0E94 0000 		call add_weak_mods
 385               	.LVL52:
 486:keymap_custom.c ****                 add_key(KC_RIGHT);
 386               		.loc 1 486 0
 387 016c 8FE4      		ldi r24,lo8(79)
 388 016e 00C0      		rjmp .L44
 389               	.L39:
 491:keymap_custom.c ****                 del_key(KC_RIGHT);
 390               		.loc 1 491 0
 391 0170 8FE4      		ldi r24,lo8(79)
 392 0172 00C0      		rjmp .L42
 393               	.LVL53:
 394               	.L28:
 498:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 395               		.loc 1 498 0
 396 0174 0E94 0000 		call get_mods
 397               	.LVL54:
 398 0178 8171      		andi r24,lo8(17)
 399 017a 8093 0000 		sts ctrl_mod.2342,r24
 499:keymap_custom.c ****             if(record->event.pressed) {
 400               		.loc 1 499 0
 401 017e 9A81      		ldd r25,Y+2
 402 0180 9923      		tst r25
 403 0182 01F0      		breq .L40
 500:keymap_custom.c ****                 del_mods(ctrl_mod);
 404               		.loc 1 500 0
 405 0184 0E94 0000 		call del_mods
 406               	.LVL55:
 501:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LGUI));
 407               		.loc 1 501 0
 408 0188 88E0      		ldi r24,lo8(8)
 409 018a 0E94 0000 		call add_weak_mods
 410               	.LVL56:
 502:keymap_custom.c ****                 add_key(KC_LEFT);
 411               		.loc 1 502 0
 412 018e 80E5      		ldi r24,lo8(80)
 413               	.L44:
 414 0190 0E94 0000 		call add_key
 415               	.LVL57:
 503:keymap_custom.c ****                 send_keyboard_report();
 416               		.loc 1 503 0
 417 0194 0E94 0000 		call send_keyboard_report
 418               	.LVL58:
 504:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LGUI));
 419               		.loc 1 504 0
 420 0198 88E0      		ldi r24,lo8(8)
 421               	.L45:
 422 019a 0E94 0000 		call del_weak_mods
 423               	.LVL59:
 424 019e 00C0      		rjmp .L43
 425               	.L40:
 507:keymap_custom.c ****                 del_key(KC_LEFT);
 426               		.loc 1 507 0
 427 01a0 80E5      		ldi r24,lo8(80)
 428               	.L42:
 429 01a2 0E94 0000 		call del_key
 430               	.LVL60:
 508:keymap_custom.c ****                 register_mods(ctrl_mod);
 431               		.loc 1 508 0
 432 01a6 8091 0000 		lds r24,ctrl_mod.2342
 433 01aa 0E94 0000 		call register_mods
 434               	.LVL61:
 435               	/* epilogue start */
 436               		.loc 1 541 0
 437 01ae DF91      		pop r29
 438 01b0 CF91      		pop r28
 439               	.LVL62:
 509:keymap_custom.c ****                 send_keyboard_report();
 440               		.loc 1 509 0
 441 01b2 0C94 0000 		jmp send_keyboard_report
 442               	.LVL63:
 443               	.L14:
 444               	/* epilogue start */
 445               		.loc 1 541 0
 446 01b6 DF91      		pop r29
 447 01b8 CF91      		pop r28
 448 01ba 0895      		ret
 449               		.cfi_endproc
 450               	.LFE5:
 452               		.section	.bss.ctrl_mod.2342,"aw",@nobits
 455               	ctrl_mod.2342:
 456 0000 00        		.zero	1
 457               		.section	.progmem.data.__m.2334,"a",@progbits
 460               	__m.2334:
 461 0000 02        		.byte	2
 462 0001 35        		.byte	53
 463 0002 00        		.byte	0
 464               		.section	.progmem.data.__m.2332,"a",@progbits
 467               	__m.2332:
 468 0000 01        		.byte	1
 469 0001 E3        		.byte	-29
 470 0002 01        		.byte	1
 471 0003 35        		.byte	53
 472 0004 00        		.byte	0
 473               		.section	.progmem.data.__m.2329,"a",@progbits
 476               	__m.2329:
 477 0000 02        		.byte	2
 478 0001 2B        		.byte	43
 479 0002 00        		.byte	0
 480               		.section	.progmem.data.__m.2327,"a",@progbits
 483               	__m.2327:
 484 0000 01        		.byte	1
 485 0001 E2        		.byte	-30
 486 0002 01        		.byte	1
 487 0003 2B        		.byte	43
 488 0004 00        		.byte	0
 489               		.section	.progmem.data.__m.2324,"a",@progbits
 492               	__m.2324:
 493 0000 01        		.byte	1
 494 0001 A9        		.byte	-87
 495 0002 02        		.byte	2
 496 0003 A9        		.byte	-87
 497 0004 00        		.byte	0
 498               		.section	.progmem.data.__m.2321,"a",@progbits
 501               	__m.2321:
 502 0000 75        		.byte	117
 503 0001 00        		.byte	0
 504 0002 01        		.byte	1
 505 0003 0B        		.byte	11
 506 0004 02        		.byte	2
 507 0005 0B        		.byte	11
 508 0006 01        		.byte	1
 509 0007 08        		.byte	8
 510 0008 02        		.byte	2
 511 0009 08        		.byte	8
 512 000a 01        		.byte	1
 513 000b 0F        		.byte	15
 514 000c 02        		.byte	2
 515 000d 0F        		.byte	15
 516 000e 01        		.byte	1
 517 000f 0F        		.byte	15
 518 0010 02        		.byte	2
 519 0011 0F        		.byte	15
 520 0012 74        		.byte	116
 521 0013 FF        		.byte	-1
 522 0014 01        		.byte	1
 523 0015 12        		.byte	18
 524 0016 02        		.byte	2
 525 0017 12        		.byte	18
 526 0018 00        		.byte	0
 527               	.global	fn_actions
 528               		.section	.progmem.data.fn_actions,"a",@progbits
 531               	fn_actions:
 532 0000 018C      		.word	-29695
 533 0002 C8A1      		.word	-24120
 534 0004 C1A2      		.word	-23871
 535 0006 0000 0000 		.zero	6
 535      0000 
 536 000c F1A6      		.word	-22799
 537 000e 0000 0000 		.zero	4
 538 0012 00F0      		.word	-4096
 539 0014 03F0      		.word	-4093
 540 0016 02F0      		.word	-4094
 541 0018 01F0      		.word	-4095
 542 001a 04F0      		.word	-4092
 543 001c 05F0      		.word	-4091
 544 001e 06F0      		.word	-4090
 545 0020 07F0      		.word	-4089
 546 0022 08F0      		.word	-4088
 547 0024 09F0      		.word	-4087
 548 0026 0AF0      		.word	-4086
 549 0028 0BF0      		.word	-4085
 550               	.global	keymaps
 551               		.section	.progmem.data.keymaps,"a",@progbits
 554               	keymaps:
 555 0000 1F        		.byte	31
 556 0001 14        		.byte	20
 557 0002 1A        		.byte	26
 558 0003 16        		.byte	22
 559 0004 04        		.byte	4
 560 0005 1D        		.byte	29
 561 0006 1B        		.byte	27
 562 0007 06        		.byte	6
 563 0008 20        		.byte	32
 564 0009 21        		.byte	33
 565 000a 15        		.byte	21
 566 000b 08        		.byte	8
 567 000c 07        		.byte	7
 568 000d 09        		.byte	9
 569 000e 19        		.byte	25
 570 000f 05        		.byte	5
 571 0010 22        		.byte	34
 572 0011 23        		.byte	35
 573 0012 1C        		.byte	28
 574 0013 17        		.byte	23
 575 0014 0A        		.byte	10
 576 0015 0B        		.byte	11
 577 0016 11        		.byte	17
 578 0017 00        		.byte	0
 579 0018 1E        		.byte	30
 580 0019 29        		.byte	41
 581 001a 2B        		.byte	43
 582 001b C2        		.byte	-62
 583 001c E1        		.byte	-31
 584 001d E2        		.byte	-30
 585 001e C1        		.byte	-63
 586 001f 2C        		.byte	44
 587 0020 24        		.byte	36
 588 0021 25        		.byte	37
 589 0022 18        		.byte	24
 590 0023 0C        		.byte	12
 591 0024 0E        		.byte	14
 592 0025 0D        		.byte	13
 593 0026 10        		.byte	16
 594 0027 00        		.byte	0
 595 0028 31        		.byte	49
 596 0029 35        		.byte	53
 597 002a 2A        		.byte	42
 598 002b 28        		.byte	40
 599 002c C6        		.byte	-58
 600 002d E5        		.byte	-27
 601 002e E6        		.byte	-26
 602 002f E7        		.byte	-25
 603 0030 26        		.byte	38
 604 0031 27        		.byte	39
 605 0032 12        		.byte	18
 606 0033 13        		.byte	19
 607 0034 33        		.byte	51
 608 0035 0F        		.byte	15
 609 0036 36        		.byte	54
 610 0037 00        		.byte	0
 611 0038 2D        		.byte	45
 612 0039 2E        		.byte	46
 613 003a 30        		.byte	48
 614 003b 2F        		.byte	47
 615 003c 34        		.byte	52
 616 003d 38        		.byte	56
 617 003e 37        		.byte	55
 618 003f 00        		.byte	0
 619 0040 1F        		.byte	31
 620 0041 14        		.byte	20
 621 0042 1A        		.byte	26
 622 0043 16        		.byte	22
 623 0044 04        		.byte	4
 624 0045 1D        		.byte	29
 625 0046 1B        		.byte	27
 626 0047 06        		.byte	6
 627 0048 20        		.byte	32
 628 0049 21        		.byte	33
 629 004a 15        		.byte	21
 630 004b 08        		.byte	8
 631 004c 07        		.byte	7
 632 004d 09        		.byte	9
 633 004e 19        		.byte	25
 634 004f 05        		.byte	5
 635 0050 22        		.byte	34
 636 0051 23        		.byte	35
 637 0052 1C        		.byte	28
 638 0053 17        		.byte	23
 639 0054 0A        		.byte	10
 640 0055 0B        		.byte	11
 641 0056 11        		.byte	17
 642 0057 00        		.byte	0
 643 0058 1E        		.byte	30
 644 0059 35        		.byte	53
 645 005a 2B        		.byte	43
 646 005b E0        		.byte	-32
 647 005c E1        		.byte	-31
 648 005d E2        		.byte	-30
 649 005e 01        		.byte	1
 650 005f 2C        		.byte	44
 651 0060 24        		.byte	36
 652 0061 25        		.byte	37
 653 0062 18        		.byte	24
 654 0063 0C        		.byte	12
 655 0064 0E        		.byte	14
 656 0065 0D        		.byte	13
 657 0066 10        		.byte	16
 658 0067 00        		.byte	0
 659 0068 31        		.byte	49
 660 0069 35        		.byte	53
 661 006a 2A        		.byte	42
 662 006b 28        		.byte	40
 663 006c 01        		.byte	1
 664 006d E5        		.byte	-27
 665 006e E6        		.byte	-26
 666 006f E7        		.byte	-25
 667 0070 26        		.byte	38
 668 0071 27        		.byte	39
 669 0072 12        		.byte	18
 670 0073 13        		.byte	19
 671 0074 33        		.byte	51
 672 0075 0F        		.byte	15
 673 0076 36        		.byte	54
 674 0077 00        		.byte	0
 675 0078 2D        		.byte	45
 676 0079 2E        		.byte	46
 677 007a 30        		.byte	48
 678 007b 2F        		.byte	47
 679 007c 34        		.byte	52
 680 007d 38        		.byte	56
 681 007e 37        		.byte	55
 682 007f 00        		.byte	0
 683 0080 01        		.byte	1
 684 0081 01        		.byte	1
 685 0082 01        		.byte	1
 686 0083 01        		.byte	1
 687 0084 01        		.byte	1
 688 0085 01        		.byte	1
 689 0086 01        		.byte	1
 690 0087 01        		.byte	1
 691 0088 01        		.byte	1
 692 0089 D3        		.byte	-45
 693 008a 01        		.byte	1
 694 008b D1        		.byte	-47
 695 008c CF        		.byte	-49
 696 008d CE        		.byte	-50
 697 008e 04        		.byte	4
 698 008f D2        		.byte	-46
 699 0090 01        		.byte	1
 700 0091 D4        		.byte	-44
 701 0092 01        		.byte	1
 702 0093 01        		.byte	1
 703 0094 D0        		.byte	-48
 704 0095 CA        		.byte	-54
 705 0096 01        		.byte	1
 706 0097 00        		.byte	0
 707 0098 01        		.byte	1
 708 0099 29        		.byte	41
 709 009a 2B        		.byte	43
 710 009b 01        		.byte	1
 711 009c E1        		.byte	-31
 712 009d E2        		.byte	-30
 713 009e E3        		.byte	-29
 714 009f C9        		.byte	-55
 715 00a0 01        		.byte	1
 716 00a1 01        		.byte	1
 717 00a2 01        		.byte	1
 718 00a3 57        		.byte	87
 719 00a4 CC        		.byte	-52
 720 00a5 CB        		.byte	-53
 721 00a6 01        		.byte	1
 722 00a7 00        		.byte	0
 723 00a8 49        		.byte	73
 724 00a9 4C        		.byte	76
 725 00aa 2A        		.byte	42
 726 00ab 28        		.byte	40
 727 00ac 01        		.byte	1
 728 00ad E5        		.byte	-27
 729 00ae E6        		.byte	-26
 730 00af E7        		.byte	-25
 731 00b0 01        		.byte	1
 732 00b1 01        		.byte	1
 733 00b2 01        		.byte	1
 734 00b3 01        		.byte	1
 735 00b4 01        		.byte	1
 736 00b5 CD        		.byte	-51
 737 00b6 01        		.byte	1
 738 00b7 00        		.byte	0
 739 00b8 01        		.byte	1
 740 00b9 01        		.byte	1
 741 00ba 01        		.byte	1
 742 00bb 01        		.byte	1
 743 00bc 01        		.byte	1
 744 00bd 01        		.byte	1
 745 00be 01        		.byte	1
 746 00bf 00        		.byte	0
 747 00c0 0000 0000 		.zero	192
 747      0000 0000 
 747      0000 0000 
 747      0000 0000 
 747      0000 0000 
 748 0180 3B        		.byte	59
 749 0181 00        		.byte	0
 750 0182 AC        		.byte	-84
 751 0183 A9        		.byte	-87
 752 0184 AA        		.byte	-86
 753 0185 00        		.byte	0
 754 0186 00        		.byte	0
 755 0187 00        		.byte	0
 756 0188 3C        		.byte	60
 757 0189 3D        		.byte	61
 758 018a AB        		.byte	-85
 759 018b B0        		.byte	-80
 760 018c A8        		.byte	-88
 761 018d 00        		.byte	0
 762 018e 00        		.byte	0
 763 018f 00        		.byte	0
 764 0190 3E        		.byte	62
 765 0191 3F        		.byte	63
 766 0192 00        		.byte	0
 767 0193 00        		.byte	0
 768 0194 00        		.byte	0
 769 0195 55        		.byte	85
 770 0196 57        		.byte	87
 771 0197 00        		.byte	0
 772 0198 3A        		.byte	58
 773 0199 A5        		.byte	-91
 774 019a 39        		.byte	57
 775 019b E0        		.byte	-32
 776 019c E1        		.byte	-31
 777 019d E2        		.byte	-30
 778 019e E3        		.byte	-29
 779 019f 01        		.byte	1
 780 01a0 40        		.byte	64
 781 01a1 41        		.byte	65
 782 01a2 00        		.byte	0
 783 01a3 00        		.byte	0
 784 01a4 4A        		.byte	74
 785 01a5 54        		.byte	84
 786 01a6 56        		.byte	86
 787 01a7 00        		.byte	0
 788 01a8 49        		.byte	73
 789 01a9 4C        		.byte	76
 790 01aa 2A        		.byte	42
 791 01ab 28        		.byte	40
 792 01ac C6        		.byte	-58
 793 01ad E5        		.byte	-27
 794 01ae E6        		.byte	-26
 795 01af E7        		.byte	-25
 796 01b0 42        		.byte	66
 797 01b1 43        		.byte	67
 798 01b2 00        		.byte	0
 799 01b3 00        		.byte	0
 800 01b4 50        		.byte	80
 801 01b5 4B        		.byte	75
 802 01b6 4D        		.byte	77
 803 01b7 00        		.byte	0
 804 01b8 44        		.byte	68
 805 01b9 45        		.byte	69
 806 01ba C4        		.byte	-60
 807 01bb 52        		.byte	82
 808 01bc 4F        		.byte	79
 809 01bd 51        		.byte	81
 810 01be 4E        		.byte	78
 811 01bf 00        		.byte	0
 812               		.text
 813               	.Letext0:
 814               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 815               		.file 3 "./tmk_core/common/keycode.h"
 816               		.file 4 "./tmk_core/common/keyboard.h"
 817               		.file 5 "./tmk_core/common/action_code.h"
 818               		.file 6 "./tmk_core/common/action_macro.h"
 819               		.file 7 "./tmk_core/common/action.h"
 820               		.file 8 "./tmk_core/common/action_util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 keymap_custom.c
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:2      *ABS*:0000003e __SP_H__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:3      *ABS*:0000003d __SP_L__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:4      *ABS*:0000003f __SREG__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:6      *ABS*:00000001 __zero_reg__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:13     .text.action_get_macro:00000000 action_get_macro
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:501    .progmem.data.__m.2321:00000000 __m.2321
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:492    .progmem.data.__m.2324:00000000 __m.2324
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:483    .progmem.data.__m.2327:00000000 __m.2327
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:467    .progmem.data.__m.2332:00000000 __m.2332
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:476    .progmem.data.__m.2329:00000000 __m.2329
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:460    .progmem.data.__m.2334:00000000 __m.2334
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:94     .text.action_function:00000000 action_function
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:455    .bss.ctrl_mod.2342:00000000 ctrl_mod.2342
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:531    .progmem.data.fn_actions:00000000 fn_actions
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccIhJqLz.s:554    .progmem.data.keymaps:00000000 keymaps

UNDEFINED SYMBOLS
__tablejump2__
get_mods
del_mods
add_key
send_keyboard_report
add_mods
add_weak_mods
del_weak_mods
del_key
register_mods
__do_clear_bss
