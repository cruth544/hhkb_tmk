   1               		.file	"keymap_custom.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_get_macro,"ax",@progbits
  11               	.global	action_get_macro
  13               	action_get_macro:
  14               	.LFB4:
  15               		.file 1 "keymap_custom.c"
   1:keymap_custom.c **** /*
   2:keymap_custom.c ****  * Hasu: my personal keymap
   3:keymap_custom.c ****  */
   4:keymap_custom.c **** #include "keymap_common.h"
   5:keymap_custom.c **** 
   6:keymap_custom.c **** 
   7:keymap_custom.c **** #ifdef KEYMAP_SECTION_ENABLE
   8:keymap_custom.c **** const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS] __attribute__ ((section (".keymap.keymaps"))) = {
   9:keymap_custom.c **** #else
  10:keymap_custom.c **** const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS] PROGMEM = {
  11:keymap_custom.c **** #endif
  12:keymap_custom.c ****     /* Layer 0: Fn0 Default Layer
  13:keymap_custom.c ****      * ,-----------------------------------------------------------.
  14:keymap_custom.c ****      * |Esc|  1|  2|  3|  4|  5|  6|  7|  8|  9|  0|  -|  =|  \|  `|
  15:keymap_custom.c ****      * |-----------------------------------------------------------|
  16:keymap_custom.c ****      * |Tab  |  Q|  W|  E|  R|  T|  Y|  U|  I|  O|  P|  [|  ]|Backs|
  17:keymap_custom.c ****      * |-----------------------------------------------------------|
  18:keymap_custom.c ****      * |Fn3   |  A|  S|  D|  F|  G|  H|  J|  K|  L|  ;|  '|Enter   |
  19:keymap_custom.c ****      * |-----------------------------------------------------------|
  20:keymap_custom.c ****      * |Shift   |  Z|  X|  C|  V|  B|  N|  M|  ,|  .|  /|Shift |Fn1|
  21:keymap_custom.c ****      * `-----------------------------------------------------------'
  22:keymap_custom.c ****      *       |Alt|Gui  |         Space         |Gui  |Alt|
  23:keymap_custom.c ****      *       `-------------------------------------------'
  24:keymap_custom.c ****      */
  25:keymap_custom.c ****     [0] = \
  26:keymap_custom.c ****     KEYMAP(ESC, 1,   2,   3,   4,   5,   6,   7,   8,   9,   0,   MINS,EQL, BSLS,GRV, \
  27:keymap_custom.c ****            TAB ,   Q,   W,   E,   R,   T,   Y,   U,   I,   O,   P,   LBRC,RBRC,BSPC, \
  28:keymap_custom.c ****            FN2  ,   A,   S,   D,   F,   G,   H,   J,   K,   L, SCLN, QUOT,ENT, \
  29:keymap_custom.c ****            LSFT  ,   Z,   X,   C,   V,   B,   N,   M, COMM, DOT, SLSH, RSFT,FN6, \
  30:keymap_custom.c ****                 LALT, FN1,           SPC           , RGUI, RALT),
  31:keymap_custom.c **** 
  32:keymap_custom.c ****     /* Layer 2: Fn2 Vi mode
  33:keymap_custom.c ****      * ,-----------------------------------------------------------.
  34:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  35:keymap_custom.c ****      * |-----------------------------------------------------------|
  36:keymap_custom.c ****      * |Tab  |   |   |   |   |   |   |   |   |   |   |   |    Backs|
  37:keymap_custom.c ****      * |-----------------------------------------------------------|
  38:keymap_custom.c ****      * |Fn3   |   |   |  |BSPC|   |Lef|Dow|Up |Rig|   |   |Return  |
  39:keymap_custom.c ****      * |-----------------------------------------------------------|
  40:keymap_custom.c ****      * |Shift   |   |   |   |   |   |   |   |   |   |   Shift |    |
  41:keymap_custom.c ****      * `-----------------------------------------------------------'
  42:keymap_custom.c ****      *       |Alt|Gui  |          Space        |Gui  |Alt|
  43:keymap_custom.c ****      *       `-------------------------------------------`
  44:keymap_custom.c ****      */
  45:keymap_custom.c ****     [1] = \
  46:keymap_custom.c ****     KEYMAP(GRV, 1,   2,   3,   4,   5,   6,   7,   8,   9,   0,   MINS,EQL, BSLS,GRV, \
  47:keymap_custom.c ****            TAB ,   Q,   W,   E,   R,   T,   Y,   U,   I,   O,   P,   LBRC,RBRC,BSPC, \
  48:keymap_custom.c ****            LCTL ,   A,   S,   D,   F,   G,   H,    J,   K ,  L, SCLN, QUOT,ENT, \
  49:keymap_custom.c ****            LSFT  ,   Z,   X,   C,   V,   B,   N,   M, COMM, DOT, SLSH, RSFT,TRNS, \
  50:keymap_custom.c ****                 LALT, TRNS,           SPC           , RGUI, RALT),
  51:keymap_custom.c **** 
  52:keymap_custom.c ****     /* Layer 3: Fn3 Vi mode[Slash]
  53:keymap_custom.c ****      * ,-----------------------------------------------------------.
  54:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  55:keymap_custom.c ****      * |-----------------------------------------------------------|
  56:keymap_custom.c ****      * |Tab  |   |   |   |   |   |   |   |   |   |   |   |    Backs|
  57:keymap_custom.c ****      * |-----------------------------------------------------------|
  58:keymap_custom.c ****      * |Fn2   |   |   |  |BSPC|   |Lef|Dow|Up |Rig|   |   |Return  |
  59:keymap_custom.c ****      * |-----------------------------------------------------------|
  60:keymap_custom.c ****      * |Shift   |   |   |   |   |   |   |   |   |   |   Shift |    |
  61:keymap_custom.c ****      * `-----------------------------------------------------------'
  62:keymap_custom.c ****      *       |Alt|Gui  |          Space        |Gui  |Alt|
  63:keymap_custom.c ****      *       `-------------------------------------------`
  64:keymap_custom.c ****      */
  65:keymap_custom.c ****     [2] = \
  66:keymap_custom.c ****     KEYMAP(ESC, TRNS, TRNS, TRNS, FN19, TRNS, FN20, TRNS, TRNS, TRNS, TRNS, TRNS, TRNS, INS, DEL, \
  67:keymap_custom.c ****            TAB , TRNS, FN15, FN17, TRNS, TRNS, TRNS, TRNS, TRNS, TRNS, TRNS, TRNS, TRNS, BSPC, \
  68:keymap_custom.c ****            TRNS  , TRNS, TRNS, TRNS, FN14, FN16, FN10, FN11,  FN12,  FN13, TRNS, TRNS, TRNS, \
  69:keymap_custom.c ****            LSFT   , TRNS, TRNS, TRNS, TRNS, FN18, TRNS, TRNS, TRNS, TRNS, TRNS, RSFT, TRNS, \
  70:keymap_custom.c ****                 LALT, LGUI,            SPC             , RGUI, RALT),
  71:keymap_custom.c **** 
  72:keymap_custom.c **** 
  73:keymap_custom.c **** 
  74:keymap_custom.c ****     /* Layer 1: Fn1 HHKB mode[HHKB Fn]
  75:keymap_custom.c ****      * ,-----------------------------------------------------------.
  76:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  77:keymap_custom.c ****      * |-----------------------------------------------------------|
  78:keymap_custom.c ****      * |Caps |   |   |   |   |   |   |   |Psc|Slk|Pus|Up |   |Backs|
  79:keymap_custom.c ****      * |-----------------------------------------------------------|
  80:keymap_custom.c ****      * |Contro|VoD|VoU|Mut|   |   |  *|  /|Hom|PgU|Lef|Rig|Enter   |
  81:keymap_custom.c ****      * |-----------------------------------------------------------|
  82:keymap_custom.c ****      * |Shift   |   |   |   |   |   |  +|  -|End|PgD|Dow|Shift |   |
  83:keymap_custom.c ****      * `-----------------------------------------------------------'
  84:keymap_custom.c ****      *       |Alt|Gui  |         Space         |Gui  |Alt|
  85:keymap_custom.c ****      *       `-------------------------------------------'
  86:keymap_custom.c ****      */
  87:keymap_custom.c ****     [6] = \
  88:keymap_custom.c ****     KEYMAP(PWR, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
  89:keymap_custom.c ****            CAPS,NO,  NO,  NO,  NO,  NO,  NO,  NO,  PSCR,SLCK,PAUS, UP,  FN4,  BSPC, \
  90:keymap_custom.c ****            LCTL,VOLD,VOLU,MUTE,NO,  NO,  PAST,PSLS,HOME,PGUP,LEFT,RGHT,ENT, \
  91:keymap_custom.c ****            LSFT,NO,  NO,  NO,  NO,  NO,  PPLS,PMNS,END, PGDN,DOWN,RSFT,TRNS, \
  92:keymap_custom.c ****                 LALT,LGUI,          TRNS,               RGUI,RALT),
  93:keymap_custom.c **** 
  94:keymap_custom.c **** #if 0
  95:keymap_custom.c ****     /* Layer 3: Fn3 Mouse mode(IJKL)[Semicolon]
  96:keymap_custom.c ****      * ,-----------------------------------------------------------.
  97:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  98:keymap_custom.c ****      * |-----------------------------------------------------------|
  99:keymap_custom.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|McU|MwU|MwR|Wbk|Wfr|Alt-T|
 100:keymap_custom.c ****      * |-----------------------------------------------------------|
 101:keymap_custom.c ****      * |Contro|   |   |   |   |   |Mb2|McL|McD|McR|Fn |   |Return  |
 102:keymap_custom.c ****      * |-----------------------------------------------------------|
 103:keymap_custom.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 104:keymap_custom.c ****      * `-----------------------------------------------------------'
 105:keymap_custom.c ****      *      |Alt |Gui  |          Mb1          |Fn   |Fn |
 106:keymap_custom.c ****      *      `--------------------------------------------'
 107:keymap_custom.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
 108:keymap_custom.c ****      */
 109:keymap_custom.c ****     [3] = \
 110:keymap_custom.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 111:keymap_custom.c ****            FN8, NO,  NO,  NO,  NO,  NO,  WH_L,WH_D,MS_U,WH_U,WH_R,FN9, FN10,FN8, \
 112:keymap_custom.c ****            LCTL,ACL0,ACL1,ACL2,ACL2,NO,  NO,  MS_L,MS_D,MS_R,FN3, NO,  ENT, \
 113:keymap_custom.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,NO,  RSFT,TRNS, \
 114:keymap_custom.c ****                 LALT,LGUI,          BTN1,               TRNS,TRNS),
 115:keymap_custom.c **** 
 116:keymap_custom.c ****     /* Layer 4: Fn4 Mouse mode(IJKL)[Space]
 117:keymap_custom.c ****      * ,-----------------------------------------------------------.
 118:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
 119:keymap_custom.c ****      * |-----------------------------------------------------------|
 120:keymap_custom.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|McU|MwU|MwR|Wbk|Wfr|Alt-T|
 121:keymap_custom.c ****      * |-----------------------------------------------------------|
 122:keymap_custom.c ****      * |Contro|   |   |   |   |   |Mb2|McL|McD|McR|Mb1|   |Return  |
 123:keymap_custom.c ****      * |-----------------------------------------------------------|
 124:keymap_custom.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 125:keymap_custom.c ****      * `-----------------------------------------------------------'
 126:keymap_custom.c ****      *      |Alt |Gui  |          Mb1          |Fn   |Fn |
 127:keymap_custom.c ****      *      `--------------------------------------------'
 128:keymap_custom.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
 129:keymap_custom.c ****      */
 130:keymap_custom.c ****     [4] = \
 131:keymap_custom.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 132:keymap_custom.c ****            FN8, NO,  NO,  NO,  NO,  NO,  WH_L,WH_D,MS_U,WH_U,WH_R,BTN4,BTN5,FN8, \
 133:keymap_custom.c ****            LCTL,VOLD,VOLU,MUTE,NO,  NO,  NO,  MS_L,MS_D,MS_R,BTN1,NO,  ENT, \
 134:keymap_custom.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,NO,  RSFT,TRNS, \
 135:keymap_custom.c ****                 LALT,LGUI,          TRNS,               TRNS,TRNS),
 136:keymap_custom.c **** #endif
 137:keymap_custom.c **** #if 0
 138:keymap_custom.c ****     /* Layer 3: Mouse mode(HJKL)[Semicolon]
 139:keymap_custom.c ****      * ,-----------------------------------------------------------.
 140:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
 141:keymap_custom.c ****      * |-----------------------------------------------------------|
 142:keymap_custom.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|MwU|MwR|   |   |   |Backs|
 143:keymap_custom.c ****      * |-----------------------------------------------------------|
 144:keymap_custom.c ****      * |Contro|   |   |   |   |   |McL|McD|McU|McR|Fn0|   |Return  |
 145:keymap_custom.c ****      * |-----------------------------------------------------------|
 146:keymap_custom.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 147:keymap_custom.c ****      * `-----------------------------------------------------------'
 148:keymap_custom.c ****      *      |Alt |Gui  |          Mb1          |Gui  |Fn0|
 149:keymap_custom.c ****      *      `--------------------------------------------'
 150:keymap_custom.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
 151:keymap_custom.c ****      */
 152:keymap_custom.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 153:keymap_custom.c ****            TAB, NO,  NO,  NO,  NO,  NO,  NO,  WH_D,WH_U,RGHT,NO,  NO,  NO,  BSPC, \
 154:keymap_custom.c ****            LCTL,NO,  ACL0,ACL1,ACL2,NO,  MS_L,MS_D,MS_U,MS_R,TRNS,QUOT,ENT, \
 155:keymap_custom.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,SLSH,RSFT,NO, \
 156:keymap_custom.c ****                 LALT,LGUI,          BTN1,               RGUI,TRNS),
 157:keymap_custom.c **** 
 158:keymap_custom.c ****     /* Layer4: Mouse mode(HJKL)[Space]
 159:keymap_custom.c ****      * ,-----------------------------------------------------------.
 160:keymap_custom.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
 161:keymap_custom.c ****      * |-----------------------------------------------------------|
 162:keymap_custom.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|MwU|MwR|   |Wbk|Wfr|Alt-T|
 163:keymap_custom.c ****      * |-----------------------------------------------------------|
 164:keymap_custom.c ****      * |Contro|   |   |   |   |   |McL|McD|McU|McR|Fn0|   |Return  |
 165:keymap_custom.c ****      * |-----------------------------------------------------------|
 166:keymap_custom.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 167:keymap_custom.c ****      * `-----------------------------------------------------------'
 168:keymap_custom.c ****      *      |Alt |Gui  |          Fn0          |Gui  |Fn0|
 169:keymap_custom.c ****      *      `--------------------------------------------'
 170:keymap_custom.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
 171:keymap_custom.c ****      */
 172:keymap_custom.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 173:keymap_custom.c ****            FN8, NO,  NO,  NO,  NO,  NO,  NO,  WH_D,WH_U,RGHT,NO,  FN9, FN10,FN8, \
 174:keymap_custom.c ****            LCTL,NO,  ACL0,ACL1,ACL2,NO,  MS_L,MS_D,MS_U,MS_R,BTN1,NO,  ENT, \
 175:keymap_custom.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,NO,  RSFT,NO, \
 176:keymap_custom.c ****                 LALT,LGUI,          TRNS,               RGUI,RALT),
 177:keymap_custom.c **** #endif
 178:keymap_custom.c **** #if 0
 179:keymap_custom.c ****     /* Layer x: Matias half-qwerty keyboard style[Space]
 180:keymap_custom.c ****      * ,-----------------------------------------------------------.
 181:keymap_custom.c ****      * |  -|  0|  9|  8|  7|  6|  5|  4|  3|  2|  1|   |   |   |Esc|
 182:keymap_custom.c ****      * |-----------------------------------------------------------|
 183:keymap_custom.c ****      * |Backs|  P|  O|  I|  U|  Y|  T|  R|  E|  W|  Q|   |   |Tab  |
 184:keymap_custom.c ****      * |-----------------------------------------------------------|
 185:keymap_custom.c ****      * |Contro|  ;|  L|  K|  J|  H|  G|  F|  D|  S|  A|Con|Control |
 186:keymap_custom.c ****      * |-----------------------------------------------------------|
 187:keymap_custom.c ****      * |Shift   |  /|  .|  ,|  M|  N|  B|  V|  C|  X|  Z|Shift |   |
 188:keymap_custom.c ****      * `-----------------------------------------------------------'
 189:keymap_custom.c ****      *      |Alt |Gui  |          Fn0          |Gui  |Alt|
 190:keymap_custom.c ****      *      `--------------------------------------------'
 191:keymap_custom.c ****      */
 192:keymap_custom.c ****     KEYMAP(MINS,0,   9,   8,   7,   6,   5,   4,   3,   2,   1,   NO,  NO,  NO,  ESC, \
 193:keymap_custom.c ****            BSPC,P,   O,   I,   U,   Y,   T,   R,   E,   W,   Q,   NO,  NO,  TAB, \
 194:keymap_custom.c ****            LCTL,SCLN,L,   K,   J,   H,   G,   F,   D,   S,   A,   RCTL,RCTL, \
 195:keymap_custom.c ****            LSFT,SLSH,DOT, COMM,M,   N,   B,   V,   C,   X,   Z,   RSFT,NO, \
 196:keymap_custom.c ****                 LALT,LGUI,          TRNS,               RGUI,RALT),
 197:keymap_custom.c **** #endif
 198:keymap_custom.c **** };
 199:keymap_custom.c **** 
 200:keymap_custom.c **** 
 201:keymap_custom.c **** 
 202:keymap_custom.c **** /* id for user defined functions */
 203:keymap_custom.c **** enum function_id {
 204:keymap_custom.c ****     UP,
 205:keymap_custom.c ****     DOWN,
 206:keymap_custom.c ****     LEFT,
 207:keymap_custom.c ****     RIGHT,
 208:keymap_custom.c **** 
 209:keymap_custom.c ****     BCKSPC,
 210:keymap_custom.c ****     DEL_WORD,
 211:keymap_custom.c ****     FWD_DEL,
 212:keymap_custom.c **** 
 213:keymap_custom.c ****     END_WORD,
 214:keymap_custom.c ****     BEGIN_WORD,
 215:keymap_custom.c ****     END_LINE,
 216:keymap_custom.c ****     BEGIN_LINE,
 217:keymap_custom.c ****     // LSHIFT_LPAREN,
 218:keymap_custom.c **** };
 219:keymap_custom.c **** 
 220:keymap_custom.c **** enum macro_id {
 221:keymap_custom.c ****     HELLO,
 222:keymap_custom.c ****     VOLUP,
 223:keymap_custom.c ****     ALT_TAB,
 224:keymap_custom.c ****     ALT_TILDE,
 225:keymap_custom.c **** };
 226:keymap_custom.c **** 
 227:keymap_custom.c **** 
 228:keymap_custom.c **** /*
 229:keymap_custom.c ****  * Fn action definition
 230:keymap_custom.c ****  */
 231:keymap_custom.c **** #ifdef KEYMAP_SECTION_ENABLE
 232:keymap_custom.c **** const action_t fn_actions[] __attribute__ ((section (".keymap.fn_actions"))) = {
 233:keymap_custom.c **** #else
 234:keymap_custom.c **** const action_t fn_actions[] PROGMEM = {
 235:keymap_custom.c **** #endif
 236:keymap_custom.c ****     [0] = ACTION_DEFAULT_LAYER_SET(0),                // Default layer(not used)
 237:keymap_custom.c ****     [1] = ACTION_LAYER_MODS(1, MOD_LGUI),             // Cursor layer with Slash* /*KC_SLASH*/
 238:keymap_custom.c ****     [2] = ACTION_LAYER_MODS(2, MOD_LCTL),             // Cursor layer with Slash* /*KC_SLASH*/
 239:keymap_custom.c ****     // [3] = ACTION_LAYER_MOMENTARY(2),
 240:keymap_custom.c ****     [6] = ACTION_LAYER_MOMENTARY(6),                 // HHKB layer(toggle with 5 taps)
 241:keymap_custom.c ****     // [4] = ACTION_MACRO(ALT_TILDE),                    // Macro: CMD + Tilde
 242:keymap_custom.c **** 
 243:keymap_custom.c ****     [10] = ACTION_FUNCTION(LEFT),
 244:keymap_custom.c ****     [11] = ACTION_FUNCTION(DOWN),
 245:keymap_custom.c ****     [12] = ACTION_FUNCTION(UP),
 246:keymap_custom.c ****     [13] = ACTION_FUNCTION(RIGHT),
 247:keymap_custom.c **** 
 248:keymap_custom.c ****     [14] = ACTION_FUNCTION(BCKSPC),
 249:keymap_custom.c ****     [15] = ACTION_FUNCTION(DEL_WORD),
 250:keymap_custom.c ****     [16] = ACTION_FUNCTION(FWD_DEL),
 251:keymap_custom.c **** 
 252:keymap_custom.c ****     [17] = ACTION_FUNCTION(END_WORD),
 253:keymap_custom.c ****     [18] = ACTION_FUNCTION(BEGIN_WORD),
 254:keymap_custom.c ****     [19] = ACTION_FUNCTION(END_LINE),
 255:keymap_custom.c ****     [20] = ACTION_FUNCTION(BEGIN_LINE)
 256:keymap_custom.c **** 
 257:keymap_custom.c ****     // [3] = ACTION_LAYER_TAP_KEY(3, KC_SCLN),           // Mousekey layer with Semicolon*
 258:keymap_custom.c ****     // [4] = ACTION_LAYER_TAP_KEY(4, KC_SPC),            // Mousekey layer with Space
 259:keymap_custom.c ****    //  [5] = ACTION_LAYER_MOMENTARY(4),                  // Mousekey layer(IJKL)
 260:keymap_custom.c ****    //  [6] = ACTION_MODS_TAP_KEY(MOD_RCTL, KC_ENT),      // RControl with tap Enter
 261:keymap_custom.c ****    //  [7] = ACTION_MODS_ONESHOT(MOD_LSFT),              // Oneshot Shift
 262:keymap_custom.c ****    //  [8] = ACTION_MACRO(ALT_TAB),                      // Application switching
 263:keymap_custom.c ****    //  [9] = ACTION_MODS_KEY(MOD_LALT, KC_LEFT),
 264:keymap_custom.c ****    // [10] = ACTION_MODS_KEY(MOD_LALT, KC_RIGHT),
 265:keymap_custom.c **** 
 266:keymap_custom.c **** //  [x] = ACTION_LMOD_TAP_KEY(KC_LCTL, KC_BSPC),        // LControl with tap Backspace
 267:keymap_custom.c **** //  [x] = ACTION_LMOD_TAP_KEY(KC_LCTL, KC_ESC),         // LControl with tap Esc
 268:keymap_custom.c **** //  [x] = ACTION_FUNCTION_TAP(LSHIFT_LPAREN),           // Function: LShift with tap '('
 269:keymap_custom.c ****  // [x] = ACTION_MACRO(HELLO),                          // Macro: say hello
 270:keymap_custom.c **** //  [x] = ACTION_MACRO(VOLUP),                          // Macro: media key
 271:keymap_custom.c **** };
 272:keymap_custom.c **** 
 273:keymap_custom.c **** 
 274:keymap_custom.c **** /*
 275:keymap_custom.c ****  * Macro definition
 276:keymap_custom.c ****  */
 277:keymap_custom.c **** const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
 278:keymap_custom.c **** {
  16               		.loc 1 278 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 FC01      		movw r30,r24
 279:keymap_custom.c ****     switch (id) {
  24               		.loc 1 279 0
  25 0002 6130      		cpi r22,lo8(1)
  26 0004 01F0      		breq .L3
  27 0006 00F0      		brlo .L4
  28 0008 6230      		cpi r22,lo8(2)
  29 000a 01F0      		breq .L5
  30 000c 6330      		cpi r22,lo8(3)
  31 000e 01F0      		breq .L6
  32 0010 00C0      		rjmp .L9
  33               	.L4:
 280:keymap_custom.c ****         case HELLO:
 281:keymap_custom.c ****             return (record->event.pressed ?
 282:keymap_custom.c ****                     MACRO( I(0), T(H), T(E), T(L), T(L), W(255), T(O), END ) :
  34               		.loc 1 282 0
  35 0012 8281      		ldd r24,Z+2
  36               	.LVL1:
  37 0014 8823      		tst r24
  38 0016 01F0      		breq .L9
  39 0018 80E0      		ldi r24,lo8(__m.2320)
  40 001a 90E0      		ldi r25,hi8(__m.2320)
  41 001c 0895      		ret
  42               	.LVL2:
  43               	.L3:
 283:keymap_custom.c ****                     MACRO_NONE );
 284:keymap_custom.c ****         case VOLUP:
 285:keymap_custom.c ****             return (record->event.pressed ?
 286:keymap_custom.c ****                     MACRO( D(VOLU), U(VOLU), END ) :
  44               		.loc 1 286 0
  45 001e 8281      		ldd r24,Z+2
  46               	.LVL3:
  47 0020 8823      		tst r24
  48 0022 01F0      		breq .L9
  49 0024 80E0      		ldi r24,lo8(__m.2323)
  50 0026 90E0      		ldi r25,hi8(__m.2323)
  51 0028 0895      		ret
  52               	.LVL4:
  53               	.L5:
 287:keymap_custom.c ****                     MACRO_NONE );
 288:keymap_custom.c ****         case ALT_TAB:
 289:keymap_custom.c ****             return (record->event.pressed ?
 290:keymap_custom.c ****                     MACRO( D(LALT), D(TAB), END ) :
  54               		.loc 1 290 0
  55 002a 8281      		ldd r24,Z+2
  56               	.LVL5:
  57 002c 8823      		tst r24
  58 002e 01F0      		breq .L10
  59 0030 80E0      		ldi r24,lo8(__m.2326)
  60 0032 90E0      		ldi r25,hi8(__m.2326)
  61 0034 0895      		ret
  62               	.LVL6:
  63               	.L6:
 291:keymap_custom.c ****                     MACRO( U(TAB), END ));
 292:keymap_custom.c ****         case ALT_TILDE:
 293:keymap_custom.c ****             return (record->event.pressed ?
 294:keymap_custom.c ****                     MACRO( D(LGUI), D(GRV), END ) :
  64               		.loc 1 294 0
  65 0036 8281      		ldd r24,Z+2
  66               	.LVL7:
  67 0038 8823      		tst r24
  68 003a 01F0      		breq .L11
  69 003c 80E0      		ldi r24,lo8(__m.2331)
  70 003e 90E0      		ldi r25,hi8(__m.2331)
  71 0040 0895      		ret
  72               	.L9:
 282:keymap_custom.c ****                     MACRO( I(0), T(H), T(E), T(L), T(L), W(255), T(O), END ) :
  73               		.loc 1 282 0
  74 0042 80E0      		ldi r24,0
  75 0044 90E0      		ldi r25,0
  76 0046 0895      		ret
  77               	.L10:
 290:keymap_custom.c ****                     MACRO( D(LALT), D(TAB), END ) :
  78               		.loc 1 290 0
  79 0048 80E0      		ldi r24,lo8(__m.2328)
  80 004a 90E0      		ldi r25,hi8(__m.2328)
  81 004c 0895      		ret
  82               	.L11:
  83               		.loc 1 294 0
  84 004e 80E0      		ldi r24,lo8(__m.2333)
  85 0050 90E0      		ldi r25,hi8(__m.2333)
 295:keymap_custom.c ****                     MACRO( U(GRV), END ));
 296:keymap_custom.c ****     }
 297:keymap_custom.c ****     return MACRO_NONE;
 298:keymap_custom.c **** }
  86               		.loc 1 298 0
  87 0052 0895      		ret
  88               		.cfi_endproc
  89               	.LFE4:
  91               		.section	.text.action_function,"ax",@progbits
  92               	.global	action_function
  94               	action_function:
  95               	.LFB5:
 299:keymap_custom.c **** 
 300:keymap_custom.c **** 
 301:keymap_custom.c **** 
 302:keymap_custom.c **** /*
 303:keymap_custom.c ****  * user defined action function
 304:keymap_custom.c ****  */
 305:keymap_custom.c **** void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
 306:keymap_custom.c **** {
  96               		.loc 1 306 0
  97               		.cfi_startproc
  98               	.LVL8:
  99 0000 CF93      		push r28
 100               	.LCFI0:
 101               		.cfi_def_cfa_offset 3
 102               		.cfi_offset 28, -2
 103 0002 DF93      		push r29
 104               	.LCFI1:
 105               		.cfi_def_cfa_offset 4
 106               		.cfi_offset 29, -3
 107               	/* prologue: function */
 108               	/* frame size = 0 */
 109               	/* stack size = 2 */
 110               	.L__stack_usage = 2
 111 0004 EC01      		movw r28,r24
 307:keymap_custom.c **** // #   define MODS_GUI_MASK   (MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI))
 308:keymap_custom.c **** // #   define MODS_ALT_MASK   (MOD_BIT(KC_LALT)|MOD_BIT(KC_RALT))
 309:keymap_custom.c **** #   define MODS_CTRL_MASK   (MOD_BIT(KC_LCTRL)|MOD_BIT(KC_RCTRL))
 310:keymap_custom.c **** // #   define MODS_SFT_MASK   (MOD_BIT(KC_LSFT)|MOD_BIT(KC_RSFT))
 311:keymap_custom.c ****     // static uint8_t gui_mod;
 312:keymap_custom.c ****     // static uint8_t alt_mod;
 313:keymap_custom.c ****     static uint8_t ctrl_mod;
 314:keymap_custom.c ****     // static uint8_t sft_mod;
 315:keymap_custom.c ****     // if (record->event.pressed) dprint("P"); else dprint("R");
 316:keymap_custom.c ****     // dprintf("%d", record->tap.count);
 317:keymap_custom.c ****     // if (record->tap.interrupted) dprint("i");
 318:keymap_custom.c ****     // dprint("\n");
 319:keymap_custom.c **** 
 320:keymap_custom.c ****     switch (id) {
 112               		.loc 1 320 0
 113 0006 462F      		mov r20,r22
 114               	.LVL9:
 115 0008 50E0      		ldi r21,0
 116 000a 4B30      		cpi r20,11
 117 000c 5105      		cpc r21,__zero_reg__
 118 000e 00F0      		brlo .+2
 119 0010 00C0      		rjmp .L14
 120 0012 FA01      		movw r30,r20
 121 0014 E050      		subi r30,lo8(-(gs(.L17)))
 122 0016 F040      		sbci r31,hi8(-(gs(.L17)))
 123 0018 0C94 0000 		jmp __tablejump2__
 124               	.LVL10:
 125               		.section	.progmem.gcc_sw_table.action_function,"a",@progbits
 126               		.p2align	1
 127               	.L17:
 128 0000 0000      		.word gs(.L16)
 129 0002 0000      		.word gs(.L18)
 130 0004 0000      		.word gs(.L19)
 131 0006 0000      		.word gs(.L20)
 132 0008 0000      		.word gs(.L21)
 133 000a 0000      		.word gs(.L22)
 134 000c 0000      		.word gs(.L23)
 135 000e 0000      		.word gs(.L24)
 136 0010 0000      		.word gs(.L25)
 137 0012 0000      		.word gs(.L26)
 138 0014 0000      		.word gs(.L27)
 139               		.section	.text.action_function
 140               	.L16:
 321:keymap_custom.c ****         // ****************************************
 322:keymap_custom.c ****         // VIM: LEFT, DOWN, UP, RIGHT
 323:keymap_custom.c ****         // ****************************************
 324:keymap_custom.c ****         case UP:
 325:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 141               		.loc 1 325 0
 142 001c 0E94 0000 		call get_mods
 143               	.LVL11:
 144 0020 8171      		andi r24,lo8(17)
 145 0022 8093 0000 		sts ctrl_mod.2340,r24
 326:keymap_custom.c ****             if(record->event.pressed) {
 146               		.loc 1 326 0
 147 0026 9A81      		ldd r25,Y+2
 148 0028 9923      		tst r25
 149 002a 01F0      		breq .L28
 327:keymap_custom.c ****                 del_mods(ctrl_mod);
 150               		.loc 1 327 0
 151 002c 0E94 0000 		call del_mods
 152               	.LVL12:
 328:keymap_custom.c ****                 add_key(KC_UP);
 153               		.loc 1 328 0
 154 0030 82E5      		ldi r24,lo8(82)
 155 0032 00C0      		rjmp .L39
 156               	.L28:
 329:keymap_custom.c ****                 send_keyboard_report();
 330:keymap_custom.c ****                 add_mods(ctrl_mod);
 331:keymap_custom.c ****             } else {
 332:keymap_custom.c ****                 del_key(KC_UP);
 157               		.loc 1 332 0
 158 0034 82E5      		ldi r24,lo8(82)
 159 0036 00C0      		rjmp .L40
 160               	.LVL13:
 161               	.L18:
 333:keymap_custom.c ****                 register_mods(ctrl_mod);
 334:keymap_custom.c ****                 send_keyboard_report();
 335:keymap_custom.c ****             }
 336:keymap_custom.c ****             return;
 337:keymap_custom.c **** 
 338:keymap_custom.c ****         case DOWN:
 339:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 162               		.loc 1 339 0
 163 0038 0E94 0000 		call get_mods
 164               	.LVL14:
 165 003c 8171      		andi r24,lo8(17)
 166 003e 8093 0000 		sts ctrl_mod.2340,r24
 340:keymap_custom.c ****             if(record->event.pressed) {
 167               		.loc 1 340 0
 168 0042 9A81      		ldd r25,Y+2
 169 0044 9923      		tst r25
 170 0046 01F0      		breq .L29
 341:keymap_custom.c ****                 del_mods(ctrl_mod);
 171               		.loc 1 341 0
 172 0048 0E94 0000 		call del_mods
 173               	.LVL15:
 342:keymap_custom.c ****                 add_key(KC_DOWN);
 174               		.loc 1 342 0
 175 004c 81E5      		ldi r24,lo8(81)
 176               	.L39:
 177 004e 0E94 0000 		call add_key
 178               	.LVL16:
 343:keymap_custom.c ****                 send_keyboard_report();
 179               		.loc 1 343 0
 180 0052 0E94 0000 		call send_keyboard_report
 181               	.LVL17:
 182               	.L41:
 344:keymap_custom.c ****                 add_mods(ctrl_mod);
 183               		.loc 1 344 0
 184 0056 8091 0000 		lds r24,ctrl_mod.2340
 185               	/* epilogue start */
 345:keymap_custom.c ****             } else {
 346:keymap_custom.c ****                 del_key(KC_DOWN);
 347:keymap_custom.c ****                 register_mods(ctrl_mod);
 348:keymap_custom.c ****                 send_keyboard_report();
 349:keymap_custom.c ****             }
 350:keymap_custom.c ****             return;
 351:keymap_custom.c **** 
 352:keymap_custom.c ****         case LEFT:
 353:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 354:keymap_custom.c ****             if(record->event.pressed) {
 355:keymap_custom.c ****                 del_mods(ctrl_mod);
 356:keymap_custom.c ****                 add_key(KC_LEFT);
 357:keymap_custom.c ****                 send_keyboard_report();
 358:keymap_custom.c ****                 add_mods(ctrl_mod);
 359:keymap_custom.c ****             } else {
 360:keymap_custom.c ****                 del_key(KC_LEFT);
 361:keymap_custom.c ****                 register_mods(ctrl_mod);
 362:keymap_custom.c ****                 send_keyboard_report();
 363:keymap_custom.c ****             }
 364:keymap_custom.c ****             return;
 365:keymap_custom.c **** 
 366:keymap_custom.c ****         case RIGHT:
 367:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 368:keymap_custom.c ****             if(record->event.pressed) {
 369:keymap_custom.c ****                 del_mods(ctrl_mod);
 370:keymap_custom.c ****                 add_key(KC_RIGHT);
 371:keymap_custom.c ****                 send_keyboard_report();
 372:keymap_custom.c ****                 add_mods(ctrl_mod);
 373:keymap_custom.c ****             } else {
 374:keymap_custom.c ****                 del_key(KC_RIGHT);
 375:keymap_custom.c ****                 register_mods(ctrl_mod);
 376:keymap_custom.c ****                 send_keyboard_report();
 377:keymap_custom.c ****             }
 378:keymap_custom.c ****             return;
 379:keymap_custom.c **** 
 380:keymap_custom.c ****         // ****************************************
 381:keymap_custom.c ****         // BACKSPACE, DELETE_WORD, FORWARD_DELETE
 382:keymap_custom.c ****         // ****************************************
 383:keymap_custom.c ****         case BCKSPC:
 384:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 385:keymap_custom.c ****             if(record->event.pressed) {
 386:keymap_custom.c ****                 del_mods(ctrl_mod);
 387:keymap_custom.c ****                 add_key(KC_BSPC);
 388:keymap_custom.c ****                 send_keyboard_report();
 389:keymap_custom.c ****                 add_mods(ctrl_mod);
 390:keymap_custom.c ****             } else {
 391:keymap_custom.c ****                 del_key(KC_BSPC);
 392:keymap_custom.c ****                 register_mods(ctrl_mod);
 393:keymap_custom.c ****                 send_keyboard_report();
 394:keymap_custom.c ****             }
 395:keymap_custom.c ****             return;
 396:keymap_custom.c **** 
 397:keymap_custom.c ****         case DEL_WORD:
 398:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 399:keymap_custom.c ****             if(record->event.pressed) {
 400:keymap_custom.c ****                 del_mods(ctrl_mod);
 401:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 402:keymap_custom.c ****                 add_key(KC_BSPC);
 403:keymap_custom.c ****                 send_keyboard_report();
 404:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LALT));
 405:keymap_custom.c ****                 add_mods(ctrl_mod);
 406:keymap_custom.c ****             } else {
 407:keymap_custom.c ****                 del_key(KC_BSPC);
 408:keymap_custom.c ****                 register_mods(ctrl_mod);
 409:keymap_custom.c ****                 send_keyboard_report();
 410:keymap_custom.c ****             }
 411:keymap_custom.c ****             return;
 412:keymap_custom.c **** 
 413:keymap_custom.c ****         case FWD_DEL:
 414:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 415:keymap_custom.c ****             if(record->event.pressed) {
 416:keymap_custom.c ****                 del_mods(ctrl_mod);
 417:keymap_custom.c ****                 add_key(KC_DEL);
 418:keymap_custom.c ****                 send_keyboard_report();
 419:keymap_custom.c ****                 add_mods(ctrl_mod);
 420:keymap_custom.c ****             } else {
 421:keymap_custom.c ****                 del_key(KC_DEL);
 422:keymap_custom.c ****                 register_mods(ctrl_mod);
 423:keymap_custom.c ****                 send_keyboard_report();
 424:keymap_custom.c ****             }
 425:keymap_custom.c ****             return;
 426:keymap_custom.c **** 
 427:keymap_custom.c ****         // ****************************************
 428:keymap_custom.c ****         // END_WORD, BEGIN_WORD, END_LINE, BEGIN_LINE
 429:keymap_custom.c ****         // ****************************************
 430:keymap_custom.c **** 
 431:keymap_custom.c ****         case END_WORD:
 432:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 433:keymap_custom.c ****             if(record->event.pressed) {
 434:keymap_custom.c ****                 del_mods(ctrl_mod);
 435:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 436:keymap_custom.c ****                 add_key(KC_RIGHT);
 437:keymap_custom.c ****                 send_keyboard_report();
 438:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LALT));
 439:keymap_custom.c ****                 add_mods(ctrl_mod);
 440:keymap_custom.c ****             } else {
 441:keymap_custom.c ****                 del_key(KC_RIGHT);
 442:keymap_custom.c ****                 register_mods(ctrl_mod);
 443:keymap_custom.c ****                 send_keyboard_report();
 444:keymap_custom.c ****             }
 445:keymap_custom.c ****             return;
 446:keymap_custom.c **** 
 447:keymap_custom.c ****         case BEGIN_WORD:
 448:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 449:keymap_custom.c ****             if(record->event.pressed) {
 450:keymap_custom.c ****                 del_mods(ctrl_mod);
 451:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 452:keymap_custom.c ****                 add_key(KC_LEFT);
 453:keymap_custom.c ****                 send_keyboard_report();
 454:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LALT));
 455:keymap_custom.c ****                 add_mods(ctrl_mod);
 456:keymap_custom.c ****             } else {
 457:keymap_custom.c ****                 del_key(KC_LEFT);
 458:keymap_custom.c ****                 register_mods(ctrl_mod);
 459:keymap_custom.c ****                 send_keyboard_report();
 460:keymap_custom.c ****             }
 461:keymap_custom.c ****             return;
 462:keymap_custom.c **** 
 463:keymap_custom.c ****         case END_LINE:
 464:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 465:keymap_custom.c ****             if(record->event.pressed) {
 466:keymap_custom.c ****                 del_mods(ctrl_mod);
 467:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LGUI));
 468:keymap_custom.c ****                 add_key(KC_RIGHT);
 469:keymap_custom.c ****                 send_keyboard_report();
 470:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LGUI));
 471:keymap_custom.c ****                 add_mods(ctrl_mod);
 472:keymap_custom.c ****             } else {
 473:keymap_custom.c ****                 del_key(KC_RIGHT);
 474:keymap_custom.c ****                 register_mods(ctrl_mod);
 475:keymap_custom.c ****                 send_keyboard_report();
 476:keymap_custom.c ****             }
 477:keymap_custom.c ****             return;
 478:keymap_custom.c **** 
 479:keymap_custom.c ****         case BEGIN_LINE:
 480:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 481:keymap_custom.c ****             if(record->event.pressed) {
 482:keymap_custom.c ****                 del_mods(ctrl_mod);
 483:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LGUI));
 484:keymap_custom.c ****                 add_key(KC_LEFT);
 485:keymap_custom.c ****                 send_keyboard_report();
 486:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LGUI));
 487:keymap_custom.c ****                 add_mods(ctrl_mod);
 488:keymap_custom.c ****             } else {
 489:keymap_custom.c ****                 del_key(KC_LEFT);
 490:keymap_custom.c ****                 register_mods(ctrl_mod);
 491:keymap_custom.c ****                 send_keyboard_report();
 492:keymap_custom.c ****             }
 493:keymap_custom.c ****             return;
 494:keymap_custom.c **** 
 495:keymap_custom.c ****         // case LSHIFT_LPAREN:
 496:keymap_custom.c ****         //     // Shift parentheses example: LShft + tap '('
 497:keymap_custom.c ****         //     // http://stevelosh.com/blog/2012/10/a-modern-space-cadet/#shift-parentheses
 498:keymap_custom.c ****         //     // http://geekhack.org/index.php?topic=41989.msg1304899#msg1304899
 499:keymap_custom.c ****         //     if (record->event.pressed) {
 500:keymap_custom.c ****         //         if (record->tap.count > 0 && !record->tap.interrupted) {
 501:keymap_custom.c ****         //             if (record->tap.interrupted) {
 502:keymap_custom.c ****         //                 dprint("tap interrupted\n");
 503:keymap_custom.c ****         //                 register_mods(MOD_BIT(KC_LSHIFT));
 504:keymap_custom.c ****         //             }
 505:keymap_custom.c ****         //         } else {
 506:keymap_custom.c ****         //             register_mods(MOD_BIT(KC_LSHIFT));
 507:keymap_custom.c ****         //         }
 508:keymap_custom.c ****         //     } else {
 509:keymap_custom.c ****         //         if (record->tap.count > 0 && !(record->tap.interrupted)) {
 510:keymap_custom.c ****         //             add_weak_mods(MOD_BIT(KC_LSHIFT));
 511:keymap_custom.c ****         //             send_keyboard_report();
 512:keymap_custom.c ****         //             register_code(KC_9);
 513:keymap_custom.c ****         //             unregister_code(KC_9);
 514:keymap_custom.c ****         //             del_weak_mods(MOD_BIT(KC_LSHIFT));
 515:keymap_custom.c ****         //             send_keyboard_report();
 516:keymap_custom.c ****         //             record->tap.count = 0;  // ad hoc: cancel tap
 517:keymap_custom.c ****         //         } else {
 518:keymap_custom.c ****         //             unregister_mods(MOD_BIT(KC_LSHIFT));
 519:keymap_custom.c ****         //         }
 520:keymap_custom.c ****         //     }
 521:keymap_custom.c ****         //     break;
 522:keymap_custom.c ****     }
 523:keymap_custom.c **** }
 186               		.loc 1 523 0
 187 005a DF91      		pop r29
 188 005c CF91      		pop r28
 189               	.LVL18:
 344:keymap_custom.c ****                 add_mods(ctrl_mod);
 190               		.loc 1 344 0
 191 005e 0C94 0000 		jmp add_mods
 192               	.LVL19:
 193               	.L29:
 346:keymap_custom.c ****                 del_key(KC_DOWN);
 194               		.loc 1 346 0
 195 0062 81E5      		ldi r24,lo8(81)
 196 0064 00C0      		rjmp .L40
 197               	.LVL20:
 198               	.L19:
 353:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 199               		.loc 1 353 0
 200 0066 0E94 0000 		call get_mods
 201               	.LVL21:
 202 006a 8171      		andi r24,lo8(17)
 203 006c 8093 0000 		sts ctrl_mod.2340,r24
 354:keymap_custom.c ****             if(record->event.pressed) {
 204               		.loc 1 354 0
 205 0070 9A81      		ldd r25,Y+2
 206 0072 9923      		tst r25
 207 0074 01F4      		brne .+2
 208 0076 00C0      		rjmp .L38
 355:keymap_custom.c ****                 del_mods(ctrl_mod);
 209               		.loc 1 355 0
 210 0078 0E94 0000 		call del_mods
 211               	.LVL22:
 356:keymap_custom.c ****                 add_key(KC_LEFT);
 212               		.loc 1 356 0
 213 007c 80E5      		ldi r24,lo8(80)
 214 007e 00C0      		rjmp .L39
 215               	.LVL23:
 216               	.L20:
 367:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 217               		.loc 1 367 0
 218 0080 0E94 0000 		call get_mods
 219               	.LVL24:
 220 0084 8171      		andi r24,lo8(17)
 221 0086 8093 0000 		sts ctrl_mod.2340,r24
 368:keymap_custom.c ****             if(record->event.pressed) {
 222               		.loc 1 368 0
 223 008a 9A81      		ldd r25,Y+2
 224 008c 9923      		tst r25
 225 008e 01F4      		brne .+2
 226 0090 00C0      		rjmp .L37
 369:keymap_custom.c ****                 del_mods(ctrl_mod);
 227               		.loc 1 369 0
 228 0092 0E94 0000 		call del_mods
 229               	.LVL25:
 370:keymap_custom.c ****                 add_key(KC_RIGHT);
 230               		.loc 1 370 0
 231 0096 8FE4      		ldi r24,lo8(79)
 232 0098 00C0      		rjmp .L39
 233               	.LVL26:
 234               	.L21:
 384:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 235               		.loc 1 384 0
 236 009a 0E94 0000 		call get_mods
 237               	.LVL27:
 238 009e 8171      		andi r24,lo8(17)
 239 00a0 8093 0000 		sts ctrl_mod.2340,r24
 385:keymap_custom.c ****             if(record->event.pressed) {
 240               		.loc 1 385 0
 241 00a4 9A81      		ldd r25,Y+2
 242 00a6 9923      		tst r25
 243 00a8 01F0      		breq .L33
 386:keymap_custom.c ****                 del_mods(ctrl_mod);
 244               		.loc 1 386 0
 245 00aa 0E94 0000 		call del_mods
 246               	.LVL28:
 387:keymap_custom.c ****                 add_key(KC_BSPC);
 247               		.loc 1 387 0
 248 00ae 8AE2      		ldi r24,lo8(42)
 249 00b0 00C0      		rjmp .L39
 250               	.LVL29:
 251               	.L22:
 398:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 252               		.loc 1 398 0
 253 00b2 0E94 0000 		call get_mods
 254               	.LVL30:
 255 00b6 8171      		andi r24,lo8(17)
 256 00b8 8093 0000 		sts ctrl_mod.2340,r24
 399:keymap_custom.c ****             if(record->event.pressed) {
 257               		.loc 1 399 0
 258 00bc 9A81      		ldd r25,Y+2
 259 00be 9923      		tst r25
 260 00c0 01F0      		breq .L33
 400:keymap_custom.c ****                 del_mods(ctrl_mod);
 261               		.loc 1 400 0
 262 00c2 0E94 0000 		call del_mods
 263               	.LVL31:
 401:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 264               		.loc 1 401 0
 265 00c6 84E0      		ldi r24,lo8(4)
 266 00c8 0E94 0000 		call add_weak_mods
 267               	.LVL32:
 402:keymap_custom.c ****                 add_key(KC_BSPC);
 268               		.loc 1 402 0
 269 00cc 8AE2      		ldi r24,lo8(42)
 270 00ce 00C0      		rjmp .L44
 271               	.L33:
 407:keymap_custom.c ****                 del_key(KC_BSPC);
 272               		.loc 1 407 0
 273 00d0 8AE2      		ldi r24,lo8(42)
 274 00d2 00C0      		rjmp .L40
 275               	.LVL33:
 276               	.L23:
 414:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 277               		.loc 1 414 0
 278 00d4 0E94 0000 		call get_mods
 279               	.LVL34:
 280 00d8 8171      		andi r24,lo8(17)
 281 00da 8093 0000 		sts ctrl_mod.2340,r24
 415:keymap_custom.c ****             if(record->event.pressed) {
 282               		.loc 1 415 0
 283 00de 9A81      		ldd r25,Y+2
 284 00e0 9923      		tst r25
 285 00e2 01F0      		breq .L34
 416:keymap_custom.c ****                 del_mods(ctrl_mod);
 286               		.loc 1 416 0
 287 00e4 0E94 0000 		call del_mods
 288               	.LVL35:
 417:keymap_custom.c ****                 add_key(KC_DEL);
 289               		.loc 1 417 0
 290 00e8 8CE4      		ldi r24,lo8(76)
 291 00ea 00C0      		rjmp .L39
 292               	.L34:
 421:keymap_custom.c ****                 del_key(KC_DEL);
 293               		.loc 1 421 0
 294 00ec 8CE4      		ldi r24,lo8(76)
 295 00ee 00C0      		rjmp .L40
 296               	.LVL36:
 297               	.L24:
 432:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 298               		.loc 1 432 0
 299 00f0 0E94 0000 		call get_mods
 300               	.LVL37:
 301 00f4 8171      		andi r24,lo8(17)
 302 00f6 8093 0000 		sts ctrl_mod.2340,r24
 433:keymap_custom.c ****             if(record->event.pressed) {
 303               		.loc 1 433 0
 304 00fa 9A81      		ldd r25,Y+2
 305 00fc 9923      		tst r25
 306 00fe 01F0      		breq .L37
 434:keymap_custom.c ****                 del_mods(ctrl_mod);
 307               		.loc 1 434 0
 308 0100 0E94 0000 		call del_mods
 309               	.LVL38:
 435:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 310               		.loc 1 435 0
 311 0104 84E0      		ldi r24,lo8(4)
 312 0106 0E94 0000 		call add_weak_mods
 313               	.LVL39:
 436:keymap_custom.c ****                 add_key(KC_RIGHT);
 314               		.loc 1 436 0
 315 010a 8FE4      		ldi r24,lo8(79)
 316               	.L44:
 317 010c 0E94 0000 		call add_key
 318               	.LVL40:
 437:keymap_custom.c ****                 send_keyboard_report();
 319               		.loc 1 437 0
 320 0110 0E94 0000 		call send_keyboard_report
 321               	.LVL41:
 438:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LALT));
 322               		.loc 1 438 0
 323 0114 84E0      		ldi r24,lo8(4)
 324 0116 00C0      		rjmp .L43
 325               	.LVL42:
 326               	.L25:
 448:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 327               		.loc 1 448 0
 328 0118 0E94 0000 		call get_mods
 329               	.LVL43:
 330 011c 8171      		andi r24,lo8(17)
 331 011e 8093 0000 		sts ctrl_mod.2340,r24
 449:keymap_custom.c ****             if(record->event.pressed) {
 332               		.loc 1 449 0
 333 0122 9A81      		ldd r25,Y+2
 334 0124 9923      		tst r25
 335 0126 01F0      		breq .L38
 450:keymap_custom.c ****                 del_mods(ctrl_mod);
 336               		.loc 1 450 0
 337 0128 0E94 0000 		call del_mods
 338               	.LVL44:
 451:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LALT));
 339               		.loc 1 451 0
 340 012c 84E0      		ldi r24,lo8(4)
 341 012e 0E94 0000 		call add_weak_mods
 342               	.LVL45:
 452:keymap_custom.c ****                 add_key(KC_LEFT);
 343               		.loc 1 452 0
 344 0132 80E5      		ldi r24,lo8(80)
 345 0134 00C0      		rjmp .L44
 346               	.LVL46:
 347               	.L26:
 464:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 348               		.loc 1 464 0
 349 0136 0E94 0000 		call get_mods
 350               	.LVL47:
 351 013a 8171      		andi r24,lo8(17)
 352 013c 8093 0000 		sts ctrl_mod.2340,r24
 465:keymap_custom.c ****             if(record->event.pressed) {
 353               		.loc 1 465 0
 354 0140 9A81      		ldd r25,Y+2
 355 0142 9923      		tst r25
 356 0144 01F0      		breq .L37
 466:keymap_custom.c ****                 del_mods(ctrl_mod);
 357               		.loc 1 466 0
 358 0146 0E94 0000 		call del_mods
 359               	.LVL48:
 467:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LGUI));
 360               		.loc 1 467 0
 361 014a 88E0      		ldi r24,lo8(8)
 362 014c 0E94 0000 		call add_weak_mods
 363               	.LVL49:
 468:keymap_custom.c ****                 add_key(KC_RIGHT);
 364               		.loc 1 468 0
 365 0150 8FE4      		ldi r24,lo8(79)
 366 0152 00C0      		rjmp .L42
 367               	.L37:
 473:keymap_custom.c ****                 del_key(KC_RIGHT);
 368               		.loc 1 473 0
 369 0154 8FE4      		ldi r24,lo8(79)
 370 0156 00C0      		rjmp .L40
 371               	.LVL50:
 372               	.L27:
 480:keymap_custom.c ****             ctrl_mod = get_mods()&MODS_CTRL_MASK;
 373               		.loc 1 480 0
 374 0158 0E94 0000 		call get_mods
 375               	.LVL51:
 376 015c 8171      		andi r24,lo8(17)
 377 015e 8093 0000 		sts ctrl_mod.2340,r24
 481:keymap_custom.c ****             if(record->event.pressed) {
 378               		.loc 1 481 0
 379 0162 9A81      		ldd r25,Y+2
 380 0164 9923      		tst r25
 381 0166 01F0      		breq .L38
 482:keymap_custom.c ****                 del_mods(ctrl_mod);
 382               		.loc 1 482 0
 383 0168 0E94 0000 		call del_mods
 384               	.LVL52:
 483:keymap_custom.c ****                 add_weak_mods(MOD_BIT(KC_LGUI));
 385               		.loc 1 483 0
 386 016c 88E0      		ldi r24,lo8(8)
 387 016e 0E94 0000 		call add_weak_mods
 388               	.LVL53:
 484:keymap_custom.c ****                 add_key(KC_LEFT);
 389               		.loc 1 484 0
 390 0172 80E5      		ldi r24,lo8(80)
 391               	.L42:
 392 0174 0E94 0000 		call add_key
 393               	.LVL54:
 485:keymap_custom.c ****                 send_keyboard_report();
 394               		.loc 1 485 0
 395 0178 0E94 0000 		call send_keyboard_report
 396               	.LVL55:
 486:keymap_custom.c ****                 del_weak_mods(MOD_BIT(KC_LGUI));
 397               		.loc 1 486 0
 398 017c 88E0      		ldi r24,lo8(8)
 399               	.L43:
 400 017e 0E94 0000 		call del_weak_mods
 401               	.LVL56:
 402 0182 00C0      		rjmp .L41
 403               	.L38:
 489:keymap_custom.c ****                 del_key(KC_LEFT);
 404               		.loc 1 489 0
 405 0184 80E5      		ldi r24,lo8(80)
 406               	.L40:
 407 0186 0E94 0000 		call del_key
 408               	.LVL57:
 490:keymap_custom.c ****                 register_mods(ctrl_mod);
 409               		.loc 1 490 0
 410 018a 8091 0000 		lds r24,ctrl_mod.2340
 411 018e 0E94 0000 		call register_mods
 412               	.LVL58:
 413               	/* epilogue start */
 414               		.loc 1 523 0
 415 0192 DF91      		pop r29
 416 0194 CF91      		pop r28
 417               	.LVL59:
 491:keymap_custom.c ****                 send_keyboard_report();
 418               		.loc 1 491 0
 419 0196 0C94 0000 		jmp send_keyboard_report
 420               	.LVL60:
 421               	.L14:
 422               	/* epilogue start */
 423               		.loc 1 523 0
 424 019a DF91      		pop r29
 425 019c CF91      		pop r28
 426 019e 0895      		ret
 427               		.cfi_endproc
 428               	.LFE5:
 430               		.section	.bss.ctrl_mod.2340,"aw",@nobits
 433               	ctrl_mod.2340:
 434 0000 00        		.zero	1
 435               		.section	.progmem.data.__m.2333,"a",@progbits
 438               	__m.2333:
 439 0000 02        		.byte	2
 440 0001 35        		.byte	53
 441 0002 00        		.byte	0
 442               		.section	.progmem.data.__m.2331,"a",@progbits
 445               	__m.2331:
 446 0000 01        		.byte	1
 447 0001 E3        		.byte	-29
 448 0002 01        		.byte	1
 449 0003 35        		.byte	53
 450 0004 00        		.byte	0
 451               		.section	.progmem.data.__m.2328,"a",@progbits
 454               	__m.2328:
 455 0000 02        		.byte	2
 456 0001 2B        		.byte	43
 457 0002 00        		.byte	0
 458               		.section	.progmem.data.__m.2326,"a",@progbits
 461               	__m.2326:
 462 0000 01        		.byte	1
 463 0001 E2        		.byte	-30
 464 0002 01        		.byte	1
 465 0003 2B        		.byte	43
 466 0004 00        		.byte	0
 467               		.section	.progmem.data.__m.2323,"a",@progbits
 470               	__m.2323:
 471 0000 01        		.byte	1
 472 0001 A9        		.byte	-87
 473 0002 02        		.byte	2
 474 0003 A9        		.byte	-87
 475 0004 00        		.byte	0
 476               		.section	.progmem.data.__m.2320,"a",@progbits
 479               	__m.2320:
 480 0000 75        		.byte	117
 481 0001 00        		.byte	0
 482 0002 01        		.byte	1
 483 0003 0B        		.byte	11
 484 0004 02        		.byte	2
 485 0005 0B        		.byte	11
 486 0006 01        		.byte	1
 487 0007 08        		.byte	8
 488 0008 02        		.byte	2
 489 0009 08        		.byte	8
 490 000a 01        		.byte	1
 491 000b 0F        		.byte	15
 492 000c 02        		.byte	2
 493 000d 0F        		.byte	15
 494 000e 01        		.byte	1
 495 000f 0F        		.byte	15
 496 0010 02        		.byte	2
 497 0011 0F        		.byte	15
 498 0012 74        		.byte	116
 499 0013 FF        		.byte	-1
 500 0014 01        		.byte	1
 501 0015 12        		.byte	18
 502 0016 02        		.byte	2
 503 0017 12        		.byte	18
 504 0018 00        		.byte	0
 505               	.global	fn_actions
 506               		.section	.progmem.data.fn_actions,"a",@progbits
 509               	fn_actions:
 510 0000 018C      		.word	-29695
 511 0002 C8A1      		.word	-24120
 512 0004 C1A2      		.word	-23871
 513 0006 0000 0000 		.zero	6
 513      0000 
 514 000c F1A6      		.word	-22799
 515 000e 0000 0000 		.zero	6
 515      0000 
 516 0014 02F0      		.word	-4094
 517 0016 01F0      		.word	-4095
 518 0018 00F0      		.word	-4096
 519 001a 03F0      		.word	-4093
 520 001c 04F0      		.word	-4092
 521 001e 05F0      		.word	-4091
 522 0020 06F0      		.word	-4090
 523 0022 07F0      		.word	-4089
 524 0024 08F0      		.word	-4088
 525 0026 09F0      		.word	-4087
 526 0028 0AF0      		.word	-4086
 527               	.global	keymaps
 528               		.section	.progmem.data.keymaps,"a",@progbits
 531               	keymaps:
 532 0000 1F        		.byte	31
 533 0001 14        		.byte	20
 534 0002 1A        		.byte	26
 535 0003 16        		.byte	22
 536 0004 04        		.byte	4
 537 0005 1D        		.byte	29
 538 0006 1B        		.byte	27
 539 0007 06        		.byte	6
 540 0008 20        		.byte	32
 541 0009 21        		.byte	33
 542 000a 15        		.byte	21
 543 000b 08        		.byte	8
 544 000c 07        		.byte	7
 545 000d 09        		.byte	9
 546 000e 19        		.byte	25
 547 000f 05        		.byte	5
 548 0010 22        		.byte	34
 549 0011 23        		.byte	35
 550 0012 1C        		.byte	28
 551 0013 17        		.byte	23
 552 0014 0A        		.byte	10
 553 0015 0B        		.byte	11
 554 0016 11        		.byte	17
 555 0017 00        		.byte	0
 556 0018 1E        		.byte	30
 557 0019 29        		.byte	41
 558 001a 2B        		.byte	43
 559 001b C2        		.byte	-62
 560 001c E1        		.byte	-31
 561 001d E2        		.byte	-30
 562 001e C1        		.byte	-63
 563 001f 2C        		.byte	44
 564 0020 24        		.byte	36
 565 0021 25        		.byte	37
 566 0022 18        		.byte	24
 567 0023 0C        		.byte	12
 568 0024 0E        		.byte	14
 569 0025 0D        		.byte	13
 570 0026 10        		.byte	16
 571 0027 00        		.byte	0
 572 0028 31        		.byte	49
 573 0029 35        		.byte	53
 574 002a 2A        		.byte	42
 575 002b 28        		.byte	40
 576 002c C6        		.byte	-58
 577 002d E5        		.byte	-27
 578 002e E6        		.byte	-26
 579 002f E7        		.byte	-25
 580 0030 26        		.byte	38
 581 0031 27        		.byte	39
 582 0032 12        		.byte	18
 583 0033 13        		.byte	19
 584 0034 33        		.byte	51
 585 0035 0F        		.byte	15
 586 0036 36        		.byte	54
 587 0037 00        		.byte	0
 588 0038 2D        		.byte	45
 589 0039 2E        		.byte	46
 590 003a 30        		.byte	48
 591 003b 2F        		.byte	47
 592 003c 34        		.byte	52
 593 003d 38        		.byte	56
 594 003e 37        		.byte	55
 595 003f 00        		.byte	0
 596 0040 1F        		.byte	31
 597 0041 14        		.byte	20
 598 0042 1A        		.byte	26
 599 0043 16        		.byte	22
 600 0044 04        		.byte	4
 601 0045 1D        		.byte	29
 602 0046 1B        		.byte	27
 603 0047 06        		.byte	6
 604 0048 20        		.byte	32
 605 0049 21        		.byte	33
 606 004a 15        		.byte	21
 607 004b 08        		.byte	8
 608 004c 07        		.byte	7
 609 004d 09        		.byte	9
 610 004e 19        		.byte	25
 611 004f 05        		.byte	5
 612 0050 22        		.byte	34
 613 0051 23        		.byte	35
 614 0052 1C        		.byte	28
 615 0053 17        		.byte	23
 616 0054 0A        		.byte	10
 617 0055 0B        		.byte	11
 618 0056 11        		.byte	17
 619 0057 00        		.byte	0
 620 0058 1E        		.byte	30
 621 0059 35        		.byte	53
 622 005a 2B        		.byte	43
 623 005b E0        		.byte	-32
 624 005c E1        		.byte	-31
 625 005d E2        		.byte	-30
 626 005e 01        		.byte	1
 627 005f 2C        		.byte	44
 628 0060 24        		.byte	36
 629 0061 25        		.byte	37
 630 0062 18        		.byte	24
 631 0063 0C        		.byte	12
 632 0064 0E        		.byte	14
 633 0065 0D        		.byte	13
 634 0066 10        		.byte	16
 635 0067 00        		.byte	0
 636 0068 31        		.byte	49
 637 0069 35        		.byte	53
 638 006a 2A        		.byte	42
 639 006b 28        		.byte	40
 640 006c 01        		.byte	1
 641 006d E5        		.byte	-27
 642 006e E6        		.byte	-26
 643 006f E7        		.byte	-25
 644 0070 26        		.byte	38
 645 0071 27        		.byte	39
 646 0072 12        		.byte	18
 647 0073 13        		.byte	19
 648 0074 33        		.byte	51
 649 0075 0F        		.byte	15
 650 0076 36        		.byte	54
 651 0077 00        		.byte	0
 652 0078 2D        		.byte	45
 653 0079 2E        		.byte	46
 654 007a 30        		.byte	48
 655 007b 2F        		.byte	47
 656 007c 34        		.byte	52
 657 007d 38        		.byte	56
 658 007e 37        		.byte	55
 659 007f 00        		.byte	0
 660 0080 01        		.byte	1
 661 0081 01        		.byte	1
 662 0082 CF        		.byte	-49
 663 0083 01        		.byte	1
 664 0084 01        		.byte	1
 665 0085 01        		.byte	1
 666 0086 01        		.byte	1
 667 0087 01        		.byte	1
 668 0088 01        		.byte	1
 669 0089 D3        		.byte	-45
 670 008a 01        		.byte	1
 671 008b D1        		.byte	-47
 672 008c 01        		.byte	1
 673 008d CE        		.byte	-50
 674 008e 01        		.byte	1
 675 008f D2        		.byte	-46
 676 0090 01        		.byte	1
 677 0091 D4        		.byte	-44
 678 0092 01        		.byte	1
 679 0093 01        		.byte	1
 680 0094 D0        		.byte	-48
 681 0095 CA        		.byte	-54
 682 0096 01        		.byte	1
 683 0097 00        		.byte	0
 684 0098 01        		.byte	1
 685 0099 29        		.byte	41
 686 009a 2B        		.byte	43
 687 009b 01        		.byte	1
 688 009c E1        		.byte	-31
 689 009d E2        		.byte	-30
 690 009e E3        		.byte	-29
 691 009f 2C        		.byte	44
 692 00a0 01        		.byte	1
 693 00a1 01        		.byte	1
 694 00a2 01        		.byte	1
 695 00a3 01        		.byte	1
 696 00a4 CC        		.byte	-52
 697 00a5 CB        		.byte	-53
 698 00a6 01        		.byte	1
 699 00a7 00        		.byte	0
 700 00a8 49        		.byte	73
 701 00a9 4C        		.byte	76
 702 00aa 2A        		.byte	42
 703 00ab 01        		.byte	1
 704 00ac 01        		.byte	1
 705 00ad E5        		.byte	-27
 706 00ae E6        		.byte	-26
 707 00af E7        		.byte	-25
 708 00b0 01        		.byte	1
 709 00b1 01        		.byte	1
 710 00b2 01        		.byte	1
 711 00b3 01        		.byte	1
 712 00b4 01        		.byte	1
 713 00b5 CD        		.byte	-51
 714 00b6 01        		.byte	1
 715 00b7 00        		.byte	0
 716 00b8 01        		.byte	1
 717 00b9 01        		.byte	1
 718 00ba 01        		.byte	1
 719 00bb 01        		.byte	1
 720 00bc 01        		.byte	1
 721 00bd 01        		.byte	1
 722 00be 01        		.byte	1
 723 00bf 00        		.byte	0
 724 00c0 0000 0000 		.zero	192
 724      0000 0000 
 724      0000 0000 
 724      0000 0000 
 724      0000 0000 
 725 0180 3B        		.byte	59
 726 0181 00        		.byte	0
 727 0182 00        		.byte	0
 728 0183 A9        		.byte	-87
 729 0184 AA        		.byte	-86
 730 0185 00        		.byte	0
 731 0186 00        		.byte	0
 732 0187 00        		.byte	0
 733 0188 3C        		.byte	60
 734 0189 3D        		.byte	61
 735 018a 00        		.byte	0
 736 018b 00        		.byte	0
 737 018c A8        		.byte	-88
 738 018d 00        		.byte	0
 739 018e 00        		.byte	0
 740 018f 00        		.byte	0
 741 0190 3E        		.byte	62
 742 0191 3F        		.byte	63
 743 0192 00        		.byte	0
 744 0193 00        		.byte	0
 745 0194 00        		.byte	0
 746 0195 55        		.byte	85
 747 0196 57        		.byte	87
 748 0197 00        		.byte	0
 749 0198 3A        		.byte	58
 750 0199 A5        		.byte	-91
 751 019a 39        		.byte	57
 752 019b E0        		.byte	-32
 753 019c E1        		.byte	-31
 754 019d E2        		.byte	-30
 755 019e E3        		.byte	-29
 756 019f 01        		.byte	1
 757 01a0 40        		.byte	64
 758 01a1 41        		.byte	65
 759 01a2 00        		.byte	0
 760 01a3 46        		.byte	70
 761 01a4 4A        		.byte	74
 762 01a5 54        		.byte	84
 763 01a6 56        		.byte	86
 764 01a7 00        		.byte	0
 765 01a8 49        		.byte	73
 766 01a9 4C        		.byte	76
 767 01aa 2A        		.byte	42
 768 01ab 28        		.byte	40
 769 01ac 01        		.byte	1
 770 01ad E5        		.byte	-27
 771 01ae E6        		.byte	-26
 772 01af E7        		.byte	-25
 773 01b0 42        		.byte	66
 774 01b1 43        		.byte	67
 775 01b2 47        		.byte	71
 776 01b3 48        		.byte	72
 777 01b4 50        		.byte	80
 778 01b5 4B        		.byte	75
 779 01b6 4D        		.byte	77
 780 01b7 00        		.byte	0
 781 01b8 44        		.byte	68
 782 01b9 45        		.byte	69
 783 01ba C4        		.byte	-60
 784 01bb 52        		.byte	82
 785 01bc 4F        		.byte	79
 786 01bd 51        		.byte	81
 787 01be 4E        		.byte	78
 788 01bf 00        		.byte	0
 789               		.text
 790               	.Letext0:
 791               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 792               		.file 3 "./tmk_core/common/keycode.h"
 793               		.file 4 "./tmk_core/common/keyboard.h"
 794               		.file 5 "./tmk_core/common/action_code.h"
 795               		.file 6 "./tmk_core/common/action_macro.h"
 796               		.file 7 "./tmk_core/common/action.h"
 797               		.file 8 "./tmk_core/common/action_util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 keymap_custom.c
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:2      *ABS*:0000003e __SP_H__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:3      *ABS*:0000003d __SP_L__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:4      *ABS*:0000003f __SREG__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:6      *ABS*:00000001 __zero_reg__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:13     .text.action_get_macro:00000000 action_get_macro
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:479    .progmem.data.__m.2320:00000000 __m.2320
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:470    .progmem.data.__m.2323:00000000 __m.2323
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:461    .progmem.data.__m.2326:00000000 __m.2326
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:445    .progmem.data.__m.2331:00000000 __m.2331
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:454    .progmem.data.__m.2328:00000000 __m.2328
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:438    .progmem.data.__m.2333:00000000 __m.2333
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:94     .text.action_function:00000000 action_function
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:433    .bss.ctrl_mod.2340:00000000 ctrl_mod.2340
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:509    .progmem.data.fn_actions:00000000 fn_actions
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccdJqdYw.s:531    .progmem.data.keymaps:00000000 keymaps

UNDEFINED SYMBOLS
__tablejump2__
get_mods
del_mods
add_key
send_keyboard_report
add_mods
add_weak_mods
del_weak_mods
del_key
register_mods
__do_clear_bss
