   1               		.file	"keymap_hasu.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_get_macro,"ax",@progbits
  11               	.global	action_get_macro
  13               	action_get_macro:
  14               	.LFB4:
  15               		.file 1 "keymap_hasu.c"
   1:keymap_hasu.c **** /* 
   2:keymap_hasu.c ****  * Hasu: my personal keymap
   3:keymap_hasu.c ****  */
   4:keymap_hasu.c **** #include "keymap_common.h"
   5:keymap_hasu.c **** 
   6:keymap_hasu.c **** 
   7:keymap_hasu.c **** #ifdef KEYMAP_SECTION_ENABLE
   8:keymap_hasu.c **** const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS] __attribute__ ((section (".keymap.keymaps"))) = {
   9:keymap_hasu.c **** #else
  10:keymap_hasu.c **** const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS] PROGMEM = {
  11:keymap_hasu.c **** #endif
  12:keymap_hasu.c ****     /* Layer 0: Default Layer
  13:keymap_hasu.c ****      * ,-----------------------------------------------------------.
  14:keymap_hasu.c ****      * |Esc|  1|  2|  3|  4|  5|  6|  7|  8|  9|  0|  -|  =|  \|  `|
  15:keymap_hasu.c ****      * |-----------------------------------------------------------|
  16:keymap_hasu.c ****      * |Tab  |  Q|  W|  E|  R|  T|  Y|  U|  I|  O|  P|  [|  ]|Backs|
  17:keymap_hasu.c ****      * |-----------------------------------------------------------|
  18:keymap_hasu.c ****      * |Contro|  A|  S|  D|  F|  G|  H|  J|  K|  L|Fn3|  '|Fn6     |
  19:keymap_hasu.c ****      * |-----------------------------------------------------------|
  20:keymap_hasu.c ****      * |Fn7     |  Z|  X|  C|  V|  B|  N|  M|  ,|  .|Fn2|Shift |Fn1|
  21:keymap_hasu.c ****      * `-----------------------------------------------------------'
  22:keymap_hasu.c ****      *       |Gui|Alt  |         Fn4           |Fn5  |Gui|
  23:keymap_hasu.c ****      *       `-------------------------------------------'
  24:keymap_hasu.c ****      */
  25:keymap_hasu.c ****     [0] = \
  26:keymap_hasu.c ****     KEYMAP(ESC, 1,   2,   3,   4,   5,   6,   7,   8,   9,   0,   MINS,EQL, BSLS,GRV, \
  27:keymap_hasu.c ****            TAB, Q,   W,   E,   R,   T,   Y,   U,   I,   O,   P,   LBRC,RBRC,BSPC, \
  28:keymap_hasu.c ****            LCTL,A,   S,   D,   F,   G,   H,   J,   K,   L,   FN3, QUOT,FN6, \
  29:keymap_hasu.c ****            FN7, Z,   X,   C,   V,   B,   N,   M,   COMM,DOT, FN2, RSFT,FN1, \
  30:keymap_hasu.c ****                 LGUI,LALT,          FN4,                FN5, RGUI),
  31:keymap_hasu.c **** 
  32:keymap_hasu.c ****     /* Layer 1: HHKB mode[HHKB Fn]
  33:keymap_hasu.c ****      * ,-----------------------------------------------------------.
  34:keymap_hasu.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  35:keymap_hasu.c ****      * |-----------------------------------------------------------|
  36:keymap_hasu.c ****      * |Caps |   |   |   |   |   |   |   |Psc|Slk|Pus|Up |   |Backs|
  37:keymap_hasu.c ****      * |-----------------------------------------------------------|
  38:keymap_hasu.c ****      * |Contro|VoD|VoU|Mut|   |   |  *|  /|Hom|PgU|Lef|Rig|Enter   |
  39:keymap_hasu.c ****      * |-----------------------------------------------------------|
  40:keymap_hasu.c ****      * |Shift   |   |   |   |   |   |  +|  -|End|PgD|Dow|Shift |   |
  41:keymap_hasu.c ****      * `-----------------------------------------------------------'
  42:keymap_hasu.c ****      *       |Gui|Alt  |         Space         |Alt  |Gui|
  43:keymap_hasu.c ****      *       `-------------------------------------------'
  44:keymap_hasu.c ****      */ 
  45:keymap_hasu.c ****     [1] = \
  46:keymap_hasu.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
  47:keymap_hasu.c ****            CAPS,NO,  NO,  NO,  NO,  NO,  NO,  NO,  PSCR,SLCK,PAUS, UP,  NO,  BSPC, \
  48:keymap_hasu.c ****            LCTL,VOLD,VOLU,MUTE,NO,  NO,  PAST,PSLS,HOME,PGUP,LEFT,RGHT,ENT, \
  49:keymap_hasu.c ****            LSFT,NO,  NO,  NO,  NO,  NO,  PPLS,PMNS,END, PGDN,DOWN,RSFT,TRNS, \
  50:keymap_hasu.c ****                 LGUI,LALT,          TRNS,               RALT,RGUI),
  51:keymap_hasu.c **** 
  52:keymap_hasu.c ****     /* Layer 2: Vi mode[Slash]
  53:keymap_hasu.c ****      * ,-----------------------------------------------------------.
  54:keymap_hasu.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  55:keymap_hasu.c ****      * |-----------------------------------------------------------|
  56:keymap_hasu.c ****      * |Tab  |Hom|PgD|Up |PgU|End|Hom|PgD|PgUlEnd|   |   |   |Backs|
  57:keymap_hasu.c ****      * |-----------------------------------------------------------|
  58:keymap_hasu.c ****      * |Contro|   |Lef|Dow|Rig|   |Lef|Dow|Up |Rig|   |   |Return  |
  59:keymap_hasu.c ****      * |-----------------------------------------------------------|
  60:keymap_hasu.c ****      * |Shift   |   |   |   |   |   |Hom|PgD|PgUlEnd|Fn0|Shift |   |
  61:keymap_hasu.c ****      * `-----------------------------------------------------------'
  62:keymap_hasu.c ****      *       |Gui|Alt  |          Space        |Alt  |Gui|
  63:keymap_hasu.c ****      *       `-------------------------------------------'
  64:keymap_hasu.c ****      */
  65:keymap_hasu.c ****     [2] = \
  66:keymap_hasu.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
  67:keymap_hasu.c ****            TAB, HOME,PGDN,UP,  PGUP,END, HOME,PGDN,PGUP,END, NO,  NO,  NO,  BSPC, \
  68:keymap_hasu.c ****            LCTL,NO,  LEFT,DOWN,RGHT,NO,  LEFT,DOWN,UP,  RGHT,NO,  NO,  ENT, \
  69:keymap_hasu.c ****            LSFT,NO,  NO,  NO,  NO,  NO,  HOME,PGDN,PGUP,END, FN2, RSFT,TRNS, \
  70:keymap_hasu.c ****                 LGUI,LALT,          SPC,                RALT,RGUI),
  71:keymap_hasu.c **** 
  72:keymap_hasu.c ****     /* Layer 3: Mouse mode(IJKL)[Semicolon]
  73:keymap_hasu.c ****      * ,-----------------------------------------------------------.
  74:keymap_hasu.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  75:keymap_hasu.c ****      * |-----------------------------------------------------------|
  76:keymap_hasu.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|McU|MwU|MwR|Wbk|Wfr|Alt-T|
  77:keymap_hasu.c ****      * |-----------------------------------------------------------|
  78:keymap_hasu.c ****      * |Contro|   |   |   |   |   |Mb2|McL|McD|McR|Fn |   |Return  |
  79:keymap_hasu.c ****      * |-----------------------------------------------------------|
  80:keymap_hasu.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
  81:keymap_hasu.c ****      * `-----------------------------------------------------------'
  82:keymap_hasu.c ****      *      |Gui |Alt  |          Mb1          |Fn   |Fn |
  83:keymap_hasu.c ****      *      `--------------------------------------------'
  84:keymap_hasu.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
  85:keymap_hasu.c ****      */
  86:keymap_hasu.c ****     [3] = \
  87:keymap_hasu.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
  88:keymap_hasu.c ****            FN8, NO,  NO,  NO,  NO,  NO,  WH_L,WH_D,MS_U,WH_U,WH_R,FN9, FN10,FN8, \
  89:keymap_hasu.c ****            LCTL,ACL0,ACL1,ACL2,ACL2,NO,  NO,  MS_L,MS_D,MS_R,FN3, NO,  ENT, \
  90:keymap_hasu.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,NO,  RSFT,TRNS, \
  91:keymap_hasu.c ****                 LGUI,LALT,          BTN1,               TRNS,TRNS),
  92:keymap_hasu.c **** 
  93:keymap_hasu.c ****     /* Layer 4: Mouse mode(IJKL)[Space]
  94:keymap_hasu.c ****      * ,-----------------------------------------------------------.
  95:keymap_hasu.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
  96:keymap_hasu.c ****      * |-----------------------------------------------------------|
  97:keymap_hasu.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|McU|MwU|MwR|Wbk|Wfr|Alt-T|
  98:keymap_hasu.c ****      * |-----------------------------------------------------------|
  99:keymap_hasu.c ****      * |Contro|   |   |   |   |   |Mb2|McL|McD|McR|Mb1|   |Return  |
 100:keymap_hasu.c ****      * |-----------------------------------------------------------|
 101:keymap_hasu.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 102:keymap_hasu.c ****      * `-----------------------------------------------------------'
 103:keymap_hasu.c ****      *      |Gui |Alt  |          Mb1          |Fn   |Fn |
 104:keymap_hasu.c ****      *      `--------------------------------------------'
 105:keymap_hasu.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel
 106:keymap_hasu.c ****      */
 107:keymap_hasu.c ****     [4] = \
 108:keymap_hasu.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 109:keymap_hasu.c ****            FN8, NO,  NO,  NO,  NO,  NO,  WH_L,WH_D,MS_U,WH_U,WH_R,BTN4,BTN5,FN8, \
 110:keymap_hasu.c ****            LCTL,VOLD,VOLU,MUTE,NO,  NO,  NO,  MS_L,MS_D,MS_R,BTN1,NO,  ENT, \
 111:keymap_hasu.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,NO,  RSFT,TRNS, \
 112:keymap_hasu.c ****                 LGUI,LALT,          TRNS,               TRNS,TRNS),
 113:keymap_hasu.c **** 
 114:keymap_hasu.c **** #if 0
 115:keymap_hasu.c ****     /* Layer 3: Mouse mode(HJKL)[Semicolon]
 116:keymap_hasu.c ****      * ,-----------------------------------------------------------.
 117:keymap_hasu.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
 118:keymap_hasu.c ****      * |-----------------------------------------------------------|
 119:keymap_hasu.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|MwU|MwR|   |   |   |Backs|
 120:keymap_hasu.c ****      * |-----------------------------------------------------------|
 121:keymap_hasu.c ****      * |Contro|   |   |   |   |   |McL|McD|McU|McR|Fn0|   |Return  |
 122:keymap_hasu.c ****      * |-----------------------------------------------------------|
 123:keymap_hasu.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 124:keymap_hasu.c ****      * `-----------------------------------------------------------'
 125:keymap_hasu.c ****      *      |Gui |Alt  |          Mb1          |Alt  |Fn0|
 126:keymap_hasu.c ****      *      `--------------------------------------------'
 127:keymap_hasu.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel 
 128:keymap_hasu.c ****      */
 129:keymap_hasu.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 130:keymap_hasu.c ****            TAB, NO,  NO,  NO,  NO,  NO,  NO,  WH_D,WH_U,RGHT,NO,  NO,  NO,  BSPC, \
 131:keymap_hasu.c ****            LCTL,NO,  ACL0,ACL1,ACL2,NO,  MS_L,MS_D,MS_U,MS_R,TRNS,QUOT,ENT, \
 132:keymap_hasu.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,SLSH,RSFT,NO, \
 133:keymap_hasu.c ****                 LGUI,LALT,          BTN1,               RALT,TRNS),
 134:keymap_hasu.c **** 
 135:keymap_hasu.c ****     /* Layer4: Mouse mode(HJKL)[Space]
 136:keymap_hasu.c ****      * ,-----------------------------------------------------------.
 137:keymap_hasu.c ****      * |Esc| F1| F2| F3| F4| F5| F6| F7| F8| F9|F10|F11|F12|Ins|Del|
 138:keymap_hasu.c ****      * |-----------------------------------------------------------|
 139:keymap_hasu.c ****      * |Tab  |   |   |   |   |   |MwL|MwD|MwU|MwR|   |Wbk|Wfr|Alt-T|
 140:keymap_hasu.c ****      * |-----------------------------------------------------------|
 141:keymap_hasu.c ****      * |Contro|   |   |   |   |   |McL|McD|McU|McR|Fn0|   |Return  |
 142:keymap_hasu.c ****      * |-----------------------------------------------------------|
 143:keymap_hasu.c ****      * |Shift   |   |   |   |   |Mb3|Mb2|Mb1|Mb4|Mb5|   |Shift |   |
 144:keymap_hasu.c ****      * `-----------------------------------------------------------'
 145:keymap_hasu.c ****      *      |Gui |Alt  |          Fn0          |Alt  |Fn0|
 146:keymap_hasu.c ****      *      `--------------------------------------------'
 147:keymap_hasu.c ****      * Mc: Mouse Cursor / Mb: Mouse Button / Mw: Mouse Wheel 
 148:keymap_hasu.c ****      */
 149:keymap_hasu.c ****     KEYMAP(GRV, F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,  F9,  F10, F11, F12, INS, DEL, \
 150:keymap_hasu.c ****            FN8, NO,  NO,  NO,  NO,  NO,  NO,  WH_D,WH_U,RGHT,NO,  FN9, FN10,FN8, \
 151:keymap_hasu.c ****            LCTL,NO,  ACL0,ACL1,ACL2,NO,  MS_L,MS_D,MS_U,MS_R,BTN1,NO,  ENT, \
 152:keymap_hasu.c ****            LSFT,NO,  NO,  NO,  NO,  BTN3,BTN2,BTN1,FN9, FN10,NO,  RSFT,NO, \
 153:keymap_hasu.c ****                 LGUI,LALT,          TRNS,               RALT,RGUI),
 154:keymap_hasu.c **** #endif
 155:keymap_hasu.c **** #if 0
 156:keymap_hasu.c ****     /* Layer x: Matias half-qwerty keyboard style[Space]
 157:keymap_hasu.c ****      * ,-----------------------------------------------------------.
 158:keymap_hasu.c ****      * |  -|  0|  9|  8|  7|  6|  5|  4|  3|  2|  1|   |   |   |Esc|
 159:keymap_hasu.c ****      * |-----------------------------------------------------------|
 160:keymap_hasu.c ****      * |Backs|  P|  O|  I|  U|  Y|  T|  R|  E|  W|  Q|   |   |Tab  |
 161:keymap_hasu.c ****      * |-----------------------------------------------------------|
 162:keymap_hasu.c ****      * |Contro|  ;|  L|  K|  J|  H|  G|  F|  D|  S|  A|Con|Control |
 163:keymap_hasu.c ****      * |-----------------------------------------------------------|
 164:keymap_hasu.c ****      * |Shift   |  /|  .|  ,|  M|  N|  B|  V|  C|  X|  Z|Shift |   |
 165:keymap_hasu.c ****      * `-----------------------------------------------------------'
 166:keymap_hasu.c ****      *      |Gui |Alt  |          Fn0          |Alt  |Gui|
 167:keymap_hasu.c ****      *      `--------------------------------------------'
 168:keymap_hasu.c ****      */
 169:keymap_hasu.c ****     KEYMAP(MINS,0,   9,   8,   7,   6,   5,   4,   3,   2,   1,   NO,  NO,  NO,  ESC, \
 170:keymap_hasu.c ****            BSPC,P,   O,   I,   U,   Y,   T,   R,   E,   W,   Q,   NO,  NO,  TAB, \
 171:keymap_hasu.c ****            LCTL,SCLN,L,   K,   J,   H,   G,   F,   D,   S,   A,   RCTL,RCTL, \
 172:keymap_hasu.c ****            LSFT,SLSH,DOT, COMM,M,   N,   B,   V,   C,   X,   Z,   RSFT,NO, \
 173:keymap_hasu.c ****                 LGUI,LALT,          TRNS,               RALT,RGUI),
 174:keymap_hasu.c **** #endif
 175:keymap_hasu.c **** };
 176:keymap_hasu.c **** 
 177:keymap_hasu.c **** 
 178:keymap_hasu.c **** 
 179:keymap_hasu.c **** /* id for user defined functions */
 180:keymap_hasu.c **** enum function_id {
 181:keymap_hasu.c ****     LSHIFT_LPAREN,
 182:keymap_hasu.c **** };
 183:keymap_hasu.c **** 
 184:keymap_hasu.c **** enum macro_id {
 185:keymap_hasu.c ****     HELLO,
 186:keymap_hasu.c ****     VOLUP,
 187:keymap_hasu.c ****     ALT_TAB,
 188:keymap_hasu.c **** };
 189:keymap_hasu.c **** 
 190:keymap_hasu.c **** 
 191:keymap_hasu.c **** /*
 192:keymap_hasu.c ****  * Fn action definition
 193:keymap_hasu.c ****  */
 194:keymap_hasu.c **** #ifdef KEYMAP_SECTION_ENABLE
 195:keymap_hasu.c **** const action_t fn_actions[] __attribute__ ((section (".keymap.fn_actions"))) = {
 196:keymap_hasu.c **** #else
 197:keymap_hasu.c **** const action_t fn_actions[] PROGMEM = {
 198:keymap_hasu.c **** #endif
 199:keymap_hasu.c ****     [0] = ACTION_DEFAULT_LAYER_SET(0),                // Default layer(not used)
 200:keymap_hasu.c ****     [1] = ACTION_LAYER_TAP_TOGGLE(1),                 // HHKB layer(toggle with 5 taps)
 201:keymap_hasu.c ****     [2] = ACTION_LAYER_TAP_KEY(2, KC_SLASH),          // Cursor layer with Slash*
 202:keymap_hasu.c ****     [3] = ACTION_LAYER_TAP_KEY(3, KC_SCLN),           // Mousekey layer with Semicolon*
 203:keymap_hasu.c ****     [4] = ACTION_LAYER_TAP_KEY(4, KC_SPC),            // Mousekey layer with Space
 204:keymap_hasu.c ****     [5] = ACTION_LAYER_MOMENTARY(4),                  // Mousekey layer(IJKL)
 205:keymap_hasu.c ****     [6] = ACTION_MODS_TAP_KEY(MOD_RCTL, KC_ENT),      // RControl with tap Enter
 206:keymap_hasu.c ****     [7] = ACTION_MODS_ONESHOT(MOD_LSFT),              // Oneshot Shift
 207:keymap_hasu.c ****     [8] = ACTION_MACRO(ALT_TAB),                      // Application switching
 208:keymap_hasu.c ****     [9] = ACTION_MODS_KEY(MOD_LALT, KC_LEFT),
 209:keymap_hasu.c ****    [10] = ACTION_MODS_KEY(MOD_LALT, KC_RIGHT),
 210:keymap_hasu.c **** 
 211:keymap_hasu.c **** //  [x] = ACTION_LMOD_TAP_KEY(KC_LCTL, KC_BSPC),        // LControl with tap Backspace
 212:keymap_hasu.c **** //  [x] = ACTION_LMOD_TAP_KEY(KC_LCTL, KC_ESC),         // LControl with tap Esc
 213:keymap_hasu.c **** //  [x] = ACTION_FUNCTION_TAP(LSHIFT_LPAREN),           // Function: LShift with tap '('
 214:keymap_hasu.c **** //  [x] = ACTION_MACRO(HELLO),                          // Macro: say hello
 215:keymap_hasu.c **** //  [x] = ACTION_MACRO(VOLUP),                          // Macro: media key
 216:keymap_hasu.c **** };
 217:keymap_hasu.c **** 
 218:keymap_hasu.c **** 
 219:keymap_hasu.c **** /*
 220:keymap_hasu.c ****  * Macro definition
 221:keymap_hasu.c ****  */
 222:keymap_hasu.c **** const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
 223:keymap_hasu.c **** {
  16               		.loc 1 223 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 FC01      		movw r30,r24
 224:keymap_hasu.c ****     switch (id) {
  24               		.loc 1 224 0
  25 0002 6130      		cpi r22,lo8(1)
  26 0004 01F0      		breq .L3
  27 0006 00F0      		brlo .L4
  28 0008 6230      		cpi r22,lo8(2)
  29 000a 01F0      		breq .L5
  30 000c 00C0      		rjmp .L8
  31               	.L4:
 225:keymap_hasu.c ****         case HELLO:
 226:keymap_hasu.c ****             return (record->event.pressed ?
 227:keymap_hasu.c ****                     MACRO( I(0), T(H), T(E), T(L), T(L), W(255), T(O), END ) :
  32               		.loc 1 227 0
  33 000e 8281      		ldd r24,Z+2
  34               	.LVL1:
  35 0010 8823      		tst r24
  36 0012 01F0      		breq .L8
  37 0014 80E0      		ldi r24,lo8(__m.2309)
  38 0016 90E0      		ldi r25,hi8(__m.2309)
  39 0018 0895      		ret
  40               	.LVL2:
  41               	.L3:
 228:keymap_hasu.c ****                     MACRO_NONE );
 229:keymap_hasu.c ****         case VOLUP:
 230:keymap_hasu.c ****             return (record->event.pressed ?
 231:keymap_hasu.c ****                     MACRO( D(VOLU), U(VOLU), END ) :
  42               		.loc 1 231 0
  43 001a 8281      		ldd r24,Z+2
  44               	.LVL3:
  45 001c 8823      		tst r24
  46 001e 01F0      		breq .L8
  47 0020 80E0      		ldi r24,lo8(__m.2312)
  48 0022 90E0      		ldi r25,hi8(__m.2312)
  49 0024 0895      		ret
  50               	.LVL4:
  51               	.L5:
 232:keymap_hasu.c ****                     MACRO_NONE );
 233:keymap_hasu.c ****         case ALT_TAB:
 234:keymap_hasu.c ****             return (record->event.pressed ?
 235:keymap_hasu.c ****                     MACRO( D(LALT), D(TAB), END ) :
  52               		.loc 1 235 0
  53 0026 8281      		ldd r24,Z+2
  54               	.LVL5:
  55 0028 8823      		tst r24
  56 002a 01F0      		breq .L9
  57 002c 80E0      		ldi r24,lo8(__m.2315)
  58 002e 90E0      		ldi r25,hi8(__m.2315)
  59 0030 0895      		ret
  60               	.L8:
 227:keymap_hasu.c ****                     MACRO( I(0), T(H), T(E), T(L), T(L), W(255), T(O), END ) :
  61               		.loc 1 227 0
  62 0032 80E0      		ldi r24,0
  63 0034 90E0      		ldi r25,0
  64 0036 0895      		ret
  65               	.L9:
  66               		.loc 1 235 0
  67 0038 80E0      		ldi r24,lo8(__m.2317)
  68 003a 90E0      		ldi r25,hi8(__m.2317)
 236:keymap_hasu.c ****                     MACRO( U(TAB), END ));
 237:keymap_hasu.c ****     }
 238:keymap_hasu.c ****     return MACRO_NONE;
 239:keymap_hasu.c **** }
  69               		.loc 1 239 0
  70 003c 0895      		ret
  71               		.cfi_endproc
  72               	.LFE4:
  74               		.section	.text.action_function,"ax",@progbits
  75               	.global	action_function
  77               	action_function:
  78               	.LFB5:
 240:keymap_hasu.c **** 
 241:keymap_hasu.c **** 
 242:keymap_hasu.c **** 
 243:keymap_hasu.c **** /*
 244:keymap_hasu.c ****  * user defined action function
 245:keymap_hasu.c ****  */
 246:keymap_hasu.c **** void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
 247:keymap_hasu.c **** {
  79               		.loc 1 247 0
  80               		.cfi_startproc
  81               	.LVL6:
  82 0000 1F93      		push r17
  83               	.LCFI0:
  84               		.cfi_def_cfa_offset 3
  85               		.cfi_offset 17, -2
  86 0002 CF93      		push r28
  87               	.LCFI1:
  88               		.cfi_def_cfa_offset 4
  89               		.cfi_offset 28, -3
  90 0004 DF93      		push r29
  91               	.LCFI2:
  92               		.cfi_def_cfa_offset 5
  93               		.cfi_offset 29, -4
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 3 */
  97               	.L__stack_usage = 3
  98 0006 EC01      		movw r28,r24
  99 0008 162F      		mov r17,r22
 248:keymap_hasu.c ****     if (record->event.pressed) dprint("P"); else dprint("R");
 100               		.loc 1 248 0
 101 000a 9A81      		ldd r25,Y+2
 102 000c 8091 0000 		lds r24,debug_config
 103               	.LVL7:
 104 0010 9923      		tst r25
 105 0012 01F0      		breq .L13
 106               		.loc 1 248 0 is_stmt 0 discriminator 1
 107 0014 80FF      		sbrs r24,0
 108 0016 00C0      		rjmp .L14
 109 0018 80E0      		ldi r24,lo8(__c.2324)
 110 001a 90E0      		ldi r25,hi8(__c.2324)
 111 001c 00C0      		rjmp .L50
 112               	.L13:
 113               		.loc 1 248 0 discriminator 2
 114 001e 80FF      		sbrs r24,0
 115 0020 00C0      		rjmp .L14
 116               		.loc 1 248 0 discriminator 1
 117 0022 80E0      		ldi r24,lo8(__c.2326)
 118 0024 90E0      		ldi r25,hi8(__c.2326)
 119               	.L50:
 120 0026 0E94 0000 		call xputs
 121               	.LVL8:
 122               	.L14:
 249:keymap_hasu.c ****     dprintf("%d", record->tap.count);
 123               		.loc 1 249 0 is_stmt 1
 124 002a 8091 0000 		lds r24,debug_config
 125 002e 80FF      		sbrs r24,0
 126 0030 00C0      		rjmp .L15
 127               		.loc 1 249 0 is_stmt 0 discriminator 1
 128 0032 8D81      		ldd r24,Y+5
 129 0034 8295      		swap r24
 130 0036 8F70      		andi r24,lo8(15)
 131 0038 1F92      		push __zero_reg__
 132               	.LCFI3:
 133               		.cfi_def_cfa_offset 6
 134 003a 8F93      		push r24
 135               	.LCFI4:
 136               		.cfi_def_cfa_offset 7
 137 003c 80E0      		ldi r24,lo8(__c.2328)
 138 003e 90E0      		ldi r25,hi8(__c.2328)
 139 0040 9F93      		push r25
 140               	.LCFI5:
 141               		.cfi_def_cfa_offset 8
 142 0042 8F93      		push r24
 143               	.LCFI6:
 144               		.cfi_def_cfa_offset 9
 145 0044 0E94 0000 		call __xprintf
 146               	.LVL9:
 147 0048 0F90      		pop __tmp_reg__
 148 004a 0F90      		pop __tmp_reg__
 149 004c 0F90      		pop __tmp_reg__
 150 004e 0F90      		pop __tmp_reg__
 151               	.LCFI7:
 152               		.cfi_def_cfa_offset 5
 153               	.L15:
 250:keymap_hasu.c ****     if (record->tap.interrupted) dprint("i");
 154               		.loc 1 250 0 is_stmt 1
 155 0050 8D81      		ldd r24,Y+5
 156 0052 80FF      		sbrs r24,0
 157 0054 00C0      		rjmp .L16
 158               		.loc 1 250 0 is_stmt 0 discriminator 1
 159 0056 8091 0000 		lds r24,debug_config
 160 005a 80FF      		sbrs r24,0
 161 005c 00C0      		rjmp .L16
 162 005e 80E0      		ldi r24,lo8(__c.2330)
 163 0060 90E0      		ldi r25,hi8(__c.2330)
 164 0062 0E94 0000 		call xputs
 165               	.LVL10:
 166               	.L16:
 251:keymap_hasu.c ****     dprint("\n");
 167               		.loc 1 251 0 is_stmt 1
 168 0066 8091 0000 		lds r24,debug_config
 169 006a 80FF      		sbrs r24,0
 170 006c 00C0      		rjmp .L17
 171               		.loc 1 251 0 is_stmt 0 discriminator 1
 172 006e 80E0      		ldi r24,lo8(__c.2332)
 173 0070 90E0      		ldi r25,hi8(__c.2332)
 174 0072 0E94 0000 		call xputs
 175               	.LVL11:
 176               	.L17:
 252:keymap_hasu.c **** 
 253:keymap_hasu.c ****     switch (id) {
 177               		.loc 1 253 0 is_stmt 1
 178 0076 1111      		cpse r17,__zero_reg__
 179 0078 00C0      		rjmp .L12
 254:keymap_hasu.c ****         case LSHIFT_LPAREN:
 255:keymap_hasu.c ****             // Shift parentheses example: LShft + tap '('
 256:keymap_hasu.c ****             // http://stevelosh.com/blog/2012/10/a-modern-space-cadet/#shift-parentheses
 257:keymap_hasu.c ****             // http://geekhack.org/index.php?topic=41989.msg1304899#msg1304899
 258:keymap_hasu.c ****             if (record->event.pressed) {
 180               		.loc 1 258 0
 181 007a 9A81      		ldd r25,Y+2
 182 007c 8D81      		ldd r24,Y+5
 183 007e 9923      		tst r25
 184 0080 01F0      		breq .L20
 259:keymap_hasu.c ****                 if (record->tap.count > 0 && !record->tap.interrupted) {
 185               		.loc 1 259 0
 186 0082 982F      		mov r25,r24
 187 0084 9295      		swap r25
 188 0086 9F70      		andi r25,lo8(15)
 189 0088 01F0      		breq .L21
 190               		.loc 1 259 0 is_stmt 0 discriminator 1
 191 008a 80FF      		sbrs r24,0
 192 008c 00C0      		rjmp .L12
 193               	.L21:
 260:keymap_hasu.c ****                     if (record->tap.interrupted) {
 261:keymap_hasu.c ****                         dprint("tap interrupted\n");
 262:keymap_hasu.c ****                         register_mods(MOD_BIT(KC_LSHIFT));
 263:keymap_hasu.c ****                     }
 264:keymap_hasu.c ****                 } else {
 265:keymap_hasu.c ****                     register_mods(MOD_BIT(KC_LSHIFT));
 194               		.loc 1 265 0 is_stmt 1
 195 008e 82E0      		ldi r24,lo8(2)
 196               	/* epilogue start */
 266:keymap_hasu.c ****                 }
 267:keymap_hasu.c ****             } else {
 268:keymap_hasu.c ****                 if (record->tap.count > 0 && !(record->tap.interrupted)) {
 269:keymap_hasu.c ****                     add_weak_mods(MOD_BIT(KC_LSHIFT));
 270:keymap_hasu.c ****                     send_keyboard_report();
 271:keymap_hasu.c ****                     register_code(KC_9);
 272:keymap_hasu.c ****                     unregister_code(KC_9);
 273:keymap_hasu.c ****                     del_weak_mods(MOD_BIT(KC_LSHIFT));
 274:keymap_hasu.c ****                     send_keyboard_report();
 275:keymap_hasu.c ****                     record->tap.count = 0;  // ad hoc: cancel tap
 276:keymap_hasu.c ****                 } else {
 277:keymap_hasu.c ****                     unregister_mods(MOD_BIT(KC_LSHIFT));
 278:keymap_hasu.c ****                 }
 279:keymap_hasu.c ****             }
 280:keymap_hasu.c ****             break;
 281:keymap_hasu.c ****     }
 282:keymap_hasu.c **** }
 197               		.loc 1 282 0
 198 0090 DF91      		pop r29
 199 0092 CF91      		pop r28
 200               	.LVL12:
 201 0094 1F91      		pop r17
 202               	.LVL13:
 265:keymap_hasu.c ****                     register_mods(MOD_BIT(KC_LSHIFT));
 203               		.loc 1 265 0
 204 0096 0C94 0000 		jmp register_mods
 205               	.LVL14:
 206               	.L20:
 268:keymap_hasu.c ****                 if (record->tap.count > 0 && !(record->tap.interrupted)) {
 207               		.loc 1 268 0
 208 009a 982F      		mov r25,r24
 209 009c 9295      		swap r25
 210 009e 9F70      		andi r25,lo8(15)
 211 00a0 01F0      		breq .L22
 268:keymap_hasu.c ****                 if (record->tap.count > 0 && !(record->tap.interrupted)) {
 212               		.loc 1 268 0 is_stmt 0 discriminator 1
 213 00a2 80FD      		sbrc r24,0
 214 00a4 00C0      		rjmp .L22
 269:keymap_hasu.c ****                     add_weak_mods(MOD_BIT(KC_LSHIFT));
 215               		.loc 1 269 0 is_stmt 1
 216 00a6 82E0      		ldi r24,lo8(2)
 217 00a8 0E94 0000 		call add_weak_mods
 218               	.LVL15:
 270:keymap_hasu.c ****                     send_keyboard_report();
 219               		.loc 1 270 0
 220 00ac 0E94 0000 		call send_keyboard_report
 221               	.LVL16:
 271:keymap_hasu.c ****                     register_code(KC_9);
 222               		.loc 1 271 0
 223 00b0 86E2      		ldi r24,lo8(38)
 224 00b2 0E94 0000 		call register_code
 225               	.LVL17:
 272:keymap_hasu.c ****                     unregister_code(KC_9);
 226               		.loc 1 272 0
 227 00b6 86E2      		ldi r24,lo8(38)
 228 00b8 0E94 0000 		call unregister_code
 229               	.LVL18:
 273:keymap_hasu.c ****                     del_weak_mods(MOD_BIT(KC_LSHIFT));
 230               		.loc 1 273 0
 231 00bc 82E0      		ldi r24,lo8(2)
 232 00be 0E94 0000 		call del_weak_mods
 233               	.LVL19:
 274:keymap_hasu.c ****                     send_keyboard_report();
 234               		.loc 1 274 0
 235 00c2 0E94 0000 		call send_keyboard_report
 236               	.LVL20:
 275:keymap_hasu.c ****                     record->tap.count = 0;  // ad hoc: cancel tap
 237               		.loc 1 275 0
 238 00c6 8D81      		ldd r24,Y+5
 239 00c8 8F70      		andi r24,lo8(15)
 240 00ca 8D83      		std Y+5,r24
 241 00cc 00C0      		rjmp .L12
 242               	.L22:
 277:keymap_hasu.c ****                     unregister_mods(MOD_BIT(KC_LSHIFT));
 243               		.loc 1 277 0
 244 00ce 82E0      		ldi r24,lo8(2)
 245               	/* epilogue start */
 246               		.loc 1 282 0
 247 00d0 DF91      		pop r29
 248 00d2 CF91      		pop r28
 249               	.LVL21:
 250 00d4 1F91      		pop r17
 251               	.LVL22:
 277:keymap_hasu.c ****                     unregister_mods(MOD_BIT(KC_LSHIFT));
 252               		.loc 1 277 0
 253 00d6 0C94 0000 		jmp unregister_mods
 254               	.LVL23:
 255               	.L12:
 256               	/* epilogue start */
 257               		.loc 1 282 0
 258 00da DF91      		pop r29
 259 00dc CF91      		pop r28
 260               	.LVL24:
 261 00de 1F91      		pop r17
 262               	.LVL25:
 263 00e0 0895      		ret
 264               		.cfi_endproc
 265               	.LFE5:
 267               		.section	.progmem.data.__c.2332,"a",@progbits
 270               	__c.2332:
 271 0000 0A00      		.string	"\n"
 272               		.section	.progmem.data.__c.2330,"a",@progbits
 275               	__c.2330:
 276 0000 6900      		.string	"i"
 277               		.section	.progmem.data.__c.2328,"a",@progbits
 280               	__c.2328:
 281 0000 2564 00   		.string	"%d"
 282               		.section	.progmem.data.__c.2326,"a",@progbits
 285               	__c.2326:
 286 0000 5200      		.string	"R"
 287               		.section	.progmem.data.__c.2324,"a",@progbits
 290               	__c.2324:
 291 0000 5000      		.string	"P"
 292               		.section	.progmem.data.__m.2317,"a",@progbits
 295               	__m.2317:
 296 0000 02        		.byte	2
 297 0001 2B        		.byte	43
 298 0002 00        		.byte	0
 299               		.section	.progmem.data.__m.2315,"a",@progbits
 302               	__m.2315:
 303 0000 01        		.byte	1
 304 0001 E2        		.byte	-30
 305 0002 01        		.byte	1
 306 0003 2B        		.byte	43
 307 0004 00        		.byte	0
 308               		.section	.progmem.data.__m.2312,"a",@progbits
 311               	__m.2312:
 312 0000 01        		.byte	1
 313 0001 A9        		.byte	-87
 314 0002 02        		.byte	2
 315 0003 A9        		.byte	-87
 316 0004 00        		.byte	0
 317               		.section	.progmem.data.__m.2309,"a",@progbits
 320               	__m.2309:
 321 0000 75        		.byte	117
 322 0001 00        		.byte	0
 323 0002 01        		.byte	1
 324 0003 0B        		.byte	11
 325 0004 02        		.byte	2
 326 0005 0B        		.byte	11
 327 0006 01        		.byte	1
 328 0007 08        		.byte	8
 329 0008 02        		.byte	2
 330 0009 08        		.byte	8
 331 000a 01        		.byte	1
 332 000b 0F        		.byte	15
 333 000c 02        		.byte	2
 334 000d 0F        		.byte	15
 335 000e 01        		.byte	1
 336 000f 0F        		.byte	15
 337 0010 02        		.byte	2
 338 0011 0F        		.byte	15
 339 0012 74        		.byte	116
 340 0013 FF        		.byte	-1
 341 0014 01        		.byte	1
 342 0015 12        		.byte	18
 343 0016 02        		.byte	2
 344 0017 12        		.byte	18
 345 0018 00        		.byte	0
 346               	.global	fn_actions
 347               		.section	.progmem.data.fn_actions,"a",@progbits
 350               	fn_actions:
 351 0000 018C      		.word	-29695
 352 0002 F0A1      		.word	-24080
 353 0004 38A2      		.word	-24008
 354 0006 33A3      		.word	-23757
 355 0008 2CA4      		.word	-23508
 356 000a F1A4      		.word	-23311
 357 000c 2831      		.word	12584
 358 000e 0022      		.word	8704
 359 0010 02C0      		.word	-16382
 360 0012 5004      		.word	1104
 361 0014 4F04      		.word	1103
 362               	.global	keymaps
 363               		.section	.progmem.data.keymaps,"a",@progbits
 366               	keymaps:
 367 0000 1F        		.byte	31
 368 0001 14        		.byte	20
 369 0002 1A        		.byte	26
 370 0003 16        		.byte	22
 371 0004 04        		.byte	4
 372 0005 1D        		.byte	29
 373 0006 1B        		.byte	27
 374 0007 06        		.byte	6
 375 0008 20        		.byte	32
 376 0009 21        		.byte	33
 377 000a 15        		.byte	21
 378 000b 08        		.byte	8
 379 000c 07        		.byte	7
 380 000d 09        		.byte	9
 381 000e 19        		.byte	25
 382 000f 05        		.byte	5
 383 0010 22        		.byte	34
 384 0011 23        		.byte	35
 385 0012 1C        		.byte	28
 386 0013 17        		.byte	23
 387 0014 0A        		.byte	10
 388 0015 0B        		.byte	11
 389 0016 11        		.byte	17
 390 0017 00        		.byte	0
 391 0018 1E        		.byte	30
 392 0019 29        		.byte	41
 393 001a 2B        		.byte	43
 394 001b E0        		.byte	-32
 395 001c C7        		.byte	-57
 396 001d E3        		.byte	-29
 397 001e E2        		.byte	-30
 398 001f C4        		.byte	-60
 399 0020 24        		.byte	36
 400 0021 25        		.byte	37
 401 0022 18        		.byte	24
 402 0023 0C        		.byte	12
 403 0024 0E        		.byte	14
 404 0025 0D        		.byte	13
 405 0026 10        		.byte	16
 406 0027 00        		.byte	0
 407 0028 31        		.byte	49
 408 0029 35        		.byte	53
 409 002a 2A        		.byte	42
 410 002b C6        		.byte	-58
 411 002c C1        		.byte	-63
 412 002d E5        		.byte	-27
 413 002e E7        		.byte	-25
 414 002f C5        		.byte	-59
 415 0030 26        		.byte	38
 416 0031 27        		.byte	39
 417 0032 12        		.byte	18
 418 0033 13        		.byte	19
 419 0034 C3        		.byte	-61
 420 0035 0F        		.byte	15
 421 0036 36        		.byte	54
 422 0037 00        		.byte	0
 423 0038 2D        		.byte	45
 424 0039 2E        		.byte	46
 425 003a 30        		.byte	48
 426 003b 2F        		.byte	47
 427 003c 34        		.byte	52
 428 003d C2        		.byte	-62
 429 003e 37        		.byte	55
 430 003f 00        		.byte	0
 431 0040 3B        		.byte	59
 432 0041 00        		.byte	0
 433 0042 00        		.byte	0
 434 0043 A9        		.byte	-87
 435 0044 AA        		.byte	-86
 436 0045 00        		.byte	0
 437 0046 00        		.byte	0
 438 0047 00        		.byte	0
 439 0048 3C        		.byte	60
 440 0049 3D        		.byte	61
 441 004a 00        		.byte	0
 442 004b 00        		.byte	0
 443 004c A8        		.byte	-88
 444 004d 00        		.byte	0
 445 004e 00        		.byte	0
 446 004f 00        		.byte	0
 447 0050 3E        		.byte	62
 448 0051 3F        		.byte	63
 449 0052 00        		.byte	0
 450 0053 00        		.byte	0
 451 0054 00        		.byte	0
 452 0055 55        		.byte	85
 453 0056 57        		.byte	87
 454 0057 00        		.byte	0
 455 0058 3A        		.byte	58
 456 0059 35        		.byte	53
 457 005a 39        		.byte	57
 458 005b E0        		.byte	-32
 459 005c E1        		.byte	-31
 460 005d E3        		.byte	-29
 461 005e E2        		.byte	-30
 462 005f 01        		.byte	1
 463 0060 40        		.byte	64
 464 0061 41        		.byte	65
 465 0062 00        		.byte	0
 466 0063 46        		.byte	70
 467 0064 4A        		.byte	74
 468 0065 54        		.byte	84
 469 0066 56        		.byte	86
 470 0067 00        		.byte	0
 471 0068 49        		.byte	73
 472 0069 4C        		.byte	76
 473 006a 2A        		.byte	42
 474 006b 28        		.byte	40
 475 006c 01        		.byte	1
 476 006d E5        		.byte	-27
 477 006e E7        		.byte	-25
 478 006f E6        		.byte	-26
 479 0070 42        		.byte	66
 480 0071 43        		.byte	67
 481 0072 47        		.byte	71
 482 0073 48        		.byte	72
 483 0074 50        		.byte	80
 484 0075 4B        		.byte	75
 485 0076 4D        		.byte	77
 486 0077 00        		.byte	0
 487 0078 44        		.byte	68
 488 0079 45        		.byte	69
 489 007a 00        		.byte	0
 490 007b 52        		.byte	82
 491 007c 4F        		.byte	79
 492 007d 51        		.byte	81
 493 007e 4E        		.byte	78
 494 007f 00        		.byte	0
 495 0080 3B        		.byte	59
 496 0081 4A        		.byte	74
 497 0082 4E        		.byte	78
 498 0083 50        		.byte	80
 499 0084 00        		.byte	0
 500 0085 00        		.byte	0
 501 0086 00        		.byte	0
 502 0087 00        		.byte	0
 503 0088 3C        		.byte	60
 504 0089 3D        		.byte	61
 505 008a 4B        		.byte	75
 506 008b 52        		.byte	82
 507 008c 51        		.byte	81
 508 008d 4F        		.byte	79
 509 008e 00        		.byte	0
 510 008f 00        		.byte	0
 511 0090 3E        		.byte	62
 512 0091 3F        		.byte	63
 513 0092 4A        		.byte	74
 514 0093 4D        		.byte	77
 515 0094 00        		.byte	0
 516 0095 50        		.byte	80
 517 0096 4A        		.byte	74
 518 0097 00        		.byte	0
 519 0098 3A        		.byte	58
 520 0099 35        		.byte	53
 521 009a 2B        		.byte	43
 522 009b E0        		.byte	-32
 523 009c E1        		.byte	-31
 524 009d E3        		.byte	-29
 525 009e E2        		.byte	-30
 526 009f 2C        		.byte	44
 527 00a0 40        		.byte	64
 528 00a1 41        		.byte	65
 529 00a2 4E        		.byte	78
 530 00a3 4B        		.byte	75
 531 00a4 52        		.byte	82
 532 00a5 51        		.byte	81
 533 00a6 4E        		.byte	78
 534 00a7 00        		.byte	0
 535 00a8 49        		.byte	73
 536 00a9 4C        		.byte	76
 537 00aa 2A        		.byte	42
 538 00ab 28        		.byte	40
 539 00ac 01        		.byte	1
 540 00ad E5        		.byte	-27
 541 00ae E7        		.byte	-25
 542 00af E6        		.byte	-26
 543 00b0 42        		.byte	66
 544 00b1 43        		.byte	67
 545 00b2 4D        		.byte	77
 546 00b3 00        		.byte	0
 547 00b4 00        		.byte	0
 548 00b5 4F        		.byte	79
 549 00b6 4B        		.byte	75
 550 00b7 00        		.byte	0
 551 00b8 44        		.byte	68
 552 00b9 45        		.byte	69
 553 00ba 00        		.byte	0
 554 00bb 00        		.byte	0
 555 00bc 00        		.byte	0
 556 00bd C2        		.byte	-62
 557 00be 4D        		.byte	77
 558 00bf 00        		.byte	0
 559 00c0 3B        		.byte	59
 560 00c1 00        		.byte	0
 561 00c2 00        		.byte	0
 562 00c3 FE        		.byte	-2
 563 00c4 FD        		.byte	-3
 564 00c5 00        		.byte	0
 565 00c6 00        		.byte	0
 566 00c7 00        		.byte	0
 567 00c8 3C        		.byte	60
 568 00c9 3D        		.byte	61
 569 00ca 00        		.byte	0
 570 00cb 00        		.byte	0
 571 00cc FF        		.byte	-1
 572 00cd FF        		.byte	-1
 573 00ce 00        		.byte	0
 574 00cf F6        		.byte	-10
 575 00d0 3E        		.byte	62
 576 00d1 3F        		.byte	63
 577 00d2 FB        		.byte	-5
 578 00d3 00        		.byte	0
 579 00d4 00        		.byte	0
 580 00d5 00        		.byte	0
 581 00d6 F5        		.byte	-11
 582 00d7 00        		.byte	0
 583 00d8 3A        		.byte	58
 584 00d9 35        		.byte	53
 585 00da C8        		.byte	-56
 586 00db E0        		.byte	-32
 587 00dc E1        		.byte	-31
 588 00dd E3        		.byte	-29
 589 00de E2        		.byte	-30
 590 00df F4        		.byte	-12
 591 00e0 40        		.byte	64
 592 00e1 41        		.byte	65
 593 00e2 FA        		.byte	-6
 594 00e3 F0        		.byte	-16
 595 00e4 F1        		.byte	-15
 596 00e5 F2        		.byte	-14
 597 00e6 F4        		.byte	-12
 598 00e7 00        		.byte	0
 599 00e8 49        		.byte	73
 600 00e9 4C        		.byte	76
 601 00ea C8        		.byte	-56
 602 00eb 28        		.byte	40
 603 00ec 01        		.byte	1
 604 00ed E5        		.byte	-27
 605 00ee 01        		.byte	1
 606 00ef 01        		.byte	1
 607 00f0 42        		.byte	66
 608 00f1 43        		.byte	67
 609 00f2 F9        		.byte	-7
 610 00f3 FC        		.byte	-4
 611 00f4 C3        		.byte	-61
 612 00f5 F3        		.byte	-13
 613 00f6 C9        		.byte	-55
 614 00f7 00        		.byte	0
 615 00f8 44        		.byte	68
 616 00f9 45        		.byte	69
 617 00fa CA        		.byte	-54
 618 00fb C9        		.byte	-55
 619 00fc 00        		.byte	0
 620 00fd 00        		.byte	0
 621 00fe CA        		.byte	-54
 622 00ff 00        		.byte	0
 623 0100 3B        		.byte	59
 624 0101 00        		.byte	0
 625 0102 00        		.byte	0
 626 0103 A9        		.byte	-87
 627 0104 AA        		.byte	-86
 628 0105 00        		.byte	0
 629 0106 00        		.byte	0
 630 0107 00        		.byte	0
 631 0108 3C        		.byte	60
 632 0109 3D        		.byte	61
 633 010a 00        		.byte	0
 634 010b 00        		.byte	0
 635 010c A8        		.byte	-88
 636 010d 00        		.byte	0
 637 010e 00        		.byte	0
 638 010f F6        		.byte	-10
 639 0110 3E        		.byte	62
 640 0111 3F        		.byte	63
 641 0112 FB        		.byte	-5
 642 0113 00        		.byte	0
 643 0114 00        		.byte	0
 644 0115 00        		.byte	0
 645 0116 F5        		.byte	-11
 646 0117 00        		.byte	0
 647 0118 3A        		.byte	58
 648 0119 35        		.byte	53
 649 011a C8        		.byte	-56
 650 011b E0        		.byte	-32
 651 011c E1        		.byte	-31
 652 011d E3        		.byte	-29
 653 011e E2        		.byte	-30
 654 011f 01        		.byte	1
 655 0120 40        		.byte	64
 656 0121 41        		.byte	65
 657 0122 FA        		.byte	-6
 658 0123 F0        		.byte	-16
 659 0124 F1        		.byte	-15
 660 0125 F2        		.byte	-14
 661 0126 F4        		.byte	-12
 662 0127 00        		.byte	0
 663 0128 49        		.byte	73
 664 0129 4C        		.byte	76
 665 012a C8        		.byte	-56
 666 012b 28        		.byte	40
 667 012c 01        		.byte	1
 668 012d E5        		.byte	-27
 669 012e 01        		.byte	1
 670 012f 01        		.byte	1
 671 0130 42        		.byte	66
 672 0131 43        		.byte	67
 673 0132 F9        		.byte	-7
 674 0133 FC        		.byte	-4
 675 0134 F4        		.byte	-12
 676 0135 F3        		.byte	-13
 677 0136 C9        		.byte	-55
 678 0137 00        		.byte	0
 679 0138 44        		.byte	68
 680 0139 45        		.byte	69
 681 013a F8        		.byte	-8
 682 013b F7        		.byte	-9
 683 013c 00        		.byte	0
 684 013d 00        		.byte	0
 685 013e CA        		.byte	-54
 686 013f 00        		.byte	0
 687               		.text
 688               	.Letext0:
 689               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 690               		.file 3 "./tmk_core/common/keycode.h"
 691               		.file 4 "./tmk_core/common/keyboard.h"
 692               		.file 5 "./tmk_core/common/action_code.h"
 693               		.file 6 "./tmk_core/common/action_macro.h"
 694               		.file 7 "./tmk_core/common/action.h"
 695               		.file 8 "./tmk_core/common/debug.h"
 696               		.file 9 "./tmk_core/common/avr/xprintf.h"
 697               		.file 10 "./tmk_core/common/action_util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 keymap_hasu.c
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:2      *ABS*:0000003e __SP_H__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:3      *ABS*:0000003d __SP_L__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:4      *ABS*:0000003f __SREG__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:6      *ABS*:00000001 __zero_reg__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:13     .text.action_get_macro:00000000 action_get_macro
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:320    .progmem.data.__m.2309:00000000 __m.2309
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:311    .progmem.data.__m.2312:00000000 __m.2312
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:302    .progmem.data.__m.2315:00000000 __m.2315
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:295    .progmem.data.__m.2317:00000000 __m.2317
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:77     .text.action_function:00000000 action_function
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:290    .progmem.data.__c.2324:00000000 __c.2324
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:285    .progmem.data.__c.2326:00000000 __c.2326
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:280    .progmem.data.__c.2328:00000000 __c.2328
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:275    .progmem.data.__c.2330:00000000 __c.2330
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:270    .progmem.data.__c.2332:00000000 __c.2332
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:350    .progmem.data.fn_actions:00000000 fn_actions
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccep8wIC.s:366    .progmem.data.keymaps:00000000 keymaps

UNDEFINED SYMBOLS
debug_config
xputs
__xprintf
register_mods
add_weak_mods
send_keyboard_report
register_code
unregister_code
del_weak_mods
unregister_mods
