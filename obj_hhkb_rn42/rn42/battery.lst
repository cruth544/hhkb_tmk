   1               		.file	"battery.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.battery_led,"ax",@progbits
  11               	.global	battery_led
  13               	battery_led:
  14               	.LFB7:
  15               		.file 1 "rn42/battery.c"
   1:rn42/battery.c **** #include <avr/io.h>
   2:rn42/battery.c **** #include <util/delay.h>
   3:rn42/battery.c **** #include "battery.h"
   4:rn42/battery.c **** 
   5:rn42/battery.c **** 
   6:rn42/battery.c **** /*
   7:rn42/battery.c ****  * Battery
   8:rn42/battery.c ****  */
   9:rn42/battery.c **** void battery_init(void)
  10:rn42/battery.c **** {
  11:rn42/battery.c ****     // blink 
  12:rn42/battery.c ****     battery_led(LED_ON);  _delay_ms(100);
  13:rn42/battery.c ****     battery_led(LED_OFF); _delay_ms(100);
  14:rn42/battery.c ****     battery_led(LED_ON);  _delay_ms(100);
  15:rn42/battery.c ****     battery_led(LED_OFF); _delay_ms(100);
  16:rn42/battery.c ****     // LED indicates charger status
  17:rn42/battery.c ****     battery_led(LED_CHARGER);
  18:rn42/battery.c **** 
  19:rn42/battery.c ****     // ADC setting for voltage monitor
  20:rn42/battery.c ****     // Ref:2.56V band-gap, Input:ADC0(PF0), Prescale:128(16MHz/128=125KHz)
  21:rn42/battery.c ****     ADMUX = (1<<REFS1) | (1<<REFS0);
  22:rn42/battery.c ****     ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  23:rn42/battery.c ****     // digital input buffer disable(24.9.5)
  24:rn42/battery.c ****     DIDR0 = (1<<ADC0D) | (1<<ADC4D) | (1<<ADC7D);
  25:rn42/battery.c ****     DIDR1 = (1<<AIN0D);
  26:rn42/battery.c ****     DIDR2 = (1<<ADC8D) | (1<<ADC9D) | (1<<ADC11D) | (1<<ADC12D) | (1<<ADC13D);
  27:rn42/battery.c **** 
  28:rn42/battery.c ****     // ADC disable voltate divider(PF4)
  29:rn42/battery.c ****     DDRF  |=  (1<<4);
  30:rn42/battery.c ****     PORTF &= ~(1<<4);
  31:rn42/battery.c **** }
  32:rn42/battery.c **** 
  33:rn42/battery.c **** // Indicator for battery
  34:rn42/battery.c **** void battery_led(battery_led_t val)
  35:rn42/battery.c **** {
  16               		.loc 1 35 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  36:rn42/battery.c ****     if (val == LED_TOGGLE) {
  23               		.loc 1 36 0
  24 0000 8330      		cpi r24,lo8(3)
  25 0002 01F4      		brne .L2
  37:rn42/battery.c ****         // Toggle LED
  38:rn42/battery.c ****         DDRF  |=  (1<<5);
  26               		.loc 1 38 0
  27 0004 859A      		sbi 0x10,5
  39:rn42/battery.c ****         PINF  |=  (1<<5);
  28               		.loc 1 39 0
  29 0006 7D9A      		sbi 0xf,5
  30 0008 0895      		ret
  31               	.L2:
  40:rn42/battery.c ****     } else if (val == LED_ON) {
  32               		.loc 1 40 0
  33 000a 8130      		cpi r24,lo8(1)
  34 000c 01F4      		brne .L4
  41:rn42/battery.c ****         // On overriding charger status
  42:rn42/battery.c ****         DDRF  |=  (1<<5);
  35               		.loc 1 42 0
  36 000e 859A      		sbi 0x10,5
  37 0010 00C0      		rjmp .L6
  38               	.L4:
  43:rn42/battery.c ****         PORTF &= ~(1<<5);
  44:rn42/battery.c ****     } else if (val == LED_OFF) {
  39               		.loc 1 44 0
  40 0012 8230      		cpi r24,lo8(2)
  41 0014 01F4      		brne .L5
  45:rn42/battery.c ****         // Off overriding charger status
  46:rn42/battery.c ****         DDRF  |=  (1<<5);
  42               		.loc 1 46 0
  43 0016 859A      		sbi 0x10,5
  47:rn42/battery.c ****         PORTF |=  (1<<5);
  44               		.loc 1 47 0
  45 0018 8D9A      		sbi 0x11,5
  46 001a 0895      		ret
  47               	.L5:
  48:rn42/battery.c ****     } else {
  49:rn42/battery.c ****         // Display charger status
  50:rn42/battery.c ****         DDRF  &= ~(1<<5);
  48               		.loc 1 50 0
  49 001c 8598      		cbi 0x10,5
  50               	.L6:
  51:rn42/battery.c ****         PORTF &= ~(1<<5);
  51               		.loc 1 51 0
  52 001e 8D98      		cbi 0x11,5
  53 0020 0895      		ret
  54               		.cfi_endproc
  55               	.LFE7:
  57               		.section	.text.battery_init,"ax",@progbits
  58               	.global	battery_init
  60               	battery_init:
  61               	.LFB6:
  10:rn42/battery.c **** {
  62               		.loc 1 10 0
  63               		.cfi_startproc
  64               	/* prologue: function */
  65               	/* frame size = 0 */
  66               	/* stack size = 0 */
  67               	.L__stack_usage = 0
  12:rn42/battery.c ****     battery_led(LED_ON);  _delay_ms(100);
  68               		.loc 1 12 0
  69 0000 81E0      		ldi r24,lo8(1)
  70 0002 0E94 0000 		call battery_led
  71               	.LVL1:
  72               	.LBB14:
  73               	.LBB15:
  74               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  75               		.loc 2 163 0
  76 0006 2FEF      		ldi r18,lo8(319999)
  77 0008 81EE      		ldi r24,hi8(319999)
  78 000a 94E0      		ldi r25,hlo8(319999)
  79 000c 2150      		1: subi r18,1
  80 000e 8040      		sbci r24,0
  81 0010 9040      		sbci r25,0
  82 0012 01F4      		brne 1b
  83 0014 00C0      		rjmp .
  84 0016 0000      		nop
  85               	.LBE15:
  86               	.LBE14:
  13:rn42/battery.c ****     battery_led(LED_OFF); _delay_ms(100);
  87               		.loc 1 13 0
  88 0018 82E0      		ldi r24,lo8(2)
  89 001a 0E94 0000 		call battery_led
  90               	.LVL2:
  91               	.LBB16:
  92               	.LBB17:
  93               		.loc 2 163 0
  94 001e 2FEF      		ldi r18,lo8(319999)
  95 0020 81EE      		ldi r24,hi8(319999)
  96 0022 94E0      		ldi r25,hlo8(319999)
  97 0024 2150      		1: subi r18,1
  98 0026 8040      		sbci r24,0
  99 0028 9040      		sbci r25,0
 100 002a 01F4      		brne 1b
 101 002c 00C0      		rjmp .
 102 002e 0000      		nop
 103               	.LBE17:
 104               	.LBE16:
  14:rn42/battery.c ****     battery_led(LED_ON);  _delay_ms(100);
 105               		.loc 1 14 0
 106 0030 81E0      		ldi r24,lo8(1)
 107 0032 0E94 0000 		call battery_led
 108               	.LVL3:
 109               	.LBB18:
 110               	.LBB19:
 111               		.loc 2 163 0
 112 0036 2FEF      		ldi r18,lo8(319999)
 113 0038 81EE      		ldi r24,hi8(319999)
 114 003a 94E0      		ldi r25,hlo8(319999)
 115 003c 2150      		1: subi r18,1
 116 003e 8040      		sbci r24,0
 117 0040 9040      		sbci r25,0
 118 0042 01F4      		brne 1b
 119 0044 00C0      		rjmp .
 120 0046 0000      		nop
 121               	.LBE19:
 122               	.LBE18:
  15:rn42/battery.c ****     battery_led(LED_OFF); _delay_ms(100);
 123               		.loc 1 15 0
 124 0048 82E0      		ldi r24,lo8(2)
 125 004a 0E94 0000 		call battery_led
 126               	.LVL4:
 127               	.LBB20:
 128               	.LBB21:
 129               		.loc 2 163 0
 130 004e 2FEF      		ldi r18,lo8(319999)
 131 0050 81EE      		ldi r24,hi8(319999)
 132 0052 94E0      		ldi r25,hlo8(319999)
 133 0054 2150      		1: subi r18,1
 134 0056 8040      		sbci r24,0
 135 0058 9040      		sbci r25,0
 136 005a 01F4      		brne 1b
 137 005c 00C0      		rjmp .
 138 005e 0000      		nop
 139               	.LBE21:
 140               	.LBE20:
  17:rn42/battery.c ****     battery_led(LED_CHARGER);
 141               		.loc 1 17 0
 142 0060 80E0      		ldi r24,0
 143 0062 0E94 0000 		call battery_led
 144               	.LVL5:
  21:rn42/battery.c ****     ADMUX = (1<<REFS1) | (1<<REFS0);
 145               		.loc 1 21 0
 146 0066 80EC      		ldi r24,lo8(-64)
 147 0068 8093 7C00 		sts 124,r24
  22:rn42/battery.c ****     ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 148               		.loc 1 22 0
 149 006c 87E0      		ldi r24,lo8(7)
 150 006e 8093 7A00 		sts 122,r24
  24:rn42/battery.c ****     DIDR0 = (1<<ADC0D) | (1<<ADC4D) | (1<<ADC7D);
 151               		.loc 1 24 0
 152 0072 81E9      		ldi r24,lo8(-111)
 153 0074 8093 7E00 		sts 126,r24
  25:rn42/battery.c ****     DIDR1 = (1<<AIN0D);
 154               		.loc 1 25 0
 155 0078 81E0      		ldi r24,lo8(1)
 156 007a 8093 7F00 		sts 127,r24
  26:rn42/battery.c ****     DIDR2 = (1<<ADC8D) | (1<<ADC9D) | (1<<ADC11D) | (1<<ADC12D) | (1<<ADC13D);
 157               		.loc 1 26 0
 158 007e 8BE3      		ldi r24,lo8(59)
 159 0080 8093 7D00 		sts 125,r24
  29:rn42/battery.c ****     DDRF  |=  (1<<4);
 160               		.loc 1 29 0
 161 0084 849A      		sbi 0x10,4
  30:rn42/battery.c ****     PORTF &= ~(1<<4);
 162               		.loc 1 30 0
 163 0086 8C98      		cbi 0x11,4
 164 0088 0895      		ret
 165               		.cfi_endproc
 166               	.LFE6:
 168               		.section	.text.battery_charging,"ax",@progbits
 169               	.global	battery_charging
 171               	battery_charging:
 172               	.LFB8:
  52:rn42/battery.c ****     }
  53:rn42/battery.c **** }
  54:rn42/battery.c **** 
  55:rn42/battery.c **** bool battery_charging(void)
  56:rn42/battery.c **** {
 173               		.loc 1 56 0
 174               		.cfi_startproc
 175               	/* prologue: function */
 176               	/* frame size = 0 */
 177               	/* stack size = 0 */
 178               	.L__stack_usage = 0
  57:rn42/battery.c ****     if (!(USBSTA&(1<<VBUS))) return false;
 179               		.loc 1 57 0
 180 0000 8091 D900 		lds r24,217
 181 0004 80FF      		sbrs r24,0
 182 0006 00C0      		rjmp .L11
  58:rn42/battery.c **** 
  59:rn42/battery.c ****     // Charger Status:
  60:rn42/battery.c ****     //   MCP73831   MCP73832   LTC4054  Status
  61:rn42/battery.c ****     //   Hi-Z       Hi-Z       Hi-Z     Shutdown/No Battery
  62:rn42/battery.c ****     //   Low        Low        Low      Charging
  63:rn42/battery.c ****     //   Hi         Hi-Z       Hi-Z     Charged
  64:rn42/battery.c **** 
  65:rn42/battery.c ****     // preserve last register status
  66:rn42/battery.c ****     uint8_t ddrf_prev  = DDRF;
 183               		.loc 1 66 0
 184 0008 20B3      		in r18,0x10
 185               	.LVL6:
  67:rn42/battery.c ****     uint8_t portf_prev = PORTF;
 186               		.loc 1 67 0
 187 000a 91B3      		in r25,0x11
 188               	.LVL7:
  68:rn42/battery.c **** 
  69:rn42/battery.c ****     // Input with pullup
  70:rn42/battery.c ****     DDRF  &= ~(1<<5);
 189               		.loc 1 70 0
 190 000c 8598      		cbi 0x10,5
  71:rn42/battery.c ****     PORTF |=  (1<<5);
 191               		.loc 1 71 0
 192 000e 8D9A      		sbi 0x11,5
 193               	.LVL8:
 194               	.LBB22:
 195               	.LBB23:
 196               		.loc 2 163 0
 197 0010 EFE9      		ldi r30,lo8(3999)
 198 0012 FFE0      		ldi r31,hi8(3999)
 199 0014 3197      		1: sbiw r30,1
 200 0016 01F4      		brne 1b
 201 0018 00C0      		rjmp .
 202 001a 0000      		nop
 203               	.LBE23:
 204               	.LBE22:
  72:rn42/battery.c ****     _delay_ms(1);
  73:rn42/battery.c ****     bool charging = PINF&(1<<5) ? false : true;
 205               		.loc 1 73 0
 206 001c 8FB1      		in r24,0xf
 207 001e 85FB      		bst r24,5
 208 0020 8827      		clr r24
 209 0022 80F9      		bld r24,0
 210               	.LVL9:
  74:rn42/battery.c **** 
  75:rn42/battery.c ****     // restore last register status
  76:rn42/battery.c ****     DDRF  = (DDRF&~(1<<5))  | (ddrf_prev&(1<<5));
 211               		.loc 1 76 0
 212 0024 30B3      		in r19,0x10
 213 0026 2072      		andi r18,lo8(32)
 214               	.LVL10:
 215 0028 3F7D      		andi r19,lo8(-33)
 216 002a 232B      		or r18,r19
 217 002c 20BB      		out 0x10,r18
  77:rn42/battery.c ****     PORTF = (PORTF&~(1<<5)) | (portf_prev&(1<<5));
 218               		.loc 1 77 0
 219 002e 21B3      		in r18,0x11
 220 0030 9072      		andi r25,lo8(32)
 221               	.LVL11:
 222 0032 2F7D      		andi r18,lo8(-33)
 223 0034 922B      		or r25,r18
 224 0036 91BB      		out 0x11,r25
  78:rn42/battery.c **** 
  79:rn42/battery.c ****     // TODO: With MCP73831 this can not get stable status when charging.
  80:rn42/battery.c ****     // LED is powered from PSEL line(USB or Lipo)
  81:rn42/battery.c ****     // due to weak low output of STAT pin?
  82:rn42/battery.c ****     // due to pull-up'd via resitor and LED?
  83:rn42/battery.c ****     return charging;
 225               		.loc 1 83 0
 226 0038 91E0      		ldi r25,lo8(1)
 227 003a 8927      		eor r24,r25
 228               	.LVL12:
 229 003c 0895      		ret
 230               	.LVL13:
 231               	.L11:
  57:rn42/battery.c ****     if (!(USBSTA&(1<<VBUS))) return false;
 232               		.loc 1 57 0
 233 003e 80E0      		ldi r24,0
  84:rn42/battery.c **** }
 234               		.loc 1 84 0
 235 0040 0895      		ret
 236               		.cfi_endproc
 237               	.LFE8:
 239               		.section	.text.battery_voltage,"ax",@progbits
 240               	.global	battery_voltage
 242               	battery_voltage:
 243               	.LFB9:
  85:rn42/battery.c **** 
  86:rn42/battery.c **** // Returns voltage in mV
  87:rn42/battery.c **** uint16_t battery_voltage(void)
  88:rn42/battery.c **** {
 244               		.loc 1 88 0
 245               		.cfi_startproc
 246 0000 CF93      		push r28
 247               	.LCFI0:
 248               		.cfi_def_cfa_offset 3
 249               		.cfi_offset 28, -2
 250 0002 DF93      		push r29
 251               	.LCFI1:
 252               		.cfi_def_cfa_offset 4
 253               		.cfi_offset 29, -3
 254 0004 00D0      		rcall .
 255               	.LCFI2:
 256               		.cfi_def_cfa_offset 6
 257 0006 CDB7      		in r28,__SP_L__
 258 0008 DEB7      		in r29,__SP_H__
 259               	.LCFI3:
 260               		.cfi_def_cfa_register 28
 261               	/* prologue: function */
 262               	/* frame size = 2 */
 263               	/* stack size = 4 */
 264               	.L__stack_usage = 4
  89:rn42/battery.c ****     // ADC disable voltate divider(PF4)
  90:rn42/battery.c ****     DDRF  |=  (1<<4);
 265               		.loc 1 90 0
 266 000a 849A      		sbi 0x10,4
  91:rn42/battery.c ****     PORTF |=  (1<<4);
 267               		.loc 1 91 0
 268 000c 8C9A      		sbi 0x11,4
  92:rn42/battery.c **** 
  93:rn42/battery.c ****     volatile uint16_t bat;
  94:rn42/battery.c ****     ADCSRA |= (1<<ADEN);
 269               		.loc 1 94 0
 270 000e 8091 7A00 		lds r24,122
 271 0012 8068      		ori r24,lo8(-128)
 272 0014 8093 7A00 		sts 122,r24
 273               	.LVL14:
 274               	.LBB24:
 275               	.LBB25:
 276               		.loc 2 163 0
 277 0018 8FE9      		ldi r24,lo8(3999)
 278 001a 9FE0      		ldi r25,hi8(3999)
 279 001c 0197      		1: sbiw r24,1
 280 001e 01F4      		brne 1b
 281 0020 00C0      		rjmp .
 282 0022 0000      		nop
 283               	.LBE25:
 284               	.LBE24:
  95:rn42/battery.c ****     _delay_ms(1);   // wait for charging S/H capacitance
  96:rn42/battery.c **** 
  97:rn42/battery.c ****     ADCSRA |= (1<<ADSC);
 285               		.loc 1 97 0
 286 0024 8091 7A00 		lds r24,122
 287 0028 8064      		ori r24,lo8(64)
 288 002a 8093 7A00 		sts 122,r24
 289               	.L14:
  98:rn42/battery.c ****     while (ADCSRA & (1<<ADSC)) ;
 290               		.loc 1 98 0 discriminator 1
 291 002e 8091 7A00 		lds r24,122
 292 0032 86FD      		sbrc r24,6
 293 0034 00C0      		rjmp .L14
  99:rn42/battery.c ****     bat = ADC;
 294               		.loc 1 99 0
 295 0036 8091 7800 		lds r24,120
 296 003a 9091 7900 		lds r25,120+1
 297 003e 9A83      		std Y+2,r25
 298 0040 8983      		std Y+1,r24
 100:rn42/battery.c **** 
 101:rn42/battery.c ****     ADCSRA &= ~(1<<ADEN);
 299               		.loc 1 101 0
 300 0042 8091 7A00 		lds r24,122
 301 0046 8F77      		andi r24,lo8(127)
 302 0048 8093 7A00 		sts 122,r24
 102:rn42/battery.c **** 
 103:rn42/battery.c ****     // ADC disable voltate divider(PF4)
 104:rn42/battery.c ****     DDRF  |=  (1<<4);
 303               		.loc 1 104 0
 304 004c 849A      		sbi 0x10,4
 105:rn42/battery.c ****     PORTF &= ~(1<<4);
 305               		.loc 1 105 0
 306 004e 8C98      		cbi 0x11,4
 106:rn42/battery.c **** 
 107:rn42/battery.c ****     return (bat - BATTERY_ADC_OFFSET) * BATTERY_ADC_RESOLUTION;
 307               		.loc 1 107 0
 308 0050 2981      		ldd r18,Y+1
 309 0052 3A81      		ldd r19,Y+2
 310 0054 45E0      		ldi r20,lo8(5)
 311 0056 429F      		mul r20,r18
 312 0058 C001      		movw r24,r0
 313 005a 439F      		mul r20,r19
 314 005c 900D      		add r25,r0
 315 005e 1124      		clr __zero_reg__
 108:rn42/battery.c **** }
 316               		.loc 1 108 0
 317 0060 8055      		subi r24,80
 318 0062 9109      		sbc r25,__zero_reg__
 319               	/* epilogue start */
 320 0064 0F90      		pop __tmp_reg__
 321 0066 0F90      		pop __tmp_reg__
 322 0068 DF91      		pop r29
 323 006a CF91      		pop r28
 324 006c 0895      		ret
 325               		.cfi_endproc
 326               	.LFE9:
 328               		.section	.text.battery_status,"ax",@progbits
 329               	.global	battery_status
 331               	battery_status:
 332               	.LFB11:
 109:rn42/battery.c **** 
 110:rn42/battery.c **** static bool low_voltage(void) {
 111:rn42/battery.c ****     static bool low = false;
 112:rn42/battery.c ****     uint16_t v = battery_voltage();
 113:rn42/battery.c ****     if (v < BATTERY_VOLTAGE_LOW_LIMIT) {
 114:rn42/battery.c ****         low = true;
 115:rn42/battery.c ****     } else if (v > BATTERY_VOLTAGE_LOW_RECOVERY) {
 116:rn42/battery.c ****         low = false;
 117:rn42/battery.c ****     }
 118:rn42/battery.c ****     return low;
 119:rn42/battery.c **** }
 120:rn42/battery.c **** 
 121:rn42/battery.c **** battery_status_t battery_status(void)
 122:rn42/battery.c **** {
 333               		.loc 1 122 0
 334               		.cfi_startproc
 335               	/* prologue: function */
 336               	/* frame size = 0 */
 337               	/* stack size = 0 */
 338               	.L__stack_usage = 0
 123:rn42/battery.c ****     if (USBSTA&(1<<VBUS)) {
 339               		.loc 1 123 0
 340 0000 8091 D900 		lds r24,217
 341 0004 80FD      		sbrc r24,0
 124:rn42/battery.c ****         /* powered */
 125:rn42/battery.c ****         return battery_charging() ? CHARGING : FULL_CHARGED;
 342               		.loc 1 125 0
 343 0006 0C94 0000 		jmp battery_charging
 344               	.LVL15:
 345               	.L16:
 346               	.LBB28:
 347               	.LBB29:
 112:rn42/battery.c ****     uint16_t v = battery_voltage();
 348               		.loc 1 112 0
 349 000a 0E94 0000 		call battery_voltage
 350               	.LVL16:
 113:rn42/battery.c ****     if (v < BATTERY_VOLTAGE_LOW_LIMIT) {
 351               		.loc 1 113 0
 352 000e 8C3A      		cpi r24,-84
 353 0010 2DE0      		ldi r18,13
 354 0012 9207      		cpc r25,r18
 355 0014 00F4      		brsh .L17
 114:rn42/battery.c ****         low = true;
 356               		.loc 1 114 0
 357 0016 81E0      		ldi r24,lo8(1)
 358               	.LVL17:
 359 0018 8093 0000 		sts low.1634,r24
 360 001c 00C0      		rjmp .L18
 361               	.LVL18:
 362               	.L17:
 115:rn42/battery.c ****     } else if (v > BATTERY_VOLTAGE_LOW_RECOVERY) {
 363               		.loc 1 115 0
 364 001e 8537      		cpi r24,117
 365 0020 9E40      		sbci r25,14
 366 0022 00F0      		brlo .L18
 116:rn42/battery.c ****         low = false;
 367               		.loc 1 116 0
 368 0024 1092 0000 		sts low.1634,__zero_reg__
 369               	.LVL19:
 370               	.L18:
 371               	.LBE29:
 372               	.LBE28:
 126:rn42/battery.c ****     } else {
 127:rn42/battery.c ****         /* not powered */
 128:rn42/battery.c ****         return low_voltage() ? LOW_VOLTAGE : DISCHARGING;
 373               		.loc 1 128 0
 374 0028 8091 0000 		lds r24,low.1634
 375 002c 8823      		tst r24
 376 002e 01F0      		breq .L20
 377 0030 83E0      		ldi r24,lo8(3)
 378 0032 0895      		ret
 379               	.L20:
 380 0034 82E0      		ldi r24,lo8(2)
 129:rn42/battery.c ****     }
 130:rn42/battery.c **** }
 381               		.loc 1 130 0
 382 0036 0895      		ret
 383               		.cfi_endproc
 384               	.LFE11:
 386               		.section	.bss.low.1634,"aw",@nobits
 389               	low.1634:
 390 0000 00        		.zero	1
 391               		.text
 392               	.Letext0:
 393               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 394               		.file 4 "rn42/battery.h"
DEFINED SYMBOLS
                            *ABS*:00000000 battery.c
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccyQ0w4H.s:2      *ABS*:0000003e __SP_H__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccyQ0w4H.s:3      *ABS*:0000003d __SP_L__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccyQ0w4H.s:4      *ABS*:0000003f __SREG__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccyQ0w4H.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccyQ0w4H.s:6      *ABS*:00000001 __zero_reg__
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccyQ0w4H.s:13     .text.battery_led:00000000 battery_led
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccyQ0w4H.s:60     .text.battery_init:00000000 battery_init
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccyQ0w4H.s:171    .text.battery_charging:00000000 battery_charging
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccyQ0w4H.s:242    .text.battery_voltage:00000000 battery_voltage
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccyQ0w4H.s:331    .text.battery_status:00000000 battery_status
/var/folders/60/7jfz_t4j1gl3nbdqv9nkvh7rr0y5vx/T//ccyQ0w4H.s:389    .bss.low.1634:00000000 low.1634

UNDEFINED SYMBOLS
__do_clear_bss
