   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_console_help,"ax",@progbits
  12               	mousekey_console_help:
  13               	.LFB113:
  14               		.file 1 "./tmk_core/common/command.c"
   1:./tmk_core/common/command.c **** /*
   2:./tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/command.c **** 
   4:./tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/command.c **** (at your option) any later version.
   8:./tmk_core/common/command.c **** 
   9:./tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/command.c **** GNU General Public License for more details.
  13:./tmk_core/common/command.c **** 
  14:./tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/command.c **** */
  17:./tmk_core/common/command.c **** #include <stdint.h>
  18:./tmk_core/common/command.c **** #include <stdbool.h>
  19:./tmk_core/common/command.c **** #include "wait.h"
  20:./tmk_core/common/command.c **** #include "keycode.h"
  21:./tmk_core/common/command.c **** #include "host.h"
  22:./tmk_core/common/command.c **** #include "keymap.h"
  23:./tmk_core/common/command.c **** #include "print.h"
  24:./tmk_core/common/command.c **** #include "debug.h"
  25:./tmk_core/common/command.c **** #include "util.h"
  26:./tmk_core/common/command.c **** #include "timer.h"
  27:./tmk_core/common/command.c **** #include "keyboard.h"
  28:./tmk_core/common/command.c **** #include "bootloader.h"
  29:./tmk_core/common/command.c **** #include "action_layer.h"
  30:./tmk_core/common/command.c **** #include "action_util.h"
  31:./tmk_core/common/command.c **** #include "eeconfig.h"
  32:./tmk_core/common/command.c **** #include "sleep_led.h"
  33:./tmk_core/common/command.c **** #include "led.h"
  34:./tmk_core/common/command.c **** #include "command.h"
  35:./tmk_core/common/command.c **** #include "backlight.h"
  36:./tmk_core/common/command.c **** 
  37:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  38:./tmk_core/common/command.c **** #include "mousekey.h"
  39:./tmk_core/common/command.c **** #endif
  40:./tmk_core/common/command.c **** 
  41:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  42:./tmk_core/common/command.c **** #   include "usb_keyboard.h"
  43:./tmk_core/common/command.c **** #   ifdef EXTRAKEY_ENABLE
  44:./tmk_core/common/command.c **** #       include "usb_extra.h"
  45:./tmk_core/common/command.c **** #   endif
  46:./tmk_core/common/command.c **** #endif
  47:./tmk_core/common/command.c **** 
  48:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  49:./tmk_core/common/command.c **** #   include "usbdrv.h"
  50:./tmk_core/common/command.c **** #endif
  51:./tmk_core/common/command.c **** 
  52:./tmk_core/common/command.c **** 
  53:./tmk_core/common/command.c **** static bool command_common(uint8_t code);
  54:./tmk_core/common/command.c **** static void command_common_help(void);
  55:./tmk_core/common/command.c **** static bool command_console(uint8_t code);
  56:./tmk_core/common/command.c **** static void command_console_help(void);
  57:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  58:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  59:./tmk_core/common/command.c **** static void mousekey_console_help(void);
  60:./tmk_core/common/command.c **** #endif
  61:./tmk_core/common/command.c **** 
  62:./tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code);
  63:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  64:./tmk_core/common/command.c **** 
  65:./tmk_core/common/command.c **** 
  66:./tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  67:./tmk_core/common/command.c **** 
  68:./tmk_core/common/command.c **** 
  69:./tmk_core/common/command.c **** bool command_proc(uint8_t code)
  70:./tmk_core/common/command.c **** {
  71:./tmk_core/common/command.c ****     switch (command_state) {
  72:./tmk_core/common/command.c ****         case ONESHOT:
  73:./tmk_core/common/command.c ****             if (!IS_COMMAND())
  74:./tmk_core/common/command.c ****                 return false;
  75:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  76:./tmk_core/common/command.c ****             break;
  77:./tmk_core/common/command.c ****         case CONSOLE:
  78:./tmk_core/common/command.c ****             if (IS_COMMAND())
  79:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  80:./tmk_core/common/command.c ****             else
  81:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  82:./tmk_core/common/command.c ****             break;
  83:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  84:./tmk_core/common/command.c ****         case MOUSEKEY:
  85:./tmk_core/common/command.c ****             mousekey_console(code);
  86:./tmk_core/common/command.c ****             break;
  87:./tmk_core/common/command.c **** #endif
  88:./tmk_core/common/command.c ****         default:
  89:./tmk_core/common/command.c ****             command_state = ONESHOT;
  90:./tmk_core/common/command.c ****             return false;
  91:./tmk_core/common/command.c ****     }
  92:./tmk_core/common/command.c ****     return true;
  93:./tmk_core/common/command.c **** }
  94:./tmk_core/common/command.c **** 
  95:./tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
  96:./tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
  97:./tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
  98:./tmk_core/common/command.c **** bool command_extra(uint8_t code)
  99:./tmk_core/common/command.c **** {
 100:./tmk_core/common/command.c ****     (void)code;
 101:./tmk_core/common/command.c ****     return false;
 102:./tmk_core/common/command.c **** }
 103:./tmk_core/common/command.c **** 
 104:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 105:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 106:./tmk_core/common/command.c **** {
 107:./tmk_core/common/command.c ****     (void)code;
 108:./tmk_core/common/command.c ****     return false;
 109:./tmk_core/common/command.c **** }
 110:./tmk_core/common/command.c **** 
 111:./tmk_core/common/command.c **** 
 112:./tmk_core/common/command.c **** /***********************************************************
 113:./tmk_core/common/command.c ****  * Command common
 114:./tmk_core/common/command.c ****  ***********************************************************/
 115:./tmk_core/common/command.c **** static void command_common_help(void)
 116:./tmk_core/common/command.c **** {
 117:./tmk_core/common/command.c ****     print("\n\t- Magic -\n"
 118:./tmk_core/common/command.c ****           "d:	debug\n"
 119:./tmk_core/common/command.c ****           "x:	debug matrix\n"
 120:./tmk_core/common/command.c ****           "k:	debug keyboard\n"
 121:./tmk_core/common/command.c ****           "m:	debug mouse\n"
 122:./tmk_core/common/command.c ****           "v:	version\n"
 123:./tmk_core/common/command.c ****           "s:	status\n"
 124:./tmk_core/common/command.c ****           "c:	console mode\n"
 125:./tmk_core/common/command.c ****           "0-4:	layer0-4(F10-F4)\n"
 126:./tmk_core/common/command.c ****           "Paus:	bootloader\n"
 127:./tmk_core/common/command.c **** 
 128:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 129:./tmk_core/common/command.c ****           "Caps:	Lock\n"
 130:./tmk_core/common/command.c **** #endif
 131:./tmk_core/common/command.c **** 
 132:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 133:./tmk_core/common/command.c ****           "e:	eeprom\n"
 134:./tmk_core/common/command.c **** #endif
 135:./tmk_core/common/command.c **** 
 136:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 137:./tmk_core/common/command.c ****           "n:	NKRO\n"
 138:./tmk_core/common/command.c **** #endif
 139:./tmk_core/common/command.c **** 
 140:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 141:./tmk_core/common/command.c ****           "z:	sleep LED test\n"
 142:./tmk_core/common/command.c **** #endif
 143:./tmk_core/common/command.c ****     );
 144:./tmk_core/common/command.c **** }
 145:./tmk_core/common/command.c **** 
 146:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 147:./tmk_core/common/command.c **** static void print_eeconfig(void)
 148:./tmk_core/common/command.c **** {
 149:./tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 150:./tmk_core/common/command.c **** 
 151:./tmk_core/common/command.c ****     debug_config_t dc;
 152:./tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 153:./tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 154:./tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 155:./tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 156:./tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 157:./tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 158:./tmk_core/common/command.c **** 
 159:./tmk_core/common/command.c ****     keymap_config_t kc;
 160:./tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 161:./tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 162:./tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 163:./tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 164:./tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 165:./tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 166:./tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 167:./tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 168:./tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 169:./tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 170:./tmk_core/common/command.c **** 
 171:./tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 172:./tmk_core/common/command.c ****     backlight_config_t bc;
 173:./tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 174:./tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 175:./tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 176:./tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 177:./tmk_core/common/command.c **** #endif
 178:./tmk_core/common/command.c **** }
 179:./tmk_core/common/command.c **** #endif
 180:./tmk_core/common/command.c **** 
 181:./tmk_core/common/command.c **** static bool command_common(uint8_t code)
 182:./tmk_core/common/command.c **** {
 183:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 184:./tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 185:./tmk_core/common/command.c **** #endif
 186:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 187:./tmk_core/common/command.c ****     static bool sleep_led_test = false;
 188:./tmk_core/common/command.c **** #endif
 189:./tmk_core/common/command.c ****     switch (code) {
 190:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 191:./tmk_core/common/command.c ****         case KC_Z:
 192:./tmk_core/common/command.c ****             // test breathing sleep LED
 193:./tmk_core/common/command.c ****             print("Sleep LED test\n");
 194:./tmk_core/common/command.c ****             if (sleep_led_test) {
 195:./tmk_core/common/command.c ****                 sleep_led_disable();
 196:./tmk_core/common/command.c ****                 led_set(host_keyboard_leds());
 197:./tmk_core/common/command.c ****             } else {
 198:./tmk_core/common/command.c ****                 sleep_led_enable();
 199:./tmk_core/common/command.c ****             }
 200:./tmk_core/common/command.c ****             sleep_led_test = !sleep_led_test;
 201:./tmk_core/common/command.c ****             break;
 202:./tmk_core/common/command.c **** #endif
 203:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 204:./tmk_core/common/command.c ****         case KC_E:
 205:./tmk_core/common/command.c ****             print("eeconfig:\n");
 206:./tmk_core/common/command.c ****             print_eeconfig();
 207:./tmk_core/common/command.c ****             break;
 208:./tmk_core/common/command.c **** #endif
 209:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 210:./tmk_core/common/command.c ****         case KC_CAPSLOCK:
 211:./tmk_core/common/command.c ****             if (host_get_driver()) {
 212:./tmk_core/common/command.c ****                 host_driver = host_get_driver();
 213:./tmk_core/common/command.c ****                 clear_keyboard();
 214:./tmk_core/common/command.c ****                 host_set_driver(0);
 215:./tmk_core/common/command.c ****                 print("Locked.\n");
 216:./tmk_core/common/command.c ****             } else {
 217:./tmk_core/common/command.c ****                 host_set_driver(host_driver);
 218:./tmk_core/common/command.c ****                 print("Unlocked.\n");
 219:./tmk_core/common/command.c ****             }
 220:./tmk_core/common/command.c ****             break;
 221:./tmk_core/common/command.c **** #endif
 222:./tmk_core/common/command.c ****         case KC_H:
 223:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 224:./tmk_core/common/command.c ****             command_common_help();
 225:./tmk_core/common/command.c ****             break;
 226:./tmk_core/common/command.c ****         case KC_C:
 227:./tmk_core/common/command.c ****             debug_matrix   = false;
 228:./tmk_core/common/command.c ****             debug_keyboard = false;
 229:./tmk_core/common/command.c ****             debug_mouse    = false;
 230:./tmk_core/common/command.c ****             debug_enable   = false;
 231:./tmk_core/common/command.c ****             command_console_help();
 232:./tmk_core/common/command.c ****             print("C> ");
 233:./tmk_core/common/command.c ****             command_state = CONSOLE;
 234:./tmk_core/common/command.c ****             break;
 235:./tmk_core/common/command.c ****         case KC_PAUSE:
 236:./tmk_core/common/command.c ****             clear_keyboard();
 237:./tmk_core/common/command.c ****             print("\n\nbootloader... ");
 238:./tmk_core/common/command.c ****             wait_ms(1000);
 239:./tmk_core/common/command.c ****             bootloader_jump(); // not return
 240:./tmk_core/common/command.c ****             break;
 241:./tmk_core/common/command.c ****         case KC_D:
 242:./tmk_core/common/command.c ****             if (debug_enable) {
 243:./tmk_core/common/command.c ****                 print("\ndebug: off\n");
 244:./tmk_core/common/command.c ****                 debug_matrix   = false;
 245:./tmk_core/common/command.c ****                 debug_keyboard = false;
 246:./tmk_core/common/command.c ****                 debug_mouse    = false;
 247:./tmk_core/common/command.c ****                 debug_enable   = false;
 248:./tmk_core/common/command.c ****             } else {
 249:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 250:./tmk_core/common/command.c ****                 debug_enable   = true;
 251:./tmk_core/common/command.c ****             }
 252:./tmk_core/common/command.c ****             break;
 253:./tmk_core/common/command.c ****         case KC_X: // debug matrix toggle
 254:./tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 255:./tmk_core/common/command.c ****             if (debug_matrix) {
 256:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 257:./tmk_core/common/command.c ****                 debug_enable = true;
 258:./tmk_core/common/command.c ****             } else {
 259:./tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 260:./tmk_core/common/command.c ****             }
 261:./tmk_core/common/command.c ****             break;
 262:./tmk_core/common/command.c ****         case KC_K: // debug keyboard toggle
 263:./tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 264:./tmk_core/common/command.c ****             if (debug_keyboard) {
 265:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 266:./tmk_core/common/command.c ****                 debug_enable = true;
 267:./tmk_core/common/command.c ****             } else {
 268:./tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 269:./tmk_core/common/command.c ****             }
 270:./tmk_core/common/command.c ****             break;
 271:./tmk_core/common/command.c ****         case KC_M: // debug mouse toggle
 272:./tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 273:./tmk_core/common/command.c ****             if (debug_mouse) {
 274:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 275:./tmk_core/common/command.c ****                 debug_enable = true;
 276:./tmk_core/common/command.c ****             } else {
 277:./tmk_core/common/command.c ****                 print("\nmouse: off\n");
 278:./tmk_core/common/command.c ****             }
 279:./tmk_core/common/command.c ****             break;
 280:./tmk_core/common/command.c ****         case KC_V: // print version & information
 281:./tmk_core/common/command.c ****             print("\n\t- Version -\n");
 282:./tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 283:./tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 284:./tmk_core/common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 285:./tmk_core/common/command.c ****                   "VER: " STR(DEVICE_VER) "\n");
 286:./tmk_core/common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 287:./tmk_core/common/command.c ****             /* build options */
 288:./tmk_core/common/command.c ****             print("OPTIONS:"
 289:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 290:./tmk_core/common/command.c ****             " PJRC"
 291:./tmk_core/common/command.c **** #endif
 292:./tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 293:./tmk_core/common/command.c ****             " LUFA"
 294:./tmk_core/common/command.c **** #endif
 295:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 296:./tmk_core/common/command.c ****             " VUSB"
 297:./tmk_core/common/command.c **** #endif
 298:./tmk_core/common/command.c **** #ifdef PROTOCOL_CHIBIOS
 299:./tmk_core/common/command.c ****             " CHIBIOS"
 300:./tmk_core/common/command.c **** #endif
 301:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 302:./tmk_core/common/command.c ****             " BOOTMAGIC"
 303:./tmk_core/common/command.c **** #endif
 304:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 305:./tmk_core/common/command.c ****             " MOUSEKEY"
 306:./tmk_core/common/command.c **** #endif
 307:./tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 308:./tmk_core/common/command.c ****             " EXTRAKEY"
 309:./tmk_core/common/command.c **** #endif
 310:./tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 311:./tmk_core/common/command.c ****             " CONSOLE"
 312:./tmk_core/common/command.c **** #endif
 313:./tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 314:./tmk_core/common/command.c ****             " COMMAND"
 315:./tmk_core/common/command.c **** #endif
 316:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 317:./tmk_core/common/command.c ****             " NKRO"
 318:./tmk_core/common/command.c **** #endif
 319:./tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 320:./tmk_core/common/command.c ****             " KEYMAP_SECTION"
 321:./tmk_core/common/command.c **** #endif
 322:./tmk_core/common/command.c ****             " " STR(BOOTLOADER_SIZE) "\n");
 323:./tmk_core/common/command.c **** 
 324:./tmk_core/common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 325:./tmk_core/common/command.c **** #if defined(__AVR__)
 326:./tmk_core/common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 327:./tmk_core/common/command.c ****                   " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
 328:./tmk_core/common/command.c **** #elif defined(__arm__)
 329:./tmk_core/common/command.c ****             // TODO
 330:./tmk_core/common/command.c ****             );
 331:./tmk_core/common/command.c **** #endif
 332:./tmk_core/common/command.c ****             break;
 333:./tmk_core/common/command.c ****         case KC_S:
 334:./tmk_core/common/command.c ****             print("\n\t- Status -\n");
 335:./tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 336:./tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 337:./tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 338:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 339:./tmk_core/common/command.c ****             print_val_hex8(keyboard_nkro);
 340:./tmk_core/common/command.c **** #endif
 341:./tmk_core/common/command.c ****             print_val_hex32(timer_read32());
 342:./tmk_core/common/command.c **** 
 343:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 344:./tmk_core/common/command.c ****             print_val_hex8(UDCON);
 345:./tmk_core/common/command.c ****             print_val_hex8(UDIEN);
 346:./tmk_core/common/command.c ****             print_val_hex8(UDINT);
 347:./tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_leds);
 348:./tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_idle_count);
 349:./tmk_core/common/command.c **** #endif
 350:./tmk_core/common/command.c **** 
 351:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 352:./tmk_core/common/command.c **** #   if USB_COUNT_SOF
 353:./tmk_core/common/command.c ****             print_val_hex8(usbSofCount);
 354:./tmk_core/common/command.c **** #   endif
 355:./tmk_core/common/command.c **** #endif
 356:./tmk_core/common/command.c ****             break;
 357:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 358:./tmk_core/common/command.c ****         case KC_N:
 359:./tmk_core/common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 360:./tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 361:./tmk_core/common/command.c ****             if (keyboard_nkro) {
 362:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 363:./tmk_core/common/command.c ****             } else {
 364:./tmk_core/common/command.c ****                 print("NKRO: off\n");
 365:./tmk_core/common/command.c ****             }
 366:./tmk_core/common/command.c ****             break;
 367:./tmk_core/common/command.c **** #endif
 368:./tmk_core/common/command.c ****         case KC_ESC:
 369:./tmk_core/common/command.c ****         case KC_GRV:
 370:./tmk_core/common/command.c ****         case KC_0:
 371:./tmk_core/common/command.c ****         case KC_F10:
 372:./tmk_core/common/command.c ****             switch_default_layer(0);
 373:./tmk_core/common/command.c ****             break;
 374:./tmk_core/common/command.c ****         case KC_1 ... KC_9:
 375:./tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 376:./tmk_core/common/command.c ****             break;
 377:./tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 378:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 379:./tmk_core/common/command.c ****             break;
 380:./tmk_core/common/command.c ****         default:
 381:./tmk_core/common/command.c ****             print("?");
 382:./tmk_core/common/command.c ****             return false;
 383:./tmk_core/common/command.c ****     }
 384:./tmk_core/common/command.c ****     return true;
 385:./tmk_core/common/command.c **** }
 386:./tmk_core/common/command.c **** 
 387:./tmk_core/common/command.c **** 
 388:./tmk_core/common/command.c **** /***********************************************************
 389:./tmk_core/common/command.c ****  * Command console
 390:./tmk_core/common/command.c ****  ***********************************************************/
 391:./tmk_core/common/command.c **** static void command_console_help(void)
 392:./tmk_core/common/command.c **** {
 393:./tmk_core/common/command.c ****     print("\n\t- Console -\n"
 394:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 395:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 396:./tmk_core/common/command.c ****           "m:	mousekey\n"
 397:./tmk_core/common/command.c **** #endif
 398:./tmk_core/common/command.c ****     );
 399:./tmk_core/common/command.c **** }
 400:./tmk_core/common/command.c **** 
 401:./tmk_core/common/command.c **** static bool command_console(uint8_t code)
 402:./tmk_core/common/command.c **** {
 403:./tmk_core/common/command.c ****     switch (code) {
 404:./tmk_core/common/command.c ****         case KC_H:
 405:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 406:./tmk_core/common/command.c ****             command_console_help();
 407:./tmk_core/common/command.c ****             break;
 408:./tmk_core/common/command.c ****         case KC_Q:
 409:./tmk_core/common/command.c ****         case KC_ESC:
 410:./tmk_core/common/command.c ****             command_state = ONESHOT;
 411:./tmk_core/common/command.c ****             return false;
 412:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 413:./tmk_core/common/command.c ****         case KC_M:
 414:./tmk_core/common/command.c ****             mousekey_console_help();
 415:./tmk_core/common/command.c ****             print("M> ");
 416:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 417:./tmk_core/common/command.c ****             return true;
 418:./tmk_core/common/command.c **** #endif
 419:./tmk_core/common/command.c ****         default:
 420:./tmk_core/common/command.c ****             print("?");
 421:./tmk_core/common/command.c ****             return false;
 422:./tmk_core/common/command.c ****     }
 423:./tmk_core/common/command.c ****     print("C> ");
 424:./tmk_core/common/command.c ****     return true;
 425:./tmk_core/common/command.c **** }
 426:./tmk_core/common/command.c **** 
 427:./tmk_core/common/command.c **** 
 428:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 429:./tmk_core/common/command.c **** /***********************************************************
 430:./tmk_core/common/command.c ****  * Mousekey console
 431:./tmk_core/common/command.c ****  ***********************************************************/
 432:./tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 433:./tmk_core/common/command.c **** 
 434:./tmk_core/common/command.c **** static void mousekey_param_print(void)
 435:./tmk_core/common/command.c **** {
 436:./tmk_core/common/command.c ****     print("\n\t- Values -\n");
 437:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 438:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 439:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 440:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 441:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 442:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 443:./tmk_core/common/command.c **** }
 444:./tmk_core/common/command.c **** 
 445:./tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 446:./tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 447:./tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 448:./tmk_core/common/command.c **** {
 449:./tmk_core/common/command.c ****     switch (param) {
 450:./tmk_core/common/command.c ****         case 1:
 451:./tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 452:./tmk_core/common/command.c ****                 mk_delay += inc;
 453:./tmk_core/common/command.c ****             else
 454:./tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 455:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 456:./tmk_core/common/command.c ****             break;
 457:./tmk_core/common/command.c ****         case 2:
 458:./tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 459:./tmk_core/common/command.c ****                 mk_interval += inc;
 460:./tmk_core/common/command.c ****             else
 461:./tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 462:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 463:./tmk_core/common/command.c ****             break;
 464:./tmk_core/common/command.c ****         case 3:
 465:./tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 466:./tmk_core/common/command.c ****                 mk_max_speed += inc;
 467:./tmk_core/common/command.c ****             else
 468:./tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 469:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 470:./tmk_core/common/command.c ****             break;
 471:./tmk_core/common/command.c ****         case 4:
 472:./tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 473:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 474:./tmk_core/common/command.c ****             else
 475:./tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 476:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 477:./tmk_core/common/command.c ****             break;
 478:./tmk_core/common/command.c ****         case 5:
 479:./tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 480:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 481:./tmk_core/common/command.c ****             else
 482:./tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 483:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 484:./tmk_core/common/command.c ****             break;
 485:./tmk_core/common/command.c ****         case 6:
 486:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 487:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 488:./tmk_core/common/command.c ****             else
 489:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 490:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 491:./tmk_core/common/command.c ****             break;
 492:./tmk_core/common/command.c ****     }
 493:./tmk_core/common/command.c **** }
 494:./tmk_core/common/command.c **** 
 495:./tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 496:./tmk_core/common/command.c **** {
 497:./tmk_core/common/command.c ****     switch (param) {
 498:./tmk_core/common/command.c ****         case 1:
 499:./tmk_core/common/command.c ****             if (mk_delay > dec)
 500:./tmk_core/common/command.c ****                 mk_delay -= dec;
 501:./tmk_core/common/command.c ****             else
 502:./tmk_core/common/command.c ****                 mk_delay = 0;
 503:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 504:./tmk_core/common/command.c ****             break;
 505:./tmk_core/common/command.c ****         case 2:
 506:./tmk_core/common/command.c ****             if (mk_interval > dec)
 507:./tmk_core/common/command.c ****                 mk_interval -= dec;
 508:./tmk_core/common/command.c ****             else
 509:./tmk_core/common/command.c ****                 mk_interval = 0;
 510:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 511:./tmk_core/common/command.c ****             break;
 512:./tmk_core/common/command.c ****         case 3:
 513:./tmk_core/common/command.c ****             if (mk_max_speed > dec)
 514:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 515:./tmk_core/common/command.c ****             else
 516:./tmk_core/common/command.c ****                 mk_max_speed = 0;
 517:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 518:./tmk_core/common/command.c ****             break;
 519:./tmk_core/common/command.c ****         case 4:
 520:./tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 521:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 522:./tmk_core/common/command.c ****             else
 523:./tmk_core/common/command.c ****                 mk_time_to_max = 0;
 524:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 525:./tmk_core/common/command.c ****             break;
 526:./tmk_core/common/command.c ****         case 5:
 527:./tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 528:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 529:./tmk_core/common/command.c ****             else
 530:./tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 531:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 532:./tmk_core/common/command.c ****             break;
 533:./tmk_core/common/command.c ****         case 6:
 534:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 535:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 536:./tmk_core/common/command.c ****             else
 537:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 538:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 539:./tmk_core/common/command.c ****             break;
 540:./tmk_core/common/command.c ****     }
 541:./tmk_core/common/command.c **** }
 542:./tmk_core/common/command.c **** 
 543:./tmk_core/common/command.c **** static void mousekey_console_help(void)
 544:./tmk_core/common/command.c **** {
  15               		.loc 1 544 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 545:./tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
  21               		.loc 1 545 0
  22 0000 80E0      		ldi r24,lo8(__c.5015)
  23 0002 90E0      		ldi r25,hi8(__c.5015)
  24 0004 0E94 0000 		call xputs
  25               	.LVL0:
 546:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 547:./tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 548:./tmk_core/common/command.c ****           "2:	interval(ms)\n"
 549:./tmk_core/common/command.c ****           "3:	max_speed\n"
 550:./tmk_core/common/command.c ****           "4:	time_to_max\n"
 551:./tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 552:./tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 553:./tmk_core/common/command.c ****           "\n"
 554:./tmk_core/common/command.c ****           "p:	print values\n"
 555:./tmk_core/common/command.c ****           "d:	set defaults\n"
 556:./tmk_core/common/command.c ****           "up:	+1\n"
 557:./tmk_core/common/command.c ****           "down:	-1\n"
 558:./tmk_core/common/command.c ****           "pgup:	+10\n"
 559:./tmk_core/common/command.c ****           "pgdown:	-10\n"
 560:./tmk_core/common/command.c ****           "\n"
 561:./tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 562:./tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n" 
  26               		.loc 1 562 0
  27 0008 1F92      		push __zero_reg__
  28               	.LCFI0:
  29               		.cfi_def_cfa_offset 3
  30 000a 81E0      		ldi r24,lo8(1)
  31 000c 8F93      		push r24
  32               	.LCFI1:
  33               		.cfi_def_cfa_offset 4
  34 000e 1F92      		push __zero_reg__
  35               	.LCFI2:
  36               		.cfi_def_cfa_offset 5
  37 0010 85E0      		ldi r24,lo8(5)
  38 0012 8F93      		push r24
  39               	.LCFI3:
  40               		.cfi_def_cfa_offset 6
  41 0014 80E0      		ldi r24,lo8(__c.5017)
  42 0016 90E0      		ldi r25,hi8(__c.5017)
  43 0018 9F93      		push r25
  44               	.LCFI4:
  45               		.cfi_def_cfa_offset 7
  46 001a 8F93      		push r24
  47               	.LCFI5:
  48               		.cfi_def_cfa_offset 8
  49 001c 0E94 0000 		call __xprintf
  50               	.LVL1:
  51 0020 0F90      		pop __tmp_reg__
  52 0022 0F90      		pop __tmp_reg__
  53 0024 0F90      		pop __tmp_reg__
  54 0026 0F90      		pop __tmp_reg__
  55 0028 0F90      		pop __tmp_reg__
  56 002a 0F90      		pop __tmp_reg__
  57               	.LCFI6:
  58               		.cfi_def_cfa_offset 2
  59 002c 0895      		ret
  60               		.cfi_endproc
  61               	.LFE113:
  63               		.section	.text.mousekey_param_inc,"ax",@progbits
  65               	mousekey_param_inc:
  66               	.LFB111:
 448:./tmk_core/common/command.c **** {
  67               		.loc 1 448 0
  68               		.cfi_startproc
  69               	.LVL2:
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 0 */
  73               	.L__stack_usage = 0
 449:./tmk_core/common/command.c ****     switch (param) {
  74               		.loc 1 449 0
  75 0000 8330      		cpi r24,lo8(3)
  76 0002 01F0      		breq .L4
  77 0004 00F4      		brsh .L5
  78 0006 8130      		cpi r24,lo8(1)
  79 0008 01F0      		breq .L6
  80 000a 8230      		cpi r24,lo8(2)
  81 000c 01F0      		breq .L7
  82 000e 0895      		ret
  83               	.L5:
  84 0010 8530      		cpi r24,lo8(5)
  85 0012 01F4      		brne .+2
  86 0014 00C0      		rjmp .L8
  87 0016 00F4      		brsh .+2
  88 0018 00C0      		rjmp .L9
  89 001a 8630      		cpi r24,lo8(6)
  90 001c 01F4      		brne .+2
  91 001e 00C0      		rjmp .L10
  92 0020 0895      		ret
  93               	.L6:
 451:./tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
  94               		.loc 1 451 0
  95 0022 2091 0000 		lds r18,mk_delay
  96 0026 862F      		mov r24,r22
  97               	.LVL3:
  98 0028 90E0      		ldi r25,0
  99 002a 820F      		add r24,r18
 100 002c 911D      		adc r25,__zero_reg__
 101 002e 8F3F      		cpi r24,-1
 102 0030 9105      		cpc r25,__zero_reg__
 103 0032 00F4      		brsh .L11
 452:./tmk_core/common/command.c ****                 mk_delay += inc;
 104               		.loc 1 452 0
 105 0034 620F      		add r22,r18
 106               	.LVL4:
 107 0036 6093 0000 		sts mk_delay,r22
 108 003a 00C0      		rjmp .L12
 109               	.LVL5:
 110               	.L11:
 454:./tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 111               		.loc 1 454 0
 112 003c 8FEF      		ldi r24,lo8(-1)
 113 003e 8093 0000 		sts mk_delay,r24
 114               	.LVL6:
 115               	.L12:
 455:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 116               		.loc 1 455 0
 117 0042 8091 0000 		lds r24,mk_delay
 118 0046 1F92      		push __zero_reg__
 119               	.LCFI7:
 120               		.cfi_remember_state
 121               		.cfi_def_cfa_offset 3
 122 0048 8F93      		push r24
 123               	.LCFI8:
 124               		.cfi_def_cfa_offset 4
 125 004a 80E0      		ldi r24,lo8(__c.4971)
 126 004c 90E0      		ldi r25,hi8(__c.4971)
 127 004e 00C0      		rjmp .L23
 128               	.LVL7:
 129               	.L7:
 130               	.LCFI9:
 131               		.cfi_restore_state
 458:./tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 132               		.loc 1 458 0
 133 0050 2091 0000 		lds r18,mk_interval
 134 0054 862F      		mov r24,r22
 135               	.LVL8:
 136 0056 90E0      		ldi r25,0
 137 0058 820F      		add r24,r18
 138 005a 911D      		adc r25,__zero_reg__
 139 005c 8F3F      		cpi r24,-1
 140 005e 9105      		cpc r25,__zero_reg__
 141 0060 00F4      		brsh .L13
 459:./tmk_core/common/command.c ****                 mk_interval += inc;
 142               		.loc 1 459 0
 143 0062 620F      		add r22,r18
 144               	.LVL9:
 145 0064 6093 0000 		sts mk_interval,r22
 146 0068 00C0      		rjmp .L14
 147               	.LVL10:
 148               	.L13:
 461:./tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 149               		.loc 1 461 0
 150 006a 8FEF      		ldi r24,lo8(-1)
 151 006c 8093 0000 		sts mk_interval,r24
 152               	.LVL11:
 153               	.L14:
 462:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 154               		.loc 1 462 0
 155 0070 8091 0000 		lds r24,mk_interval
 156 0074 1F92      		push __zero_reg__
 157               	.LCFI10:
 158               		.cfi_remember_state
 159               		.cfi_def_cfa_offset 3
 160 0076 8F93      		push r24
 161               	.LCFI11:
 162               		.cfi_def_cfa_offset 4
 163 0078 80E0      		ldi r24,lo8(__c.4975)
 164 007a 90E0      		ldi r25,hi8(__c.4975)
 165 007c 00C0      		rjmp .L23
 166               	.LVL12:
 167               	.L4:
 168               	.LCFI12:
 169               		.cfi_restore_state
 465:./tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 170               		.loc 1 465 0
 171 007e 2091 0000 		lds r18,mk_max_speed
 172 0082 862F      		mov r24,r22
 173               	.LVL13:
 174 0084 90E0      		ldi r25,0
 175 0086 820F      		add r24,r18
 176 0088 911D      		adc r25,__zero_reg__
 177 008a 8F3F      		cpi r24,-1
 178 008c 9105      		cpc r25,__zero_reg__
 179 008e 00F4      		brsh .L15
 466:./tmk_core/common/command.c ****                 mk_max_speed += inc;
 180               		.loc 1 466 0
 181 0090 620F      		add r22,r18
 182               	.LVL14:
 183 0092 6093 0000 		sts mk_max_speed,r22
 184 0096 00C0      		rjmp .L16
 185               	.LVL15:
 186               	.L15:
 468:./tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 187               		.loc 1 468 0
 188 0098 8FEF      		ldi r24,lo8(-1)
 189 009a 8093 0000 		sts mk_max_speed,r24
 190               	.LVL16:
 191               	.L16:
 469:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 192               		.loc 1 469 0
 193 009e 8091 0000 		lds r24,mk_max_speed
 194 00a2 1F92      		push __zero_reg__
 195               	.LCFI13:
 196               		.cfi_remember_state
 197               		.cfi_def_cfa_offset 3
 198 00a4 8F93      		push r24
 199               	.LCFI14:
 200               		.cfi_def_cfa_offset 4
 201 00a6 80E0      		ldi r24,lo8(__c.4978)
 202 00a8 90E0      		ldi r25,hi8(__c.4978)
 203 00aa 00C0      		rjmp .L23
 204               	.LVL17:
 205               	.L9:
 206               	.LCFI15:
 207               		.cfi_restore_state
 472:./tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 208               		.loc 1 472 0
 209 00ac 2091 0000 		lds r18,mk_time_to_max
 210 00b0 862F      		mov r24,r22
 211               	.LVL18:
 212 00b2 90E0      		ldi r25,0
 213 00b4 820F      		add r24,r18
 214 00b6 911D      		adc r25,__zero_reg__
 215 00b8 8F3F      		cpi r24,-1
 216 00ba 9105      		cpc r25,__zero_reg__
 217 00bc 00F4      		brsh .L17
 473:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 218               		.loc 1 473 0
 219 00be 620F      		add r22,r18
 220               	.LVL19:
 221 00c0 6093 0000 		sts mk_time_to_max,r22
 222 00c4 00C0      		rjmp .L18
 223               	.LVL20:
 224               	.L17:
 475:./tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 225               		.loc 1 475 0
 226 00c6 8FEF      		ldi r24,lo8(-1)
 227 00c8 8093 0000 		sts mk_time_to_max,r24
 228               	.LVL21:
 229               	.L18:
 476:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 230               		.loc 1 476 0
 231 00cc 8091 0000 		lds r24,mk_time_to_max
 232 00d0 1F92      		push __zero_reg__
 233               	.LCFI16:
 234               		.cfi_remember_state
 235               		.cfi_def_cfa_offset 3
 236 00d2 8F93      		push r24
 237               	.LCFI17:
 238               		.cfi_def_cfa_offset 4
 239 00d4 80E0      		ldi r24,lo8(__c.4981)
 240 00d6 90E0      		ldi r25,hi8(__c.4981)
 241 00d8 00C0      		rjmp .L23
 242               	.LVL22:
 243               	.L8:
 244               	.LCFI18:
 245               		.cfi_restore_state
 479:./tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 246               		.loc 1 479 0
 247 00da 2091 0000 		lds r18,mk_wheel_max_speed
 248 00de 862F      		mov r24,r22
 249               	.LVL23:
 250 00e0 90E0      		ldi r25,0
 251 00e2 820F      		add r24,r18
 252 00e4 911D      		adc r25,__zero_reg__
 253 00e6 8F3F      		cpi r24,-1
 254 00e8 9105      		cpc r25,__zero_reg__
 255 00ea 00F4      		brsh .L19
 480:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 256               		.loc 1 480 0
 257 00ec 620F      		add r22,r18
 258               	.LVL24:
 259 00ee 6093 0000 		sts mk_wheel_max_speed,r22
 260 00f2 00C0      		rjmp .L20
 261               	.LVL25:
 262               	.L19:
 482:./tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 263               		.loc 1 482 0
 264 00f4 8FEF      		ldi r24,lo8(-1)
 265 00f6 8093 0000 		sts mk_wheel_max_speed,r24
 266               	.LVL26:
 267               	.L20:
 483:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 268               		.loc 1 483 0
 269 00fa 8091 0000 		lds r24,mk_wheel_max_speed
 270 00fe 1F92      		push __zero_reg__
 271               	.LCFI19:
 272               		.cfi_remember_state
 273               		.cfi_def_cfa_offset 3
 274 0100 8F93      		push r24
 275               	.LCFI20:
 276               		.cfi_def_cfa_offset 4
 277 0102 80E0      		ldi r24,lo8(__c.4984)
 278 0104 90E0      		ldi r25,hi8(__c.4984)
 279 0106 00C0      		rjmp .L23
 280               	.LVL27:
 281               	.L10:
 282               	.LCFI21:
 283               		.cfi_restore_state
 486:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 284               		.loc 1 486 0
 285 0108 2091 0000 		lds r18,mk_wheel_time_to_max
 286 010c 862F      		mov r24,r22
 287               	.LVL28:
 288 010e 90E0      		ldi r25,0
 289 0110 820F      		add r24,r18
 290 0112 911D      		adc r25,__zero_reg__
 291 0114 8F3F      		cpi r24,-1
 292 0116 9105      		cpc r25,__zero_reg__
 293 0118 00F4      		brsh .L21
 487:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 294               		.loc 1 487 0
 295 011a 620F      		add r22,r18
 296               	.LVL29:
 297 011c 6093 0000 		sts mk_wheel_time_to_max,r22
 298 0120 00C0      		rjmp .L22
 299               	.LVL30:
 300               	.L21:
 489:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 301               		.loc 1 489 0
 302 0122 8FEF      		ldi r24,lo8(-1)
 303 0124 8093 0000 		sts mk_wheel_time_to_max,r24
 304               	.LVL31:
 305               	.L22:
 490:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 306               		.loc 1 490 0
 307 0128 8091 0000 		lds r24,mk_wheel_time_to_max
 308 012c 1F92      		push __zero_reg__
 309               	.LCFI22:
 310               		.cfi_def_cfa_offset 3
 311 012e 8F93      		push r24
 312               	.LCFI23:
 313               		.cfi_def_cfa_offset 4
 314 0130 80E0      		ldi r24,lo8(__c.4987)
 315 0132 90E0      		ldi r25,hi8(__c.4987)
 316               	.L23:
 317 0134 9F93      		push r25
 318               	.LCFI24:
 319               		.cfi_def_cfa_offset 5
 320 0136 8F93      		push r24
 321               	.LCFI25:
 322               		.cfi_def_cfa_offset 6
 323 0138 0E94 0000 		call __xprintf
 324               	.LVL32:
 491:./tmk_core/common/command.c ****             break;
 325               		.loc 1 491 0
 326 013c 0F90      		pop __tmp_reg__
 327 013e 0F90      		pop __tmp_reg__
 328 0140 0F90      		pop __tmp_reg__
 329 0142 0F90      		pop __tmp_reg__
 330               	.LCFI26:
 331               		.cfi_def_cfa_offset 2
 332 0144 0895      		ret
 333               		.cfi_endproc
 334               	.LFE111:
 336               		.section	.text.mousekey_param_dec,"ax",@progbits
 338               	mousekey_param_dec:
 339               	.LFB112:
 496:./tmk_core/common/command.c **** {
 340               		.loc 1 496 0
 341               		.cfi_startproc
 342               	.LVL33:
 343               	/* prologue: function */
 344               	/* frame size = 0 */
 345               	/* stack size = 0 */
 346               	.L__stack_usage = 0
 497:./tmk_core/common/command.c ****     switch (param) {
 347               		.loc 1 497 0
 348 0000 8330      		cpi r24,lo8(3)
 349 0002 01F0      		breq .L27
 350 0004 00F4      		brsh .L28
 351 0006 8130      		cpi r24,lo8(1)
 352 0008 01F0      		breq .L29
 353 000a 8230      		cpi r24,lo8(2)
 354 000c 01F0      		breq .L30
 355 000e 0895      		ret
 356               	.L28:
 357 0010 8530      		cpi r24,lo8(5)
 358 0012 01F4      		brne .+2
 359 0014 00C0      		rjmp .L31
 360 0016 00F0      		brlo .L32
 361 0018 8630      		cpi r24,lo8(6)
 362 001a 01F4      		brne .+2
 363 001c 00C0      		rjmp .L33
 364 001e 0895      		ret
 365               	.L29:
 499:./tmk_core/common/command.c ****             if (mk_delay > dec)
 366               		.loc 1 499 0
 367 0020 8091 0000 		lds r24,mk_delay
 368               	.LVL34:
 369 0024 6817      		cp r22,r24
 370 0026 00F4      		brsh .L34
 500:./tmk_core/common/command.c ****                 mk_delay -= dec;
 371               		.loc 1 500 0
 372 0028 861B      		sub r24,r22
 373 002a 8093 0000 		sts mk_delay,r24
 374 002e 00C0      		rjmp .L35
 375               	.L34:
 502:./tmk_core/common/command.c ****                 mk_delay = 0;
 376               		.loc 1 502 0
 377 0030 1092 0000 		sts mk_delay,__zero_reg__
 378               	.L35:
 503:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 379               		.loc 1 503 0
 380 0034 8091 0000 		lds r24,mk_delay
 381 0038 1F92      		push __zero_reg__
 382               	.LCFI27:
 383               		.cfi_remember_state
 384               		.cfi_def_cfa_offset 3
 385 003a 8F93      		push r24
 386               	.LCFI28:
 387               		.cfi_def_cfa_offset 4
 388 003c 80E0      		ldi r24,lo8(__c.4994)
 389 003e 90E0      		ldi r25,hi8(__c.4994)
 390 0040 00C0      		rjmp .L46
 391               	.LVL35:
 392               	.L30:
 393               	.LCFI29:
 394               		.cfi_restore_state
 506:./tmk_core/common/command.c ****             if (mk_interval > dec)
 395               		.loc 1 506 0
 396 0042 8091 0000 		lds r24,mk_interval
 397               	.LVL36:
 398 0046 6817      		cp r22,r24
 399 0048 00F4      		brsh .L36
 507:./tmk_core/common/command.c ****                 mk_interval -= dec;
 400               		.loc 1 507 0
 401 004a 861B      		sub r24,r22
 402 004c 8093 0000 		sts mk_interval,r24
 403 0050 00C0      		rjmp .L37
 404               	.L36:
 509:./tmk_core/common/command.c ****                 mk_interval = 0;
 405               		.loc 1 509 0
 406 0052 1092 0000 		sts mk_interval,__zero_reg__
 407               	.L37:
 510:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 408               		.loc 1 510 0
 409 0056 8091 0000 		lds r24,mk_interval
 410 005a 1F92      		push __zero_reg__
 411               	.LCFI30:
 412               		.cfi_remember_state
 413               		.cfi_def_cfa_offset 3
 414 005c 8F93      		push r24
 415               	.LCFI31:
 416               		.cfi_def_cfa_offset 4
 417 005e 80E0      		ldi r24,lo8(__c.4998)
 418 0060 90E0      		ldi r25,hi8(__c.4998)
 419 0062 00C0      		rjmp .L46
 420               	.LVL37:
 421               	.L27:
 422               	.LCFI32:
 423               		.cfi_restore_state
 513:./tmk_core/common/command.c ****             if (mk_max_speed > dec)
 424               		.loc 1 513 0
 425 0064 8091 0000 		lds r24,mk_max_speed
 426               	.LVL38:
 427 0068 6817      		cp r22,r24
 428 006a 00F4      		brsh .L38
 514:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 429               		.loc 1 514 0
 430 006c 861B      		sub r24,r22
 431 006e 8093 0000 		sts mk_max_speed,r24
 432 0072 00C0      		rjmp .L39
 433               	.L38:
 516:./tmk_core/common/command.c ****                 mk_max_speed = 0;
 434               		.loc 1 516 0
 435 0074 1092 0000 		sts mk_max_speed,__zero_reg__
 436               	.L39:
 517:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 437               		.loc 1 517 0
 438 0078 8091 0000 		lds r24,mk_max_speed
 439 007c 1F92      		push __zero_reg__
 440               	.LCFI33:
 441               		.cfi_remember_state
 442               		.cfi_def_cfa_offset 3
 443 007e 8F93      		push r24
 444               	.LCFI34:
 445               		.cfi_def_cfa_offset 4
 446 0080 80E0      		ldi r24,lo8(__c.5001)
 447 0082 90E0      		ldi r25,hi8(__c.5001)
 448 0084 00C0      		rjmp .L46
 449               	.LVL39:
 450               	.L32:
 451               	.LCFI35:
 452               		.cfi_restore_state
 520:./tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 453               		.loc 1 520 0
 454 0086 8091 0000 		lds r24,mk_time_to_max
 455               	.LVL40:
 456 008a 6817      		cp r22,r24
 457 008c 00F4      		brsh .L40
 521:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 458               		.loc 1 521 0
 459 008e 861B      		sub r24,r22
 460 0090 8093 0000 		sts mk_time_to_max,r24
 461 0094 00C0      		rjmp .L41
 462               	.L40:
 523:./tmk_core/common/command.c ****                 mk_time_to_max = 0;
 463               		.loc 1 523 0
 464 0096 1092 0000 		sts mk_time_to_max,__zero_reg__
 465               	.L41:
 524:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 466               		.loc 1 524 0
 467 009a 8091 0000 		lds r24,mk_time_to_max
 468 009e 1F92      		push __zero_reg__
 469               	.LCFI36:
 470               		.cfi_remember_state
 471               		.cfi_def_cfa_offset 3
 472 00a0 8F93      		push r24
 473               	.LCFI37:
 474               		.cfi_def_cfa_offset 4
 475 00a2 80E0      		ldi r24,lo8(__c.5004)
 476 00a4 90E0      		ldi r25,hi8(__c.5004)
 477 00a6 00C0      		rjmp .L46
 478               	.LVL41:
 479               	.L31:
 480               	.LCFI38:
 481               		.cfi_restore_state
 527:./tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 482               		.loc 1 527 0
 483 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 484               	.LVL42:
 485 00ac 6817      		cp r22,r24
 486 00ae 00F4      		brsh .L42
 528:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 487               		.loc 1 528 0
 488 00b0 861B      		sub r24,r22
 489 00b2 8093 0000 		sts mk_wheel_max_speed,r24
 490 00b6 00C0      		rjmp .L43
 491               	.L42:
 530:./tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 492               		.loc 1 530 0
 493 00b8 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 494               	.L43:
 531:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 495               		.loc 1 531 0
 496 00bc 8091 0000 		lds r24,mk_wheel_max_speed
 497 00c0 1F92      		push __zero_reg__
 498               	.LCFI39:
 499               		.cfi_remember_state
 500               		.cfi_def_cfa_offset 3
 501 00c2 8F93      		push r24
 502               	.LCFI40:
 503               		.cfi_def_cfa_offset 4
 504 00c4 80E0      		ldi r24,lo8(__c.5007)
 505 00c6 90E0      		ldi r25,hi8(__c.5007)
 506 00c8 00C0      		rjmp .L46
 507               	.LVL43:
 508               	.L33:
 509               	.LCFI41:
 510               		.cfi_restore_state
 534:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 511               		.loc 1 534 0
 512 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 513               	.LVL44:
 514 00ce 6817      		cp r22,r24
 515 00d0 00F4      		brsh .L44
 535:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 516               		.loc 1 535 0
 517 00d2 861B      		sub r24,r22
 518 00d4 8093 0000 		sts mk_wheel_time_to_max,r24
 519 00d8 00C0      		rjmp .L45
 520               	.L44:
 537:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 521               		.loc 1 537 0
 522 00da 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 523               	.L45:
 538:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 524               		.loc 1 538 0
 525 00de 8091 0000 		lds r24,mk_wheel_time_to_max
 526 00e2 1F92      		push __zero_reg__
 527               	.LCFI42:
 528               		.cfi_def_cfa_offset 3
 529 00e4 8F93      		push r24
 530               	.LCFI43:
 531               		.cfi_def_cfa_offset 4
 532 00e6 80E0      		ldi r24,lo8(__c.5010)
 533 00e8 90E0      		ldi r25,hi8(__c.5010)
 534               	.L46:
 535 00ea 9F93      		push r25
 536               	.LCFI44:
 537               		.cfi_def_cfa_offset 5
 538 00ec 8F93      		push r24
 539               	.LCFI45:
 540               		.cfi_def_cfa_offset 6
 541 00ee 0E94 0000 		call __xprintf
 542               	.LVL45:
 539:./tmk_core/common/command.c ****             break;
 543               		.loc 1 539 0
 544 00f2 0F90      		pop __tmp_reg__
 545 00f4 0F90      		pop __tmp_reg__
 546 00f6 0F90      		pop __tmp_reg__
 547 00f8 0F90      		pop __tmp_reg__
 548               	.LCFI46:
 549               		.cfi_def_cfa_offset 2
 550 00fa 0895      		ret
 551               		.cfi_endproc
 552               	.LFE112:
 554               		.section	.text.switch_default_layer,"ax",@progbits
 556               	switch_default_layer:
 557               	.LFB116:
 563:./tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 564:./tmk_core/common/command.c **** }
 565:./tmk_core/common/command.c **** 
 566:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 567:./tmk_core/common/command.c **** {
 568:./tmk_core/common/command.c ****     switch (code) {
 569:./tmk_core/common/command.c ****         case KC_H:
 570:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 571:./tmk_core/common/command.c ****             mousekey_console_help();
 572:./tmk_core/common/command.c ****             break;
 573:./tmk_core/common/command.c ****         case KC_Q:
 574:./tmk_core/common/command.c ****         case KC_ESC:
 575:./tmk_core/common/command.c ****             if (mousekey_param) {
 576:./tmk_core/common/command.c ****                 mousekey_param = 0;
 577:./tmk_core/common/command.c ****             } else {
 578:./tmk_core/common/command.c ****                 print("C> ");
 579:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 580:./tmk_core/common/command.c ****                 return false;
 581:./tmk_core/common/command.c ****             }
 582:./tmk_core/common/command.c ****             break;
 583:./tmk_core/common/command.c ****         case KC_P:
 584:./tmk_core/common/command.c ****             mousekey_param_print();
 585:./tmk_core/common/command.c ****             break;
 586:./tmk_core/common/command.c ****         case KC_1:
 587:./tmk_core/common/command.c ****         case KC_2:
 588:./tmk_core/common/command.c ****         case KC_3:
 589:./tmk_core/common/command.c ****         case KC_4:
 590:./tmk_core/common/command.c ****         case KC_5:
 591:./tmk_core/common/command.c ****         case KC_6:
 592:./tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 593:./tmk_core/common/command.c ****             break;
 594:./tmk_core/common/command.c ****         case KC_UP:
 595:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 596:./tmk_core/common/command.c ****             break;
 597:./tmk_core/common/command.c ****         case KC_DOWN:
 598:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 599:./tmk_core/common/command.c ****             break;
 600:./tmk_core/common/command.c ****         case KC_PGUP:
 601:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 602:./tmk_core/common/command.c ****             break;
 603:./tmk_core/common/command.c ****         case KC_PGDN:
 604:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 605:./tmk_core/common/command.c ****             break;
 606:./tmk_core/common/command.c ****         case KC_D:
 607:./tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 608:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 609:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 610:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 611:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 612:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 613:./tmk_core/common/command.c ****             print("set default\n");
 614:./tmk_core/common/command.c ****             break;
 615:./tmk_core/common/command.c ****         default:
 616:./tmk_core/common/command.c ****             print("?");
 617:./tmk_core/common/command.c ****             return false;
 618:./tmk_core/common/command.c ****     }
 619:./tmk_core/common/command.c ****     if (mousekey_param) {
 620:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 621:./tmk_core/common/command.c ****     } else {
 622:./tmk_core/common/command.c ****         print("M>" );
 623:./tmk_core/common/command.c ****     }
 624:./tmk_core/common/command.c ****     return true;
 625:./tmk_core/common/command.c **** }
 626:./tmk_core/common/command.c **** #endif
 627:./tmk_core/common/command.c **** 
 628:./tmk_core/common/command.c **** 
 629:./tmk_core/common/command.c **** /***********************************************************
 630:./tmk_core/common/command.c ****  * Utilities
 631:./tmk_core/common/command.c ****  ***********************************************************/
 632:./tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code)
 633:./tmk_core/common/command.c **** {
 634:./tmk_core/common/command.c ****     switch (code) {
 635:./tmk_core/common/command.c ****         case KC_1: return 1;
 636:./tmk_core/common/command.c ****         case KC_2: return 2;
 637:./tmk_core/common/command.c ****         case KC_3: return 3;
 638:./tmk_core/common/command.c ****         case KC_4: return 4;
 639:./tmk_core/common/command.c ****         case KC_5: return 5;
 640:./tmk_core/common/command.c ****         case KC_6: return 6;
 641:./tmk_core/common/command.c ****         case KC_7: return 7;
 642:./tmk_core/common/command.c ****         case KC_8: return 8;
 643:./tmk_core/common/command.c ****         case KC_9: return 9;
 644:./tmk_core/common/command.c ****         case KC_0: return 0;
 645:./tmk_core/common/command.c ****     }
 646:./tmk_core/common/command.c ****     return 0;
 647:./tmk_core/common/command.c **** }
 648:./tmk_core/common/command.c **** 
 649:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 650:./tmk_core/common/command.c **** {
 558               		.loc 1 650 0
 559               		.cfi_startproc
 560               	.LVL46:
 561 0000 CF93      		push r28
 562               	.LCFI47:
 563               		.cfi_def_cfa_offset 3
 564               		.cfi_offset 28, -2
 565               	/* prologue: function */
 566               	/* frame size = 0 */
 567               	/* stack size = 1 */
 568               	.L__stack_usage = 1
 569 0002 C82F      		mov r28,r24
 651:./tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 570               		.loc 1 651 0
 571 0004 1F92      		push __zero_reg__
 572               	.LCFI48:
 573               		.cfi_def_cfa_offset 4
 574 0006 8F93      		push r24
 575               	.LCFI49:
 576               		.cfi_def_cfa_offset 5
 577 0008 20E0      		ldi r18,lo8(__c.5066)
 578 000a 30E0      		ldi r19,hi8(__c.5066)
 579 000c 3F93      		push r19
 580               	.LCFI50:
 581               		.cfi_def_cfa_offset 6
 582 000e 2F93      		push r18
 583               	.LCFI51:
 584               		.cfi_def_cfa_offset 7
 585 0010 0E94 0000 		call __xprintf
 586               	.LVL47:
 652:./tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 587               		.loc 1 652 0
 588 0014 61E0      		ldi r22,lo8(1)
 589 0016 70E0      		ldi r23,0
 590 0018 80E0      		ldi r24,0
 591 001a 90E0      		ldi r25,0
 592 001c 00C0      		rjmp 2f
 593               		1:
 594 001e 660F      		lsl r22
 595 0020 771F      		rol r23
 596 0022 881F      		rol r24
 597 0024 991F      		rol r25
 598               		2:
 599 0026 CA95      		dec r28
 600 0028 02F4      		brpl 1b
 601 002a 0E94 0000 		call default_layer_set
 602               	.LVL48:
 653:./tmk_core/common/command.c ****     clear_keyboard();
 603               		.loc 1 653 0
 604 002e 0F90      		pop __tmp_reg__
 605 0030 0F90      		pop __tmp_reg__
 606 0032 0F90      		pop __tmp_reg__
 607 0034 0F90      		pop __tmp_reg__
 608               	.LCFI52:
 609               		.cfi_def_cfa_offset 3
 610               	/* epilogue start */
 654:./tmk_core/common/command.c **** }
 611               		.loc 1 654 0
 612 0036 CF91      		pop r28
 613               	.LVL49:
 653:./tmk_core/common/command.c ****     clear_keyboard();
 614               		.loc 1 653 0
 615 0038 0C94 0000 		jmp clear_keyboard
 616               	.LVL50:
 617               		.cfi_endproc
 618               	.LFE116:
 620               		.section	.text.command_common,"ax",@progbits
 622               	command_common:
 623               	.LFB107:
 182:./tmk_core/common/command.c **** {
 624               		.loc 1 182 0
 625               		.cfi_startproc
 626 0000 CF93      		push r28
 627               	.LCFI53:
 628               		.cfi_def_cfa_offset 3
 629               		.cfi_offset 28, -2
 630               	/* prologue: function */
 631               	/* frame size = 0 */
 632               	/* stack size = 1 */
 633               	.L__stack_usage = 1
 189:./tmk_core/common/command.c ****     switch (code) {
 634               		.loc 1 189 0
 635 0002 8732      		cpi r24,lo8(39)
 636 0004 00F4      		brsh .L50
 637 0006 8E31      		cpi r24,lo8(30)
 638 0008 00F0      		brlo .+2
 639 000a 00C0      		rjmp .L51
 640 000c 8031      		cpi r24,lo8(16)
 641 000e 01F4      		brne .+2
 642 0010 00C0      		rjmp .L52
 643 0012 00F4      		brsh .L53
 644 0014 8730      		cpi r24,lo8(7)
 645 0016 01F4      		brne .+2
 646 0018 00C0      		rjmp .L54
 647 001a 00F4      		brsh .L55
 648 001c 8630      		cpi r24,lo8(6)
 649 001e 01F0      		breq .+2
 650 0020 00C0      		rjmp .L49
 227:./tmk_core/common/command.c ****             debug_matrix   = false;
 651               		.loc 1 227 0
 652 0022 8091 0000 		lds r24,debug_config
 230:./tmk_core/common/command.c ****             debug_enable   = false;
 653               		.loc 1 230 0
 654 0026 817F      		andi r24,lo8(-15)
 655 0028 8E7F      		andi r24,lo8(~(1<<0))
 656 002a 8093 0000 		sts debug_config,r24
 657               	.LBB62:
 658               	.LBB63:
 393:./tmk_core/common/command.c ****     print("\n\t- Console -\n"
 659               		.loc 1 393 0
 660 002e 80E0      		ldi r24,lo8(__c.4906)
 661 0030 90E0      		ldi r25,hi8(__c.4906)
 662 0032 0E94 0000 		call xputs
 663               	.LBE63:
 664               	.LBE62:
 232:./tmk_core/common/command.c ****             print("C> ");
 665               		.loc 1 232 0
 666 0036 80E0      		ldi r24,lo8(__c.4838)
 667 0038 90E0      		ldi r25,hi8(__c.4838)
 668 003a 0E94 0000 		call xputs
 233:./tmk_core/common/command.c ****             command_state = CONSOLE;
 669               		.loc 1 233 0
 670 003e 81E0      		ldi r24,lo8(1)
 671 0040 8093 0000 		sts command_state,r24
 672 0044 00C0      		rjmp .L94
 673               	.L55:
 189:./tmk_core/common/command.c ****     switch (code) {
 674               		.loc 1 189 0
 675 0046 8B30      		cpi r24,lo8(11)
 676 0048 01F0      		breq .L57
 677 004a 8E30      		cpi r24,lo8(14)
 678 004c 01F4      		brne .+2
 679 004e 00C0      		rjmp .L58
 680 0050 00C0      		rjmp .L49
 681               	.L53:
 682 0052 8631      		cpi r24,lo8(22)
 683 0054 01F4      		brne .+2
 684 0056 00C0      		rjmp .L59
 685 0058 00F4      		brsh .L60
 686 005a 8131      		cpi r24,lo8(17)
 687 005c 01F4      		brne .+2
 688 005e 00C0      		rjmp .L61
 689 0060 00C0      		rjmp .L49
 690               	.L60:
 691 0062 8931      		cpi r24,lo8(25)
 692 0064 01F4      		brne .+2
 693 0066 00C0      		rjmp .L62
 694 0068 8B31      		cpi r24,lo8(27)
 695 006a 01F4      		brne .+2
 696 006c 00C0      		rjmp .L63
 697 006e 00C0      		rjmp .L49
 698               	.L50:
 699 0070 8833      		cpi r24,lo8(56)
 700 0072 01F0      		breq .L57
 701 0074 00F4      		brsh .L64
 702 0076 8932      		cpi r24,lo8(41)
 703 0078 01F4      		brne .+2
 704 007a 00C0      		rjmp .L65
 705 007c 8533      		cpi r24,lo8(53)
 706 007e 01F4      		brne .+2
 707 0080 00C0      		rjmp .L65
 708 0082 8732      		cpi r24,lo8(39)
 709 0084 01F0      		breq .+2
 710 0086 00C0      		rjmp .L49
 711 0088 00C0      		rjmp .L65
 712               	.L64:
 713 008a 8334      		cpi r24,lo8(67)
 714 008c 01F4      		brne .+2
 715 008e 00C0      		rjmp .L65
 716 0090 00F4      		brsh .L66
 717 0092 8A33      		cpi r24,lo8(58)
 718 0094 00F4      		brsh .+2
 719 0096 00C0      		rjmp .L49
 378:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 720               		.loc 1 378 0
 721 0098 8953      		subi r24,lo8(-(-57))
 722 009a 00C0      		rjmp .L98
 723               	.L66:
 189:./tmk_core/common/command.c ****     switch (code) {
 724               		.loc 1 189 0
 725 009c 8834      		cpi r24,lo8(72)
 726 009e 01F0      		breq .+2
 727 00a0 00C0      		rjmp .L49
 236:./tmk_core/common/command.c ****             clear_keyboard();
 728               		.loc 1 236 0
 729 00a2 0E94 0000 		call clear_keyboard
 237:./tmk_core/common/command.c ****             print("\n\nbootloader... ");
 730               		.loc 1 237 0
 731 00a6 80E0      		ldi r24,lo8(__c.4841)
 732 00a8 90E0      		ldi r25,hi8(__c.4841)
 733 00aa 0E94 0000 		call xputs
 734               	.LBB64:
 735               	.LBB65:
 736               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 737               		.loc 2 163 0
 738 00ae 2FEF      		ldi r18,lo8(3199999)
 739 00b0 83ED      		ldi r24,hi8(3199999)
 740 00b2 90E3      		ldi r25,hlo8(3199999)
 741 00b4 2150      		1: subi r18,1
 742 00b6 8040      		sbci r24,0
 743 00b8 9040      		sbci r25,0
 744 00ba 01F4      		brne 1b
 745 00bc 00C0      		rjmp .
 746 00be 0000      		nop
 747               	.LBE65:
 748               	.LBE64:
 239:./tmk_core/common/command.c ****             bootloader_jump(); // not return
 749               		.loc 1 239 0
 750 00c0 0E94 0000 		call bootloader_jump
 751 00c4 00C0      		rjmp .L94
 752               	.L57:
 753               	.LBB66:
 754               	.LBB67:
 117:./tmk_core/common/command.c ****     print("\n\t- Magic -\n"
 755               		.loc 1 117 0
 756 00c6 80E0      		ldi r24,lo8(__c.4829)
 757 00c8 90E0      		ldi r25,hi8(__c.4829)
 758 00ca 00C0      		rjmp .L97
 759               	.L70:
 760               	.LBE67:
 761               	.LBE66:
 249:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 762               		.loc 1 249 0
 763 00cc 80E0      		ldi r24,lo8(__c.4846)
 764 00ce 90E0      		ldi r25,hi8(__c.4846)
 765 00d0 0E94 0000 		call xputs
 250:./tmk_core/common/command.c ****                 debug_enable   = true;
 766               		.loc 1 250 0
 767 00d4 8091 0000 		lds r24,debug_config
 768 00d8 8160      		ori r24,lo8(1<<0)
 769 00da 8093 0000 		sts debug_config,r24
 770               	.L94:
 384:./tmk_core/common/command.c ****     return true;
 771               		.loc 1 384 0
 772 00de C1E0      		ldi r28,lo8(1)
 234:./tmk_core/common/command.c ****             break;
 773               		.loc 1 234 0
 774 00e0 00C0      		rjmp .L69
 775               	.L54:
 242:./tmk_core/common/command.c ****             if (debug_enable) {
 776               		.loc 1 242 0
 777 00e2 8091 0000 		lds r24,debug_config
 778 00e6 C82F      		mov r28,r24
 779 00e8 C170      		andi r28,1
 780 00ea 80FF      		sbrs r24,0
 781 00ec 00C0      		rjmp .L70
 243:./tmk_core/common/command.c ****                 print("\ndebug: off\n");
 782               		.loc 1 243 0
 783 00ee 80E0      		ldi r24,lo8(__c.4844)
 784 00f0 90E0      		ldi r25,hi8(__c.4844)
 785 00f2 0E94 0000 		call xputs
 244:./tmk_core/common/command.c ****                 debug_matrix   = false;
 786               		.loc 1 244 0
 787 00f6 8091 0000 		lds r24,debug_config
 247:./tmk_core/common/command.c ****                 debug_enable   = false;
 788               		.loc 1 247 0
 789 00fa 817F      		andi r24,lo8(-15)
 790 00fc 8E7F      		andi r24,lo8(~(1<<0))
 791 00fe 00C0      		rjmp .L95
 792               	.L63:
 254:./tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 793               		.loc 1 254 0
 794 0100 8091 0000 		lds r24,debug_config
 795 0104 81FB      		bst r24,1
 796 0106 CC27      		clr r28
 797 0108 C0F9      		bld r28,0
 798 010a 91E0      		ldi r25,lo8(1)
 799 010c C927      		eor r28,r25
 800 010e C0FB      		bst r28,0
 801 0110 81F9      		bld r24,1
 802 0112 8093 0000 		sts debug_config,r24
 255:./tmk_core/common/command.c ****             if (debug_matrix) {
 803               		.loc 1 255 0
 804 0116 CC23      		tst r28
 805 0118 01F0      		breq .L71
 256:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 806               		.loc 1 256 0
 807 011a 80E0      		ldi r24,lo8(__c.4849)
 808 011c 90E0      		ldi r25,hi8(__c.4849)
 809 011e 00C0      		rjmp .L96
 810               	.L71:
 259:./tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 811               		.loc 1 259 0
 812 0120 80E0      		ldi r24,lo8(__c.4851)
 813 0122 90E0      		ldi r25,hi8(__c.4851)
 814 0124 00C0      		rjmp .L97
 815               	.L58:
 263:./tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 816               		.loc 1 263 0
 817 0126 8091 0000 		lds r24,debug_config
 818 012a 82FB      		bst r24,2
 819 012c CC27      		clr r28
 820 012e C0F9      		bld r28,0
 821 0130 91E0      		ldi r25,lo8(1)
 822 0132 C927      		eor r28,r25
 823 0134 C0FB      		bst r28,0
 824 0136 82F9      		bld r24,2
 825 0138 8093 0000 		sts debug_config,r24
 264:./tmk_core/common/command.c ****             if (debug_keyboard) {
 826               		.loc 1 264 0
 827 013c CC23      		tst r28
 828 013e 01F0      		breq .L72
 265:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 829               		.loc 1 265 0
 830 0140 80E0      		ldi r24,lo8(__c.4854)
 831 0142 90E0      		ldi r25,hi8(__c.4854)
 832 0144 00C0      		rjmp .L96
 833               	.L72:
 268:./tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 834               		.loc 1 268 0
 835 0146 80E0      		ldi r24,lo8(__c.4856)
 836 0148 90E0      		ldi r25,hi8(__c.4856)
 837 014a 00C0      		rjmp .L97
 838               	.L52:
 272:./tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 839               		.loc 1 272 0
 840 014c 8091 0000 		lds r24,debug_config
 841 0150 83FB      		bst r24,3
 842 0152 CC27      		clr r28
 843 0154 C0F9      		bld r28,0
 844 0156 91E0      		ldi r25,lo8(1)
 845 0158 C927      		eor r28,r25
 846 015a C0FB      		bst r28,0
 847 015c 83F9      		bld r24,3
 848 015e 8093 0000 		sts debug_config,r24
 273:./tmk_core/common/command.c ****             if (debug_mouse) {
 849               		.loc 1 273 0
 850 0162 CC23      		tst r28
 851 0164 01F0      		breq .L73
 274:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 852               		.loc 1 274 0
 853 0166 80E0      		ldi r24,lo8(__c.4859)
 854 0168 90E0      		ldi r25,hi8(__c.4859)
 855               	.L96:
 856 016a 0E94 0000 		call xputs
 275:./tmk_core/common/command.c ****                 debug_enable = true;
 857               		.loc 1 275 0
 858 016e 8091 0000 		lds r24,debug_config
 859 0172 8160      		ori r24,lo8(1<<0)
 860               	.L95:
 861 0174 8093 0000 		sts debug_config,r24
 862 0178 00C0      		rjmp .L69
 863               	.L73:
 277:./tmk_core/common/command.c ****                 print("\nmouse: off\n");
 864               		.loc 1 277 0
 865 017a 80E0      		ldi r24,lo8(__c.4861)
 866 017c 90E0      		ldi r25,hi8(__c.4861)
 867               	.L97:
 868 017e 0E94 0000 		call xputs
 869 0182 00C0      		rjmp .L94
 870               	.L62:
 281:./tmk_core/common/command.c ****             print("\n\t- Version -\n");
 871               		.loc 1 281 0
 872 0184 80E0      		ldi r24,lo8(__c.4864)
 873 0186 90E0      		ldi r25,hi8(__c.4864)
 874 0188 0E94 0000 		call xputs
 282:./tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 875               		.loc 1 282 0
 876 018c 80E0      		ldi r24,lo8(__c.4866)
 877 018e 90E0      		ldi r25,hi8(__c.4866)
 878 0190 0E94 0000 		call xputs
 283:./tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 879               		.loc 1 283 0
 880 0194 80E0      		ldi r24,lo8(__c.4868)
 881 0196 90E0      		ldi r25,hi8(__c.4868)
 882 0198 0E94 0000 		call xputs
 286:./tmk_core/common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 883               		.loc 1 286 0
 884 019c 80E0      		ldi r24,lo8(__c.4870)
 885 019e 90E0      		ldi r25,hi8(__c.4870)
 886 01a0 0E94 0000 		call xputs
 288:./tmk_core/common/command.c ****             print("OPTIONS:"
 887               		.loc 1 288 0
 888 01a4 80E0      		ldi r24,lo8(__c.4872)
 889 01a6 90E0      		ldi r25,hi8(__c.4872)
 890 01a8 0E94 0000 		call xputs
 324:./tmk_core/common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 891               		.loc 1 324 0
 892 01ac 80E0      		ldi r24,lo8(__c.4874)
 893 01ae 90E0      		ldi r25,hi8(__c.4874)
 894 01b0 00C0      		rjmp .L97
 895               	.L59:
 334:./tmk_core/common/command.c ****             print("\n\t- Status -\n");
 896               		.loc 1 334 0
 897 01b2 80E0      		ldi r24,lo8(__c.4877)
 898 01b4 90E0      		ldi r25,hi8(__c.4877)
 899 01b6 0E94 0000 		call xputs
 335:./tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 900               		.loc 1 335 0
 901 01ba 0E94 0000 		call host_keyboard_leds
 902 01be 1F92      		push __zero_reg__
 903               	.LCFI54:
 904               		.cfi_def_cfa_offset 4
 905 01c0 8F93      		push r24
 906               	.LCFI55:
 907               		.cfi_def_cfa_offset 5
 908 01c2 80E0      		ldi r24,lo8(__c.4879)
 909 01c4 90E0      		ldi r25,hi8(__c.4879)
 910 01c6 9F93      		push r25
 911               	.LCFI56:
 912               		.cfi_def_cfa_offset 6
 913 01c8 8F93      		push r24
 914               	.LCFI57:
 915               		.cfi_def_cfa_offset 7
 916 01ca 0E94 0000 		call __xprintf
 336:./tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 917               		.loc 1 336 0
 918 01ce 8091 0000 		lds r24,keyboard_protocol
 919 01d2 1F92      		push __zero_reg__
 920               	.LCFI58:
 921               		.cfi_def_cfa_offset 8
 922 01d4 8F93      		push r24
 923               	.LCFI59:
 924               		.cfi_def_cfa_offset 9
 925 01d6 80E0      		ldi r24,lo8(__c.4881)
 926 01d8 90E0      		ldi r25,hi8(__c.4881)
 927 01da 9F93      		push r25
 928               	.LCFI60:
 929               		.cfi_def_cfa_offset 10
 930 01dc 8F93      		push r24
 931               	.LCFI61:
 932               		.cfi_def_cfa_offset 11
 933 01de 0E94 0000 		call __xprintf
 337:./tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 934               		.loc 1 337 0
 935 01e2 8091 0000 		lds r24,keyboard_idle
 936 01e6 1F92      		push __zero_reg__
 937               	.LCFI62:
 938               		.cfi_def_cfa_offset 12
 939 01e8 8F93      		push r24
 940               	.LCFI63:
 941               		.cfi_def_cfa_offset 13
 942 01ea 80E0      		ldi r24,lo8(__c.4883)
 943 01ec 90E0      		ldi r25,hi8(__c.4883)
 944 01ee 9F93      		push r25
 945               	.LCFI64:
 946               		.cfi_def_cfa_offset 14
 947 01f0 8F93      		push r24
 948               	.LCFI65:
 949               		.cfi_def_cfa_offset 15
 950 01f2 0E94 0000 		call __xprintf
 339:./tmk_core/common/command.c ****             print_val_hex8(keyboard_nkro);
 951               		.loc 1 339 0
 952 01f6 8091 0000 		lds r24,keyboard_nkro
 953 01fa 1F92      		push __zero_reg__
 954               	.LCFI66:
 955               		.cfi_def_cfa_offset 16
 956 01fc 8F93      		push r24
 957               	.LCFI67:
 958               		.cfi_def_cfa_offset 17
 959 01fe 80E0      		ldi r24,lo8(__c.4885)
 960 0200 90E0      		ldi r25,hi8(__c.4885)
 961 0202 9F93      		push r25
 962               	.LCFI68:
 963               		.cfi_def_cfa_offset 18
 964 0204 8F93      		push r24
 965               	.LCFI69:
 966               		.cfi_def_cfa_offset 19
 967 0206 0E94 0000 		call __xprintf
 341:./tmk_core/common/command.c ****             print_val_hex32(timer_read32());
 968               		.loc 1 341 0
 969 020a 0E94 0000 		call timer_read32
 970 020e 9F93      		push r25
 971               	.LCFI70:
 972               		.cfi_def_cfa_offset 20
 973 0210 8F93      		push r24
 974               	.LCFI71:
 975               		.cfi_def_cfa_offset 21
 976 0212 7F93      		push r23
 977               	.LCFI72:
 978               		.cfi_def_cfa_offset 22
 979 0214 6F93      		push r22
 980               	.LCFI73:
 981               		.cfi_def_cfa_offset 23
 982 0216 80E0      		ldi r24,lo8(__c.4887)
 983 0218 90E0      		ldi r25,hi8(__c.4887)
 984 021a 9F93      		push r25
 985               	.LCFI74:
 986               		.cfi_def_cfa_offset 24
 987 021c 8F93      		push r24
 988               	.LCFI75:
 989               		.cfi_def_cfa_offset 25
 990 021e 0E94 0000 		call __xprintf
 356:./tmk_core/common/command.c ****             break;
 991               		.loc 1 356 0
 992 0222 8DB7      		in r24,__SP_L__
 993 0224 9EB7      		in r25,__SP_H__
 994 0226 4696      		adiw r24,22
 995 0228 0FB6      		in __tmp_reg__,__SREG__
 996 022a F894      		cli
 997 022c 9EBF      		out __SP_H__,r25
 998 022e 0FBE      		out __SREG__,__tmp_reg__
 999 0230 8DBF      		out __SP_L__,r24
 1000               	.LCFI76:
 1001               		.cfi_def_cfa_offset 3
 1002 0232 00C0      		rjmp .L94
 1003               	.L61:
 359:./tmk_core/common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 1004               		.loc 1 359 0
 1005 0234 0E94 0000 		call clear_keyboard
 360:./tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 1006               		.loc 1 360 0
 1007 0238 C091 0000 		lds r28,keyboard_nkro
 1008 023c 81E0      		ldi r24,lo8(1)
 1009 023e C827      		eor r28,r24
 1010 0240 C093 0000 		sts keyboard_nkro,r28
 361:./tmk_core/common/command.c ****             if (keyboard_nkro) {
 1011               		.loc 1 361 0
 1012 0244 CC23      		tst r28
 1013 0246 01F0      		breq .L74
 362:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 1014               		.loc 1 362 0
 1015 0248 80E0      		ldi r24,lo8(__c.4890)
 1016 024a 90E0      		ldi r25,hi8(__c.4890)
 1017 024c 0E94 0000 		call xputs
 1018 0250 00C0      		rjmp .L69
 1019               	.L74:
 364:./tmk_core/common/command.c ****                 print("NKRO: off\n");
 1020               		.loc 1 364 0
 1021 0252 80E0      		ldi r24,lo8(__c.4892)
 1022 0254 90E0      		ldi r25,hi8(__c.4892)
 1023 0256 00C0      		rjmp .L97
 1024               	.L65:
 372:./tmk_core/common/command.c ****             switch_default_layer(0);
 1025               		.loc 1 372 0
 1026 0258 80E0      		ldi r24,0
 1027 025a 00C0      		rjmp .L98
 1028               	.L51:
 375:./tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 1029               		.loc 1 375 0
 1030 025c 8D51      		subi r24,lo8(-(-29))
 1031               	.L98:
 378:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 1032               		.loc 1 378 0
 1033 025e 0E94 0000 		call switch_default_layer
 1034 0262 00C0      		rjmp .L94
 1035               	.L49:
 381:./tmk_core/common/command.c ****             print("?");
 1036               		.loc 1 381 0
 1037 0264 80E0      		ldi r24,lo8(__c.4901)
 1038 0266 90E0      		ldi r25,hi8(__c.4901)
 1039 0268 0E94 0000 		call xputs
 382:./tmk_core/common/command.c ****             return false;
 1040               		.loc 1 382 0
 1041 026c C0E0      		ldi r28,0
 1042               	.L69:
 385:./tmk_core/common/command.c **** }
 1043               		.loc 1 385 0
 1044 026e 8C2F      		mov r24,r28
 1045               	/* epilogue start */
 1046 0270 CF91      		pop r28
 1047 0272 0895      		ret
 1048               		.cfi_endproc
 1049               	.LFE107:
 1051               		.section	.text.command_extra,"ax",@progbits
 1052               		.weak	command_extra
 1054               	command_extra:
 1055               	.LFB104:
  99:./tmk_core/common/command.c **** {
 1056               		.loc 1 99 0
 1057               		.cfi_startproc
 1058               	.LVL51:
 1059               	/* prologue: function */
 1060               	/* frame size = 0 */
 1061               	/* stack size = 0 */
 1062               	.L__stack_usage = 0
 102:./tmk_core/common/command.c **** }
 1063               		.loc 1 102 0
 1064 0000 80E0      		ldi r24,0
 1065               	.LVL52:
 1066 0002 0895      		ret
 1067               		.cfi_endproc
 1068               	.LFE104:
 1070               		.section	.text.command_console_extra,"ax",@progbits
 1071               		.weak	command_console_extra
 1073               	command_console_extra:
 1074               	.LFB105:
 106:./tmk_core/common/command.c **** {
 1075               		.loc 1 106 0
 1076               		.cfi_startproc
 1077               	.LVL53:
 1078               	/* prologue: function */
 1079               	/* frame size = 0 */
 1080               	/* stack size = 0 */
 1081               	.L__stack_usage = 0
 109:./tmk_core/common/command.c **** }
 1082               		.loc 1 109 0
 1083 0000 80E0      		ldi r24,0
 1084               	.LVL54:
 1085 0002 0895      		ret
 1086               		.cfi_endproc
 1087               	.LFE105:
 1089               		.section	.text.command_proc,"ax",@progbits
 1090               	.global	command_proc
 1092               	command_proc:
 1093               	.LFB103:
  70:./tmk_core/common/command.c **** {
 1094               		.loc 1 70 0
 1095               		.cfi_startproc
 1096 0000 CF93      		push r28
 1097               	.LCFI77:
 1098               		.cfi_def_cfa_offset 3
 1099               		.cfi_offset 28, -2
 1100               	/* prologue: function */
 1101               	/* frame size = 0 */
 1102               	/* stack size = 1 */
 1103               	.L__stack_usage = 1
 1104 0002 C82F      		mov r28,r24
  71:./tmk_core/common/command.c ****     switch (command_state) {
 1105               		.loc 1 71 0
 1106 0004 8091 0000 		lds r24,command_state
 1107 0008 8130      		cpi r24,lo8(1)
 1108 000a 01F0      		breq .L103
 1109 000c 00F0      		brlo .L104
 1110 000e 8230      		cpi r24,lo8(2)
 1111 0010 01F4      		brne .+2
 1112 0012 00C0      		rjmp .L105
 1113 0014 00C0      		rjmp .L171
 1114               	.L104:
  73:./tmk_core/common/command.c ****             if (!IS_COMMAND())
 1115               		.loc 1 73 0
 1116 0016 A091 0000 		lds r26,keyboard_report
 1117 001a B091 0000 		lds r27,keyboard_report+1
 1118 001e 8C91      		ld r24,X
 1119 0020 8232      		cpi r24,lo8(34)
 1120 0022 01F0      		breq .+2
 1121 0024 00C0      		rjmp .L134
 1122 0026 00C0      		rjmp .L170
 1123               	.L103:
  78:./tmk_core/common/command.c ****             if (IS_COMMAND())
 1124               		.loc 1 78 0
 1125 0028 A091 0000 		lds r26,keyboard_report
 1126 002c B091 0000 		lds r27,keyboard_report+1
 1127 0030 8C91      		ld r24,X
 1128 0032 8232      		cpi r24,lo8(34)
 1129 0034 01F4      		brne .L108
 1130               	.L170:
  79:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1131               		.loc 1 79 0
 1132 0036 8C2F      		mov r24,r28
 1133 0038 0E94 0000 		call command_extra
 1134 003c 8111      		cpse r24,__zero_reg__
 1135 003e 00C0      		rjmp .L137
  79:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1136               		.loc 1 79 0 is_stmt 0 discriminator 2
 1137 0040 8C2F      		mov r24,r28
 1138 0042 0E94 0000 		call command_common
 1139 0046 00C0      		rjmp .L110
 1140               	.L108:
  81:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 1141               		.loc 1 81 0 is_stmt 1
 1142 0048 8C2F      		mov r24,r28
 1143 004a 0E94 0000 		call command_console_extra
 1144 004e 8111      		cpse r24,__zero_reg__
 1145 0050 00C0      		rjmp .L137
 1146               	.LBB106:
 1147               	.LBB107:
 403:./tmk_core/common/command.c ****     switch (code) {
 1148               		.loc 1 403 0
 1149 0052 C431      		cpi r28,lo8(20)
 1150 0054 01F0      		breq .L112
 1151 0056 00F4      		brsh .L113
 1152 0058 CB30      		cpi r28,lo8(11)
 1153 005a 01F0      		breq .L114
 1154 005c C031      		cpi r28,lo8(16)
 1155 005e 01F4      		brne .L111
 414:./tmk_core/common/command.c ****             mousekey_console_help();
 1156               		.loc 1 414 0
 1157 0060 0E94 0000 		call mousekey_console_help
 415:./tmk_core/common/command.c ****             print("M> ");
 1158               		.loc 1 415 0
 1159 0064 80E0      		ldi r24,lo8(__c.4917)
 1160 0066 90E0      		ldi r25,hi8(__c.4917)
 1161 0068 0E94 0000 		call xputs
 416:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 1162               		.loc 1 416 0
 1163 006c 82E0      		ldi r24,lo8(2)
 1164 006e 8093 0000 		sts command_state,r24
 1165 0072 00C0      		rjmp .L137
 1166               	.L113:
 403:./tmk_core/common/command.c ****     switch (code) {
 1167               		.loc 1 403 0
 1168 0074 C932      		cpi r28,lo8(41)
 1169 0076 01F0      		breq .L112
 1170 0078 C833      		cpi r28,lo8(56)
 1171 007a 01F4      		brne .L111
 1172               	.L114:
 1173               	.LBB108:
 1174               	.LBB109:
 393:./tmk_core/common/command.c ****     print("\n\t- Console -\n"
 1175               		.loc 1 393 0
 1176 007c 80E0      		ldi r24,lo8(__c.4906)
 1177 007e 90E0      		ldi r25,hi8(__c.4906)
 1178 0080 0E94 0000 		call xputs
 1179               	.LBE109:
 1180               	.LBE108:
 423:./tmk_core/common/command.c ****     print("C> ");
 1181               		.loc 1 423 0
 1182 0084 80E0      		ldi r24,lo8(__c.4922)
 1183 0086 90E0      		ldi r25,hi8(__c.4922)
 1184 0088 0E94 0000 		call xputs
 1185 008c 00C0      		rjmp .L137
 1186               	.L112:
 410:./tmk_core/common/command.c ****             command_state = ONESHOT;
 1187               		.loc 1 410 0
 1188 008e 1092 0000 		sts command_state,__zero_reg__
 1189 0092 00C0      		rjmp .L117
 1190               	.L111:
 420:./tmk_core/common/command.c ****             print("?");
 1191               		.loc 1 420 0
 1192 0094 80E0      		ldi r24,lo8(__c.4920)
 1193 0096 90E0      		ldi r25,hi8(__c.4920)
 1194 0098 0E94 0000 		call xputs
 1195 009c 00C0      		rjmp .L117
 1196               	.L137:
 1197               	.LBE107:
 1198               	.LBE106:
  81:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 1199               		.loc 1 81 0
 1200 009e 81E0      		ldi r24,lo8(1)
 1201               	.L110:
  81:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 1202               		.loc 1 81 0 is_stmt 0 discriminator 4
 1203 00a0 8170      		andi r24,lo8(1)
 1204 00a2 00C0      		rjmp .L163
 1205               	.L105:
 1206               	.LBB110:
 1207               	.LBB111:
 568:./tmk_core/common/command.c ****     switch (code) {
 1208               		.loc 1 568 0 is_stmt 1
 1209 00a4 C432      		cpi r28,lo8(36)
 1210 00a6 00F4      		brsh .L119
 1211 00a8 CE31      		cpi r28,lo8(30)
 1212 00aa 00F0      		brlo .+2
 1213 00ac 00C0      		rjmp .L120
 1214 00ae CB30      		cpi r28,lo8(11)
 1215 00b0 01F0      		breq .L121
 1216 00b2 00F4      		brsh .L122
 1217 00b4 C730      		cpi r28,lo8(7)
 1218 00b6 01F0      		breq .+2
 1219 00b8 00C0      		rjmp .L118
 607:./tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 1220               		.loc 1 607 0
 1221 00ba 8EE1      		ldi r24,lo8(30)
 1222 00bc 8093 0000 		sts mk_delay,r24
 608:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1223               		.loc 1 608 0
 1224 00c0 82E3      		ldi r24,lo8(50)
 1225 00c2 8093 0000 		sts mk_interval,r24
 609:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1226               		.loc 1 609 0
 1227 00c6 8AE0      		ldi r24,lo8(10)
 1228 00c8 8093 0000 		sts mk_max_speed,r24
 610:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1229               		.loc 1 610 0
 1230 00cc 84E1      		ldi r24,lo8(20)
 1231 00ce 8093 0000 		sts mk_time_to_max,r24
 611:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1232               		.loc 1 611 0
 1233 00d2 88E0      		ldi r24,lo8(8)
 1234 00d4 8093 0000 		sts mk_wheel_max_speed,r24
 612:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1235               		.loc 1 612 0
 1236 00d8 88E2      		ldi r24,lo8(40)
 1237 00da 8093 0000 		sts mk_wheel_time_to_max,r24
 613:./tmk_core/common/command.c ****             print("set default\n");
 1238               		.loc 1 613 0
 1239 00de 80E0      		ldi r24,lo8(__c.5041)
 1240 00e0 90E0      		ldi r25,hi8(__c.5041)
 1241 00e2 0E94 0000 		call xputs
 1242 00e6 00C0      		rjmp .L131
 1243               	.L122:
 568:./tmk_core/common/command.c ****     switch (code) {
 1244               		.loc 1 568 0
 1245 00e8 C331      		cpi r28,lo8(19)
 1246 00ea 01F0      		breq .L124
 1247 00ec C431      		cpi r28,lo8(20)
 1248 00ee 01F0      		breq .L125
 1249 00f0 00C0      		rjmp .L118
 1250               	.L119:
 1251 00f2 CB34      		cpi r28,lo8(75)
 1252 00f4 01F4      		brne .+2
 1253 00f6 00C0      		rjmp .L126
 1254 00f8 00F4      		brsh .L127
 1255 00fa C932      		cpi r28,lo8(41)
 1256 00fc 01F0      		breq .L125
 1257 00fe C833      		cpi r28,lo8(56)
 1258 0100 01F0      		breq .L121
 1259 0102 00C0      		rjmp .L118
 1260               	.L127:
 1261 0104 C135      		cpi r28,lo8(81)
 1262 0106 01F4      		brne .+2
 1263 0108 00C0      		rjmp .L128
 1264 010a C235      		cpi r28,lo8(82)
 1265 010c 01F4      		brne .+2
 1266 010e 00C0      		rjmp .L129
 1267 0110 CE34      		cpi r28,lo8(78)
 1268 0112 01F0      		breq .+2
 1269 0114 00C0      		rjmp .L118
 604:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 1270               		.loc 1 604 0
 1271 0116 6AE0      		ldi r22,lo8(10)
 1272 0118 00C0      		rjmp .L165
 1273               	.L121:
 571:./tmk_core/common/command.c ****             mousekey_console_help();
 1274               		.loc 1 571 0
 1275 011a 0E94 0000 		call mousekey_console_help
 1276 011e 00C0      		rjmp .L131
 1277               	.L125:
 575:./tmk_core/common/command.c ****             if (mousekey_param) {
 1278               		.loc 1 575 0
 1279 0120 8091 0000 		lds r24,mousekey_param
 1280 0124 8823      		tst r24
 1281 0126 01F0      		breq .L132
 576:./tmk_core/common/command.c ****                 mousekey_param = 0;
 1282               		.loc 1 576 0
 1283 0128 1092 0000 		sts mousekey_param,__zero_reg__
 1284 012c 00C0      		rjmp .L131
 1285               	.L132:
 578:./tmk_core/common/command.c ****                 print("C> ");
 1286               		.loc 1 578 0
 1287 012e 80E0      		ldi r24,lo8(__c.5027)
 1288 0130 90E0      		ldi r25,hi8(__c.5027)
 1289 0132 0E94 0000 		call xputs
 579:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 1290               		.loc 1 579 0
 1291 0136 81E0      		ldi r24,lo8(1)
 1292 0138 8093 0000 		sts command_state,r24
 1293 013c 00C0      		rjmp .L163
 1294               	.L124:
 1295               	.LBB112:
 1296               	.LBB113:
 436:./tmk_core/common/command.c ****     print("\n\t- Values -\n");
 1297               		.loc 1 436 0
 1298 013e 80E0      		ldi r24,lo8(__c.4928)
 1299 0140 90E0      		ldi r25,hi8(__c.4928)
 1300 0142 0E94 0000 		call xputs
 437:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 1301               		.loc 1 437 0
 1302 0146 80E0      		ldi r24,lo8(__c.4930)
 1303 0148 90E0      		ldi r25,hi8(__c.4930)
 1304 014a 0E94 0000 		call xputs
 1305 014e 8091 0000 		lds r24,mk_delay
 1306 0152 1F92      		push __zero_reg__
 1307               	.LCFI78:
 1308               		.cfi_def_cfa_offset 4
 1309 0154 8F93      		push r24
 1310               	.LCFI79:
 1311               		.cfi_def_cfa_offset 5
 1312 0156 80E0      		ldi r24,lo8(__c.4932)
 1313 0158 90E0      		ldi r25,hi8(__c.4932)
 1314 015a 9F93      		push r25
 1315               	.LCFI80:
 1316               		.cfi_def_cfa_offset 6
 1317 015c 8F93      		push r24
 1318               	.LCFI81:
 1319               		.cfi_def_cfa_offset 7
 1320 015e 0E94 0000 		call __xprintf
 1321 0162 80E0      		ldi r24,lo8(__c.4934)
 1322 0164 90E0      		ldi r25,hi8(__c.4934)
 1323 0166 0E94 0000 		call xputs
 438:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 1324               		.loc 1 438 0
 1325 016a 80E0      		ldi r24,lo8(__c.4936)
 1326 016c 90E0      		ldi r25,hi8(__c.4936)
 1327 016e 0E94 0000 		call xputs
 1328 0172 8091 0000 		lds r24,mk_interval
 1329 0176 1F92      		push __zero_reg__
 1330               	.LCFI82:
 1331               		.cfi_def_cfa_offset 8
 1332 0178 8F93      		push r24
 1333               	.LCFI83:
 1334               		.cfi_def_cfa_offset 9
 1335 017a 80E0      		ldi r24,lo8(__c.4938)
 1336 017c 90E0      		ldi r25,hi8(__c.4938)
 1337 017e 9F93      		push r25
 1338               	.LCFI84:
 1339               		.cfi_def_cfa_offset 10
 1340 0180 8F93      		push r24
 1341               	.LCFI85:
 1342               		.cfi_def_cfa_offset 11
 1343 0182 0E94 0000 		call __xprintf
 1344 0186 80E0      		ldi r24,lo8(__c.4940)
 1345 0188 90E0      		ldi r25,hi8(__c.4940)
 1346 018a 0E94 0000 		call xputs
 439:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 1347               		.loc 1 439 0
 1348 018e 80E0      		ldi r24,lo8(__c.4942)
 1349 0190 90E0      		ldi r25,hi8(__c.4942)
 1350 0192 0E94 0000 		call xputs
 1351 0196 8091 0000 		lds r24,mk_max_speed
 1352 019a 1F92      		push __zero_reg__
 1353               	.LCFI86:
 1354               		.cfi_def_cfa_offset 12
 1355 019c 8F93      		push r24
 1356               	.LCFI87:
 1357               		.cfi_def_cfa_offset 13
 1358 019e 80E0      		ldi r24,lo8(__c.4944)
 1359 01a0 90E0      		ldi r25,hi8(__c.4944)
 1360 01a2 9F93      		push r25
 1361               	.LCFI88:
 1362               		.cfi_def_cfa_offset 14
 1363 01a4 8F93      		push r24
 1364               	.LCFI89:
 1365               		.cfi_def_cfa_offset 15
 1366 01a6 0E94 0000 		call __xprintf
 1367 01aa 80E0      		ldi r24,lo8(__c.4946)
 1368 01ac 90E0      		ldi r25,hi8(__c.4946)
 1369 01ae 0E94 0000 		call xputs
 440:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 1370               		.loc 1 440 0
 1371 01b2 80E0      		ldi r24,lo8(__c.4948)
 1372 01b4 90E0      		ldi r25,hi8(__c.4948)
 1373 01b6 0E94 0000 		call xputs
 1374 01ba 8091 0000 		lds r24,mk_time_to_max
 1375 01be 1F92      		push __zero_reg__
 1376               	.LCFI90:
 1377               		.cfi_def_cfa_offset 16
 1378 01c0 8F93      		push r24
 1379               	.LCFI91:
 1380               		.cfi_def_cfa_offset 17
 1381 01c2 80E0      		ldi r24,lo8(__c.4950)
 1382 01c4 90E0      		ldi r25,hi8(__c.4950)
 1383 01c6 9F93      		push r25
 1384               	.LCFI92:
 1385               		.cfi_def_cfa_offset 18
 1386 01c8 8F93      		push r24
 1387               	.LCFI93:
 1388               		.cfi_def_cfa_offset 19
 1389 01ca 0E94 0000 		call __xprintf
 1390 01ce 80E0      		ldi r24,lo8(__c.4952)
 1391 01d0 90E0      		ldi r25,hi8(__c.4952)
 1392 01d2 0E94 0000 		call xputs
 441:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 1393               		.loc 1 441 0
 1394 01d6 80E0      		ldi r24,lo8(__c.4954)
 1395 01d8 90E0      		ldi r25,hi8(__c.4954)
 1396 01da 0E94 0000 		call xputs
 1397 01de 8091 0000 		lds r24,mk_wheel_max_speed
 1398 01e2 1F92      		push __zero_reg__
 1399               	.LCFI94:
 1400               		.cfi_def_cfa_offset 20
 1401 01e4 8F93      		push r24
 1402               	.LCFI95:
 1403               		.cfi_def_cfa_offset 21
 1404 01e6 80E0      		ldi r24,lo8(__c.4956)
 1405 01e8 90E0      		ldi r25,hi8(__c.4956)
 1406 01ea 9F93      		push r25
 1407               	.LCFI96:
 1408               		.cfi_def_cfa_offset 22
 1409 01ec 8F93      		push r24
 1410               	.LCFI97:
 1411               		.cfi_def_cfa_offset 23
 1412 01ee 0E94 0000 		call __xprintf
 1413 01f2 80E0      		ldi r24,lo8(__c.4958)
 1414 01f4 90E0      		ldi r25,hi8(__c.4958)
 1415 01f6 0E94 0000 		call xputs
 442:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 1416               		.loc 1 442 0
 1417 01fa 80E0      		ldi r24,lo8(__c.4960)
 1418 01fc 90E0      		ldi r25,hi8(__c.4960)
 1419 01fe 0E94 0000 		call xputs
 1420 0202 8091 0000 		lds r24,mk_wheel_time_to_max
 1421 0206 1F92      		push __zero_reg__
 1422               	.LCFI98:
 1423               		.cfi_def_cfa_offset 24
 1424 0208 8F93      		push r24
 1425               	.LCFI99:
 1426               		.cfi_def_cfa_offset 25
 1427 020a 80E0      		ldi r24,lo8(__c.4962)
 1428 020c 90E0      		ldi r25,hi8(__c.4962)
 1429 020e 9F93      		push r25
 1430               	.LCFI100:
 1431               		.cfi_def_cfa_offset 26
 1432 0210 8F93      		push r24
 1433               	.LCFI101:
 1434               		.cfi_def_cfa_offset 27
 1435 0212 0E94 0000 		call __xprintf
 1436 0216 80E0      		ldi r24,lo8(__c.4964)
 1437 0218 90E0      		ldi r25,hi8(__c.4964)
 1438 021a 0E94 0000 		call xputs
 1439 021e 8DB7      		in r24,__SP_L__
 1440 0220 9EB7      		in r25,__SP_H__
 1441 0222 4896      		adiw r24,24
 1442 0224 0FB6      		in __tmp_reg__,__SREG__
 1443 0226 F894      		cli
 1444 0228 9EBF      		out __SP_H__,r25
 1445 022a 0FBE      		out __SREG__,__tmp_reg__
 1446 022c 8DBF      		out __SP_L__,r24
 1447               	.LCFI102:
 1448               		.cfi_def_cfa_offset 3
 1449 022e 00C0      		rjmp .L131
 1450               	.L120:
 1451 0230 CE51      		subi r28,lo8(-(-30))
 1452 0232 EC2F      		mov r30,r28
 1453 0234 F0E0      		ldi r31,0
 1454 0236 E050      		subi r30,lo8(-(CSWTCH.43))
 1455 0238 F040      		sbci r31,hi8(-(CSWTCH.43))
 1456               	.LBE113:
 1457               	.LBE112:
 592:./tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 1458               		.loc 1 592 0
 1459 023a 8081      		ld r24,Z
 1460 023c 8093 0000 		sts mousekey_param,r24
 1461 0240 00C0      		rjmp .L131
 1462               	.L129:
 595:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 1463               		.loc 1 595 0
 1464 0242 61E0      		ldi r22,lo8(1)
 1465 0244 00C0      		rjmp .L164
 1466               	.L128:
 598:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 1467               		.loc 1 598 0
 1468 0246 61E0      		ldi r22,lo8(1)
 1469 0248 00C0      		rjmp .L165
 1470               	.L126:
 601:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 1471               		.loc 1 601 0
 1472 024a 6AE0      		ldi r22,lo8(10)
 1473               	.L164:
 1474 024c 8091 0000 		lds r24,mousekey_param
 1475 0250 0E94 0000 		call mousekey_param_inc
 1476 0254 00C0      		rjmp .L131
 1477               	.L165:
 604:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 1478               		.loc 1 604 0
 1479 0256 8091 0000 		lds r24,mousekey_param
 1480 025a 0E94 0000 		call mousekey_param_dec
 1481 025e 00C0      		rjmp .L131
 1482               	.L118:
 616:./tmk_core/common/command.c ****             print("?");
 1483               		.loc 1 616 0
 1484 0260 80E0      		ldi r24,lo8(__c.5044)
 1485 0262 90E0      		ldi r25,hi8(__c.5044)
 1486 0264 00C0      		rjmp .L167
 1487               	.L131:
 619:./tmk_core/common/command.c ****     if (mousekey_param) {
 1488               		.loc 1 619 0
 1489 0266 8091 0000 		lds r24,mousekey_param
 1490 026a 8823      		tst r24
 1491 026c 01F0      		breq .L133
 620:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 1492               		.loc 1 620 0
 1493 026e 1F92      		push __zero_reg__
 1494               	.LCFI103:
 1495               		.cfi_def_cfa_offset 4
 1496 0270 8F93      		push r24
 1497               	.LCFI104:
 1498               		.cfi_def_cfa_offset 5
 1499 0272 80E0      		ldi r24,lo8(__c.5046)
 1500 0274 90E0      		ldi r25,hi8(__c.5046)
 1501 0276 9F93      		push r25
 1502               	.LCFI105:
 1503               		.cfi_def_cfa_offset 6
 1504 0278 8F93      		push r24
 1505               	.LCFI106:
 1506               		.cfi_def_cfa_offset 7
 1507 027a 0E94 0000 		call __xprintf
 1508 027e 0F90      		pop __tmp_reg__
 1509 0280 0F90      		pop __tmp_reg__
 1510 0282 0F90      		pop __tmp_reg__
 1511 0284 0F90      		pop __tmp_reg__
 1512               	.LCFI107:
 1513               		.cfi_def_cfa_offset 3
 1514 0286 00C0      		rjmp .L166
 1515               	.L133:
 622:./tmk_core/common/command.c ****         print("M>" );
 1516               		.loc 1 622 0
 1517 0288 80E0      		ldi r24,lo8(__c.5048)
 1518 028a 90E0      		ldi r25,hi8(__c.5048)
 1519               	.L167:
 1520 028c 0E94 0000 		call xputs
 1521               	.L166:
 1522               	.LBE111:
 1523               	.LBE110:
  92:./tmk_core/common/command.c ****     return true;
 1524               		.loc 1 92 0
 1525 0290 81E0      		ldi r24,lo8(1)
 1526 0292 00C0      		rjmp .L163
 1527               	.L171:
  89:./tmk_core/common/command.c ****             command_state = ONESHOT;
 1528               		.loc 1 89 0
 1529 0294 1092 0000 		sts command_state,__zero_reg__
 1530               	.L134:
  74:./tmk_core/common/command.c ****                 return false;
 1531               		.loc 1 74 0
 1532 0298 80E0      		ldi r24,0
 1533 029a 00C0      		rjmp .L163
 1534               	.L117:
  81:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 1535               		.loc 1 81 0
 1536 029c 80E0      		ldi r24,0
 1537 029e 00C0      		rjmp .L110
 1538               	.L163:
 1539               	/* epilogue start */
  93:./tmk_core/common/command.c **** }
 1540               		.loc 1 93 0
 1541 02a0 CF91      		pop r28
 1542 02a2 0895      		ret
 1543               		.cfi_endproc
 1544               	.LFE103:
 1546               		.section	.rodata.CSWTCH.43,"a",@progbits
 1549               	CSWTCH.43:
 1550 0000 01        		.byte	1
 1551 0001 02        		.byte	2
 1552 0002 03        		.byte	3
 1553 0003 04        		.byte	4
 1554 0004 05        		.byte	5
 1555 0005 06        		.byte	6
 1556 0006 07        		.byte	7
 1557 0007 08        		.byte	8
 1558 0008 09        		.byte	9
 1559 0009 00        		.byte	0
 1560               		.section	.progmem.data.__c.5010,"a",@progbits
 1563               	__c.5010:
 1564 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1564      6865 656C 
 1564      5F74 696D 
 1564      655F 746F 
 1564      5F6D 6178 
 1565               		.section	.progmem.data.__c.5007,"a",@progbits
 1568               	__c.5007:
 1569 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1569      6865 656C 
 1569      5F6D 6178 
 1569      5F73 7065 
 1569      6564 203D 
 1570               		.section	.progmem.data.__c.5004,"a",@progbits
 1573               	__c.5004:
 1574 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 1574      696D 655F 
 1574      746F 5F6D 
 1574      6178 203D 
 1574      2025 640A 
 1575               		.section	.progmem.data.__c.5001,"a",@progbits
 1578               	__c.5001:
 1579 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 1579      6178 5F73 
 1579      7065 6564 
 1579      203D 2025 
 1579      640A 00
 1580               		.section	.progmem.data.__c.4998,"a",@progbits
 1583               	__c.4998:
 1584 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 1584      6E74 6572 
 1584      7661 6C20 
 1584      3D20 2564 
 1584      0A00 
 1585               		.section	.progmem.data.__c.4994,"a",@progbits
 1588               	__c.4994:
 1589 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 1589      656C 6179 
 1589      203D 2025 
 1589      640A 00
 1590               		.section	.progmem.data.__c.4987,"a",@progbits
 1593               	__c.4987:
 1594 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1594      6865 656C 
 1594      5F74 696D 
 1594      655F 746F 
 1594      5F6D 6178 
 1595               		.section	.progmem.data.__c.4984,"a",@progbits
 1598               	__c.4984:
 1599 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1599      6865 656C 
 1599      5F6D 6178 
 1599      5F73 7065 
 1599      6564 203D 
 1600               		.section	.progmem.data.__c.4981,"a",@progbits
 1603               	__c.4981:
 1604 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 1604      696D 655F 
 1604      746F 5F6D 
 1604      6178 203D 
 1604      2025 640A 
 1605               		.section	.progmem.data.__c.4978,"a",@progbits
 1608               	__c.4978:
 1609 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 1609      6178 5F73 
 1609      7065 6564 
 1609      203D 2025 
 1609      640A 00
 1610               		.section	.progmem.data.__c.4975,"a",@progbits
 1613               	__c.4975:
 1614 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 1614      6E74 6572 
 1614      7661 6C20 
 1614      3D20 2564 
 1614      0A00 
 1615               		.section	.progmem.data.__c.4971,"a",@progbits
 1618               	__c.4971:
 1619 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 1619      656C 6179 
 1619      203D 2025 
 1619      640A 00
 1620               		.section	.progmem.data.__c.4964,"a",@progbits
 1623               	__c.4964:
 1624 0000 0A00      		.string	"\n"
 1625               		.section	.progmem.data.__c.4962,"a",@progbits
 1628               	__c.4962:
 1629 0000 2575 00   		.string	"%u"
 1630               		.section	.progmem.data.__c.4960,"a",@progbits
 1633               	__c.4960:
 1634 0000 363A 2077 		.string	"6: wheel_time_to_max: "
 1634      6865 656C 
 1634      5F74 696D 
 1634      655F 746F 
 1634      5F6D 6178 
 1635               		.section	.progmem.data.__c.4958,"a",@progbits
 1638               	__c.4958:
 1639 0000 0A00      		.string	"\n"
 1640               		.section	.progmem.data.__c.4956,"a",@progbits
 1643               	__c.4956:
 1644 0000 2575 00   		.string	"%u"
 1645               		.section	.progmem.data.__c.4954,"a",@progbits
 1648               	__c.4954:
 1649 0000 353A 2077 		.string	"5: wheel_max_speed: "
 1649      6865 656C 
 1649      5F6D 6178 
 1649      5F73 7065 
 1649      6564 3A20 
 1650               		.section	.progmem.data.__c.4952,"a",@progbits
 1653               	__c.4952:
 1654 0000 0A00      		.string	"\n"
 1655               		.section	.progmem.data.__c.4950,"a",@progbits
 1658               	__c.4950:
 1659 0000 2575 00   		.string	"%u"
 1660               		.section	.progmem.data.__c.4948,"a",@progbits
 1663               	__c.4948:
 1664 0000 343A 2074 		.string	"4: time_to_max: "
 1664      696D 655F 
 1664      746F 5F6D 
 1664      6178 3A20 
 1664      00
 1665               		.section	.progmem.data.__c.4946,"a",@progbits
 1668               	__c.4946:
 1669 0000 0A00      		.string	"\n"
 1670               		.section	.progmem.data.__c.4944,"a",@progbits
 1673               	__c.4944:
 1674 0000 2575 00   		.string	"%u"
 1675               		.section	.progmem.data.__c.4942,"a",@progbits
 1678               	__c.4942:
 1679 0000 333A 206D 		.string	"3: max_speed: "
 1679      6178 5F73 
 1679      7065 6564 
 1679      3A20 00
 1680               		.section	.progmem.data.__c.4940,"a",@progbits
 1683               	__c.4940:
 1684 0000 0A00      		.string	"\n"
 1685               		.section	.progmem.data.__c.4938,"a",@progbits
 1688               	__c.4938:
 1689 0000 2575 00   		.string	"%u"
 1690               		.section	.progmem.data.__c.4936,"a",@progbits
 1693               	__c.4936:
 1694 0000 323A 2069 		.string	"2: interval(ms): "
 1694      6E74 6572 
 1694      7661 6C28 
 1694      6D73 293A 
 1694      2000 
 1695               		.section	.progmem.data.__c.4934,"a",@progbits
 1698               	__c.4934:
 1699 0000 0A00      		.string	"\n"
 1700               		.section	.progmem.data.__c.4932,"a",@progbits
 1703               	__c.4932:
 1704 0000 2575 00   		.string	"%u"
 1705               		.section	.progmem.data.__c.4930,"a",@progbits
 1708               	__c.4930:
 1709 0000 313A 2064 		.string	"1: delay(*10ms): "
 1709      656C 6179 
 1709      282A 3130 
 1709      6D73 293A 
 1709      2000 
 1710               		.section	.progmem.data.__c.4928,"a",@progbits
 1713               	__c.4928:
 1714 0000 0A09 2D20 		.string	"\n\t- Values -\n"
 1714      5661 6C75 
 1714      6573 202D 
 1714      0A00 
 1715               		.section	.progmem.data.__c.5048,"a",@progbits
 1718               	__c.5048:
 1719 0000 4D3E 00   		.string	"M>"
 1720               		.section	.progmem.data.__c.5046,"a",@progbits
 1723               	__c.5046:
 1724 0000 4D25 643E 		.string	"M%d> "
 1724      2000 
 1725               		.section	.progmem.data.__c.5044,"a",@progbits
 1728               	__c.5044:
 1729 0000 3F00      		.string	"?"
 1730               		.section	.progmem.data.__c.5041,"a",@progbits
 1733               	__c.5041:
 1734 0000 7365 7420 		.string	"set default\n"
 1734      6465 6661 
 1734      756C 740A 
 1734      00
 1735               		.section	.progmem.data.__c.5027,"a",@progbits
 1738               	__c.5027:
 1739 0000 433E 2000 		.string	"C> "
 1740               		.section	.progmem.data.__c.5017,"a",@progbits
 1743               	__c.5017:
 1744 0000 7768 6572 		.string	"where delta: cursor=%d, wheel=%d\nSee http://en.wikipedia.org/wiki/Mouse_keys\n"
 1744      6520 6465 
 1744      6C74 613A 
 1744      2063 7572 
 1744      736F 723D 
 1745               		.section	.progmem.data.__c.5015,"a",@progbits
 1748               	__c.5015:
 1749 0000 0A09 2D20 		.string	"\n\t- Mousekey -\nESC/q:\tquit\n1:\tdelay(*10ms)\n2:\tinterval(ms)\n3:\tmax_speed\n4:\tti
 1749      4D6F 7573 
 1749      656B 6579 
 1749      202D 0A45 
 1749      5343 2F71 
 1750               		.section	.progmem.data.__c.4920,"a",@progbits
 1753               	__c.4920:
 1754 0000 3F00      		.string	"?"
 1755               		.section	.progmem.data.__c.4917,"a",@progbits
 1758               	__c.4917:
 1759 0000 4D3E 2000 		.string	"M> "
 1760               		.section	.progmem.data.__c.4922,"a",@progbits
 1763               	__c.4922:
 1764 0000 433E 2000 		.string	"C> "
 1765               		.section	.progmem.data.__c.5066,"a",@progbits
 1768               	__c.5066:
 1769 0000 4C25 640A 		.string	"L%d\n"
 1769      00
 1770               		.section	.progmem.data.__c.4906,"a",@progbits
 1773               	__c.4906:
 1774 0000 0A09 2D20 		.string	"\n\t- Console -\nESC/q:\tquit\nm:\tmousekey\n"
 1774      436F 6E73 
 1774      6F6C 6520 
 1774      2D0A 4553 
 1774      432F 713A 
 1775               		.section	.progmem.data.__c.4829,"a",@progbits
 1778               	__c.4829:
 1779 0000 0A09 2D20 		.string	"\n\t- Magic -\nd:\tdebug\nx:\tdebug matrix\nk:\tdebug keyboard\nm:\tdebug mouse\nv:\tvers
 1779      4D61 6769 
 1779      6320 2D0A 
 1779      643A 0964 
 1779      6562 7567 
 1780               		.section	.progmem.data.__c.4901,"a",@progbits
 1783               	__c.4901:
 1784 0000 3F00      		.string	"?"
 1785               		.section	.progmem.data.__c.4892,"a",@progbits
 1788               	__c.4892:
 1789 0000 4E4B 524F 		.string	"NKRO: off\n"
 1789      3A20 6F66 
 1789      660A 00
 1790               		.section	.progmem.data.__c.4890,"a",@progbits
 1793               	__c.4890:
 1794 0000 4E4B 524F 		.string	"NKRO: on\n"
 1794      3A20 6F6E 
 1794      0A00 
 1795               		.section	.progmem.data.__c.4887,"a",@progbits
 1798               	__c.4887:
 1799 0000 7469 6D65 		.string	"timer_read32(): %04lX\n"
 1799      725F 7265 
 1799      6164 3332 
 1799      2829 3A20 
 1799      2530 346C 
 1800               		.section	.progmem.data.__c.4885,"a",@progbits
 1803               	__c.4885:
 1804 0000 6B65 7962 		.string	"keyboard_nkro: %X\n"
 1804      6F61 7264 
 1804      5F6E 6B72 
 1804      6F3A 2025 
 1804      580A 00
 1805               		.section	.progmem.data.__c.4883,"a",@progbits
 1808               	__c.4883:
 1809 0000 6B65 7962 		.string	"keyboard_idle: %X\n"
 1809      6F61 7264 
 1809      5F69 646C 
 1809      653A 2025 
 1809      580A 00
 1810               		.section	.progmem.data.__c.4881,"a",@progbits
 1813               	__c.4881:
 1814 0000 6B65 7962 		.string	"keyboard_protocol: %X\n"
 1814      6F61 7264 
 1814      5F70 726F 
 1814      746F 636F 
 1814      6C3A 2025 
 1815               		.section	.progmem.data.__c.4879,"a",@progbits
 1818               	__c.4879:
 1819 0000 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 1819      5F6B 6579 
 1819      626F 6172 
 1819      645F 6C65 
 1819      6473 2829 
 1820               		.section	.progmem.data.__c.4877,"a",@progbits
 1823               	__c.4877:
 1824 0000 0A09 2D20 		.string	"\n\t- Status -\n"
 1824      5374 6174 
 1824      7573 202D 
 1824      0A00 
 1825               		.section	.progmem.data.__c.4874,"a",@progbits
 1828               	__c.4874:
 1829 0000 4743 433A 		.string	"GCC: 4.8.1 AVR-LIBC: 1.8.0svn AVR_ARCH: avr5\n"
 1829      2034 2E38 
 1829      2E31 2041 
 1829      5652 2D4C 
 1829      4942 433A 
 1830               		.section	.progmem.data.__c.4872,"a",@progbits
 1833               	__c.4872:
 1834 0000 4F50 5449 		.string	"OPTIONS: LUFA MOUSEKEY EXTRAKEY CONSOLE COMMAND NKRO 4096\n"
 1834      4F4E 533A 
 1834      204C 5546 
 1834      4120 4D4F 
 1834      5553 454B 
 1835               		.section	.progmem.data.__c.4870,"a",@progbits
 1838               	__c.4870:
 1839 0000 4255 494C 		.string	"BUILD: unknown (18:44:35 Feb 20 2017)\n"
 1839      443A 2075 
 1839      6E6B 6E6F 
 1839      776E 2028 
 1839      3138 3A34 
 1840               		.section	.progmem.data.__c.4868,"a",@progbits
 1843               	__c.4868:
 1844 0000 5649 443A 		.string	"VID: 0xFEED(t.m.k.) PID: 0xCAFE(HHKB mod) VER: 0x0104\n"
 1844      2030 7846 
 1844      4545 4428 
 1844      742E 6D2E 
 1844      6B2E 2920 
 1845               		.section	.progmem.data.__c.4866,"a",@progbits
 1848               	__c.4866:
 1849 0000 4445 5343 		.string	"DESC: t.m.k. keyboard firmware for HHKB mod\n"
 1849      3A20 742E 
 1849      6D2E 6B2E 
 1849      206B 6579 
 1849      626F 6172 
 1850               		.section	.progmem.data.__c.4864,"a",@progbits
 1853               	__c.4864:
 1854 0000 0A09 2D20 		.string	"\n\t- Version -\n"
 1854      5665 7273 
 1854      696F 6E20 
 1854      2D0A 00
 1855               		.section	.progmem.data.__c.4861,"a",@progbits
 1858               	__c.4861:
 1859 0000 0A6D 6F75 		.string	"\nmouse: off\n"
 1859      7365 3A20 
 1859      6F66 660A 
 1859      00
 1860               		.section	.progmem.data.__c.4859,"a",@progbits
 1863               	__c.4859:
 1864 0000 0A6D 6F75 		.string	"\nmouse: on\n"
 1864      7365 3A20 
 1864      6F6E 0A00 
 1865               		.section	.progmem.data.__c.4856,"a",@progbits
 1868               	__c.4856:
 1869 0000 0A6B 6579 		.string	"\nkeyboard: off\n"
 1869      626F 6172 
 1869      643A 206F 
 1869      6666 0A00 
 1870               		.section	.progmem.data.__c.4854,"a",@progbits
 1873               	__c.4854:
 1874 0000 0A6B 6579 		.string	"\nkeyboard: on\n"
 1874      626F 6172 
 1874      643A 206F 
 1874      6E0A 00
 1875               		.section	.progmem.data.__c.4851,"a",@progbits
 1878               	__c.4851:
 1879 0000 0A6D 6174 		.string	"\nmatrix: off\n"
 1879      7269 783A 
 1879      206F 6666 
 1879      0A00 
 1880               		.section	.progmem.data.__c.4849,"a",@progbits
 1883               	__c.4849:
 1884 0000 0A6D 6174 		.string	"\nmatrix: on\n"
 1884      7269 783A 
 1884      206F 6E0A 
 1884      00
 1885               		.section	.progmem.data.__c.4846,"a",@progbits
 1888               	__c.4846:
 1889 0000 0A64 6562 		.string	"\ndebug: on\n"
 1889      7567 3A20 
 1889      6F6E 0A00 
 1890               		.section	.progmem.data.__c.4844,"a",@progbits
 1893               	__c.4844:
 1894 0000 0A64 6562 		.string	"\ndebug: off\n"
 1894      7567 3A20 
 1894      6F66 660A 
 1894      00
 1895               		.section	.progmem.data.__c.4841,"a",@progbits
 1898               	__c.4841:
 1899 0000 0A0A 626F 		.string	"\n\nbootloader... "
 1899      6F74 6C6F 
 1899      6164 6572 
 1899      2E2E 2E20 
 1899      00
 1900               		.section	.progmem.data.__c.4838,"a",@progbits
 1903               	__c.4838:
 1904 0000 433E 2000 		.string	"C> "
 1905               		.section	.bss.mousekey_param,"aw",@nobits
 1908               	mousekey_param:
 1909 0000 00        		.zero	1
 1910               	.global	command_state
 1911               		.section	.bss.command_state,"aw",@nobits
 1914               	command_state:
 1915 0000 00        		.zero	1
 1916               		.text
 1917               	.Letext0:
 1918               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 1919               		.file 4 "./tmk_core/common/report.h"
 1920               		.file 5 "./tmk_core/common/debug.h"
 1921               		.file 6 "./tmk_core/common/command.h"
 1922               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1923               		.file 8 "./tmk_core/common/host.h"
 1924               		.file 9 "./tmk_core/common/action_util.h"
 1925               		.file 10 "./tmk_core/common/mousekey.h"
 1926               		.file 11 "./tmk_core/common/avr/xprintf.h"
 1927               		.file 12 "./tmk_core/common/action_layer.h"
 1928               		.file 13 "./tmk_core/common/action.h"
 1929               		.file 14 "./tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:00000000 command.c
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:2      *ABS*:0000003e __SP_H__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:3      *ABS*:0000003d __SP_L__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:4      *ABS*:0000003f __SREG__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:6      *ABS*:00000001 __zero_reg__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:12     .text.mousekey_console_help:00000000 mousekey_console_help
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1748   .progmem.data.__c.5015:00000000 __c.5015
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1743   .progmem.data.__c.5017:00000000 __c.5017
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:65     .text.mousekey_param_inc:00000000 mousekey_param_inc
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1618   .progmem.data.__c.4971:00000000 __c.4971
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1613   .progmem.data.__c.4975:00000000 __c.4975
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1608   .progmem.data.__c.4978:00000000 __c.4978
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1603   .progmem.data.__c.4981:00000000 __c.4981
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1598   .progmem.data.__c.4984:00000000 __c.4984
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1593   .progmem.data.__c.4987:00000000 __c.4987
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:338    .text.mousekey_param_dec:00000000 mousekey_param_dec
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1588   .progmem.data.__c.4994:00000000 __c.4994
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1583   .progmem.data.__c.4998:00000000 __c.4998
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1578   .progmem.data.__c.5001:00000000 __c.5001
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1573   .progmem.data.__c.5004:00000000 __c.5004
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1568   .progmem.data.__c.5007:00000000 __c.5007
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1563   .progmem.data.__c.5010:00000000 __c.5010
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:556    .text.switch_default_layer:00000000 switch_default_layer
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1768   .progmem.data.__c.5066:00000000 __c.5066
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:622    .text.command_common:00000000 command_common
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1773   .progmem.data.__c.4906:00000000 __c.4906
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1903   .progmem.data.__c.4838:00000000 __c.4838
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1914   .bss.command_state:00000000 command_state
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1898   .progmem.data.__c.4841:00000000 __c.4841
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1778   .progmem.data.__c.4829:00000000 __c.4829
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1888   .progmem.data.__c.4846:00000000 __c.4846
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1893   .progmem.data.__c.4844:00000000 __c.4844
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1883   .progmem.data.__c.4849:00000000 __c.4849
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1878   .progmem.data.__c.4851:00000000 __c.4851
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1873   .progmem.data.__c.4854:00000000 __c.4854
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1868   .progmem.data.__c.4856:00000000 __c.4856
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1863   .progmem.data.__c.4859:00000000 __c.4859
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1858   .progmem.data.__c.4861:00000000 __c.4861
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1853   .progmem.data.__c.4864:00000000 __c.4864
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1848   .progmem.data.__c.4866:00000000 __c.4866
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1843   .progmem.data.__c.4868:00000000 __c.4868
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1838   .progmem.data.__c.4870:00000000 __c.4870
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1833   .progmem.data.__c.4872:00000000 __c.4872
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1828   .progmem.data.__c.4874:00000000 __c.4874
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1823   .progmem.data.__c.4877:00000000 __c.4877
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1818   .progmem.data.__c.4879:00000000 __c.4879
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1813   .progmem.data.__c.4881:00000000 __c.4881
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1808   .progmem.data.__c.4883:00000000 __c.4883
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1803   .progmem.data.__c.4885:00000000 __c.4885
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1798   .progmem.data.__c.4887:00000000 __c.4887
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1793   .progmem.data.__c.4890:00000000 __c.4890
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1788   .progmem.data.__c.4892:00000000 __c.4892
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1783   .progmem.data.__c.4901:00000000 __c.4901
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1054   .text.command_extra:00000000 command_extra
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1073   .text.command_console_extra:00000000 command_console_extra
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1092   .text.command_proc:00000000 command_proc
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1758   .progmem.data.__c.4917:00000000 __c.4917
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1763   .progmem.data.__c.4922:00000000 __c.4922
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1753   .progmem.data.__c.4920:00000000 __c.4920
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1733   .progmem.data.__c.5041:00000000 __c.5041
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1908   .bss.mousekey_param:00000000 mousekey_param
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1738   .progmem.data.__c.5027:00000000 __c.5027
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1713   .progmem.data.__c.4928:00000000 __c.4928
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1708   .progmem.data.__c.4930:00000000 __c.4930
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1703   .progmem.data.__c.4932:00000000 __c.4932
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1698   .progmem.data.__c.4934:00000000 __c.4934
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1693   .progmem.data.__c.4936:00000000 __c.4936
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1688   .progmem.data.__c.4938:00000000 __c.4938
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1683   .progmem.data.__c.4940:00000000 __c.4940
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1678   .progmem.data.__c.4942:00000000 __c.4942
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1673   .progmem.data.__c.4944:00000000 __c.4944
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1668   .progmem.data.__c.4946:00000000 __c.4946
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1663   .progmem.data.__c.4948:00000000 __c.4948
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1658   .progmem.data.__c.4950:00000000 __c.4950
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1653   .progmem.data.__c.4952:00000000 __c.4952
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1648   .progmem.data.__c.4954:00000000 __c.4954
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1643   .progmem.data.__c.4956:00000000 __c.4956
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1638   .progmem.data.__c.4958:00000000 __c.4958
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1633   .progmem.data.__c.4960:00000000 __c.4960
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1628   .progmem.data.__c.4962:00000000 __c.4962
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1623   .progmem.data.__c.4964:00000000 __c.4964
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1549   .rodata.CSWTCH.43:00000000 CSWTCH.43
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1728   .progmem.data.__c.5044:00000000 __c.5044
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1723   .progmem.data.__c.5046:00000000 __c.5046
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccxz8MNa.s:1718   .progmem.data.__c.5048:00000000 __c.5048

UNDEFINED SYMBOLS
xputs
__xprintf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
debug_config
bootloader_jump
host_keyboard_leds
keyboard_protocol
keyboard_idle
keyboard_nkro
timer_read32
keyboard_report
__do_copy_data
__do_clear_bss
