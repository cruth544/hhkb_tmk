   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_setup,"ax",@progbits
  11               	.global	keyboard_setup
  13               	keyboard_setup:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/keyboard.c"
   1:./tmk_core/common/keyboard.c **** /*
   2:./tmk_core/common/keyboard.c **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.c **** 
   4:./tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.c **** (at your option) any later version.
   8:./tmk_core/common/keyboard.c **** 
   9:./tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.c **** 
  14:./tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.c **** */
  17:./tmk_core/common/keyboard.c **** #include <stdint.h>
  18:./tmk_core/common/keyboard.c **** #include "keyboard.h"
  19:./tmk_core/common/keyboard.c **** #include "matrix.h"
  20:./tmk_core/common/keyboard.c **** #include "keymap.h"
  21:./tmk_core/common/keyboard.c **** #include "host.h"
  22:./tmk_core/common/keyboard.c **** #include "led.h"
  23:./tmk_core/common/keyboard.c **** #include "keycode.h"
  24:./tmk_core/common/keyboard.c **** #include "timer.h"
  25:./tmk_core/common/keyboard.c **** #include "print.h"
  26:./tmk_core/common/keyboard.c **** #include "debug.h"
  27:./tmk_core/common/keyboard.c **** #include "command.h"
  28:./tmk_core/common/keyboard.c **** #include "util.h"
  29:./tmk_core/common/keyboard.c **** #include "sendchar.h"
  30:./tmk_core/common/keyboard.c **** #include "bootmagic.h"
  31:./tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:./tmk_core/common/keyboard.c **** #include "backlight.h"
  33:./tmk_core/common/keyboard.c **** #include "hook.h"
  34:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  35:./tmk_core/common/keyboard.c **** #   include "mousekey.h"
  36:./tmk_core/common/keyboard.c **** #endif
  37:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  38:./tmk_core/common/keyboard.c **** #   include "ps2_mouse.h"
  39:./tmk_core/common/keyboard.c **** #endif
  40:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  41:./tmk_core/common/keyboard.c **** #include "serial_mouse.h"
  42:./tmk_core/common/keyboard.c **** #endif
  43:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  44:./tmk_core/common/keyboard.c **** #include "adb.h"
  45:./tmk_core/common/keyboard.c **** #endif
  46:./tmk_core/common/keyboard.c **** 
  47:./tmk_core/common/keyboard.c **** 
  48:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  49:./tmk_core/common/keyboard.c **** static bool has_ghost_in_row(uint8_t row)
  50:./tmk_core/common/keyboard.c **** {
  51:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = matrix_get_row(row);
  52:./tmk_core/common/keyboard.c ****     // No ghost exists when less than 2 keys are down on the row
  53:./tmk_core/common/keyboard.c ****     if (((matrix_row - 1) & matrix_row) == 0)
  54:./tmk_core/common/keyboard.c ****         return false;
  55:./tmk_core/common/keyboard.c **** 
  56:./tmk_core/common/keyboard.c ****     // Ghost occurs when the row shares column line with other row
  57:./tmk_core/common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
  58:./tmk_core/common/keyboard.c ****         if (i != row && (matrix_get_row(i) & matrix_row))
  59:./tmk_core/common/keyboard.c ****             return true;
  60:./tmk_core/common/keyboard.c ****     }
  61:./tmk_core/common/keyboard.c ****     return false;
  62:./tmk_core/common/keyboard.c **** }
  63:./tmk_core/common/keyboard.c **** #endif
  64:./tmk_core/common/keyboard.c **** 
  65:./tmk_core/common/keyboard.c **** 
  66:./tmk_core/common/keyboard.c **** void keyboard_setup(void)
  67:./tmk_core/common/keyboard.c **** {
  16               		.loc 1 67 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  68:./tmk_core/common/keyboard.c ****     matrix_setup();
  22               		.loc 1 68 0
  23 0000 0C94 0000 		jmp matrix_setup
  24               	.LVL0:
  25               		.cfi_endproc
  26               	.LFE103:
  28               		.section	.text.keyboard_init,"ax",@progbits
  29               	.global	keyboard_init
  31               	keyboard_init:
  32               	.LFB104:
  69:./tmk_core/common/keyboard.c **** }
  70:./tmk_core/common/keyboard.c **** 
  71:./tmk_core/common/keyboard.c **** void keyboard_init(void)
  72:./tmk_core/common/keyboard.c **** {
  33               		.loc 1 72 0
  34               		.cfi_startproc
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  73:./tmk_core/common/keyboard.c ****     timer_init();
  39               		.loc 1 73 0
  40 0000 0E94 0000 		call timer_init
  41               	.LVL1:
  74:./tmk_core/common/keyboard.c ****     matrix_init();
  42               		.loc 1 74 0
  43 0004 0C94 0000 		jmp matrix_init
  44               	.LVL2:
  45               		.cfi_endproc
  46               	.LFE104:
  48               		.section	.text.keyboard_task,"ax",@progbits
  49               	.global	keyboard_task
  51               	keyboard_task:
  52               	.LFB105:
  75:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  76:./tmk_core/common/keyboard.c ****     ps2_mouse_init();
  77:./tmk_core/common/keyboard.c **** #endif
  78:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  79:./tmk_core/common/keyboard.c ****     serial_mouse_init();
  80:./tmk_core/common/keyboard.c **** #endif
  81:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  82:./tmk_core/common/keyboard.c ****     adb_mouse_init();
  83:./tmk_core/common/keyboard.c **** #endif
  84:./tmk_core/common/keyboard.c **** 
  85:./tmk_core/common/keyboard.c **** 
  86:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  87:./tmk_core/common/keyboard.c ****     bootmagic();
  88:./tmk_core/common/keyboard.c **** #endif
  89:./tmk_core/common/keyboard.c **** 
  90:./tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
  91:./tmk_core/common/keyboard.c ****     backlight_init();
  92:./tmk_core/common/keyboard.c **** #endif
  93:./tmk_core/common/keyboard.c **** }
  94:./tmk_core/common/keyboard.c **** 
  95:./tmk_core/common/keyboard.c **** /*
  96:./tmk_core/common/keyboard.c ****  * Do keyboard routine jobs: scan mantrix, light LEDs, ...
  97:./tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
  98:./tmk_core/common/keyboard.c ****  */
  99:./tmk_core/common/keyboard.c **** void keyboard_task(void)
 100:./tmk_core/common/keyboard.c **** {
  53               		.loc 1 100 0
  54               		.cfi_startproc
  55 0000 CF92      		push r12
  56               	.LCFI0:
  57               		.cfi_def_cfa_offset 3
  58               		.cfi_offset 12, -2
  59 0002 DF92      		push r13
  60               	.LCFI1:
  61               		.cfi_def_cfa_offset 4
  62               		.cfi_offset 13, -3
  63 0004 EF92      		push r14
  64               	.LCFI2:
  65               		.cfi_def_cfa_offset 5
  66               		.cfi_offset 14, -4
  67 0006 FF92      		push r15
  68               	.LCFI3:
  69               		.cfi_def_cfa_offset 6
  70               		.cfi_offset 15, -5
  71 0008 0F93      		push r16
  72               	.LCFI4:
  73               		.cfi_def_cfa_offset 7
  74               		.cfi_offset 16, -6
  75 000a 1F93      		push r17
  76               	.LCFI5:
  77               		.cfi_def_cfa_offset 8
  78               		.cfi_offset 17, -7
  79 000c CF93      		push r28
  80               	.LCFI6:
  81               		.cfi_def_cfa_offset 9
  82               		.cfi_offset 28, -8
  83 000e DF93      		push r29
  84               	.LCFI7:
  85               		.cfi_def_cfa_offset 10
  86               		.cfi_offset 29, -9
  87 0010 00D0      		rcall .
  88 0012 00D0      		rcall .
  89 0014 00D0      		rcall .
  90               	.LCFI8:
  91               		.cfi_def_cfa_offset 16
  92 0016 CDB7      		in r28,__SP_L__
  93 0018 DEB7      		in r29,__SP_H__
  94               	.LCFI9:
  95               		.cfi_def_cfa_register 28
  96               	/* prologue: function */
  97               	/* frame size = 6 */
  98               	/* stack size = 14 */
  99               	.L__stack_usage = 14
 100               	.LVL3:
 101:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 102:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 103:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_ghost[MATRIX_ROWS];
 104:./tmk_core/common/keyboard.c **** #endif
 105:./tmk_core/common/keyboard.c ****     static uint8_t led_status = 0;
 106:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = 0;
 107:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_change = 0;
 108:./tmk_core/common/keyboard.c **** 
 109:./tmk_core/common/keyboard.c ****     matrix_scan();
 101               		.loc 1 109 0
 102 001a 0E94 0000 		call matrix_scan
 103               	.LVL4:
 104 001e 30E0      		ldi r19,lo8(matrix_prev.4765)
 105 0020 E32E      		mov r14,r19
 106 0022 30E0      		ldi r19,hi8(matrix_prev.4765)
 107 0024 F32E      		mov r15,r19
 108 0026 00E0      		ldi r16,0
 109 0028 10E0      		ldi r17,0
 110               	.LVL5:
 111               	.L13:
 112 002a C02E      		mov r12,r16
 113               	.LVL6:
 114               	.LBB2:
 110:./tmk_core/common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 111:./tmk_core/common/keyboard.c ****         matrix_row = matrix_get_row(r);
 115               		.loc 1 111 0
 116 002c 802F      		mov r24,r16
 117 002e 0E94 0000 		call matrix_get_row
 118               	.LVL7:
 112:./tmk_core/common/keyboard.c ****         matrix_change = matrix_row ^ matrix_prev[r];
 119               		.loc 1 112 0
 120 0032 F701      		movw r30,r14
 121 0034 D190      		ld r13,Z+
 122 0036 7F01      		movw r14,r30
 123 0038 D826      		eor r13,r24
 124               	.LVL8:
 113:./tmk_core/common/keyboard.c ****         if (matrix_change) {
 125               		.loc 1 113 0
 126 003a 01F4      		brne .L4
 127               	.LVL9:
 128               	.L11:
 129 003c 0F5F      		subi r16,-1
 130 003e 1F4F      		sbci r17,-1
 131               	.LVL10:
 110:./tmk_core/common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 132               		.loc 1 110 0
 133 0040 0830      		cpi r16,8
 134 0042 1105      		cpc r17,__zero_reg__
 135 0044 01F4      		brne .L13
 136               	.LBE2:
 114:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 115:./tmk_core/common/keyboard.c ****             if (has_ghost_in_row(r)) {
 116:./tmk_core/common/keyboard.c ****                 /* Keep track of whether ghosted status has changed for
 117:./tmk_core/common/keyboard.c ****                  * debugging. But don't update matrix_prev until un-ghosted, or
 118:./tmk_core/common/keyboard.c ****                  * the last key would be lost.
 119:./tmk_core/common/keyboard.c ****                  */
 120:./tmk_core/common/keyboard.c ****                 if (debug_matrix && matrix_ghost[r] != matrix_row) {
 121:./tmk_core/common/keyboard.c ****                     matrix_print();
 122:./tmk_core/common/keyboard.c ****                 }
 123:./tmk_core/common/keyboard.c ****                 matrix_ghost[r] = matrix_row;
 124:./tmk_core/common/keyboard.c ****                 continue;
 125:./tmk_core/common/keyboard.c ****             }
 126:./tmk_core/common/keyboard.c ****             matrix_ghost[r] = matrix_row;
 127:./tmk_core/common/keyboard.c **** #endif
 128:./tmk_core/common/keyboard.c ****             if (debug_matrix) matrix_print();
 129:./tmk_core/common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 130:./tmk_core/common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 131:./tmk_core/common/keyboard.c ****                     keyevent_t e = (keyevent_t){
 132:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 133:./tmk_core/common/keyboard.c ****                         .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 134:./tmk_core/common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 135:./tmk_core/common/keyboard.c ****                     };
 136:./tmk_core/common/keyboard.c ****                     action_exec(e);
 137:./tmk_core/common/keyboard.c ****                     hook_matrix_change(e);
 138:./tmk_core/common/keyboard.c ****                     // record a processed key
 139:./tmk_core/common/keyboard.c ****                     matrix_prev[r] ^= ((matrix_row_t)1<<c);
 140:./tmk_core/common/keyboard.c ****                     // process a key per task call
 141:./tmk_core/common/keyboard.c ****                     goto MATRIX_LOOP_END;
 142:./tmk_core/common/keyboard.c ****                 }
 143:./tmk_core/common/keyboard.c ****             }
 144:./tmk_core/common/keyboard.c ****         }
 145:./tmk_core/common/keyboard.c ****     }
 146:./tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 147:./tmk_core/common/keyboard.c ****     action_exec(TICK);
 137               		.loc 1 147 0
 138 0046 8FEF      		ldi r24,lo8(-1)
 139 0048 8983      		std Y+1,r24
 140 004a 8A83      		std Y+2,r24
 141 004c 1B82      		std Y+3,__zero_reg__
 142 004e 0E94 0000 		call timer_read
 143               	.LVL11:
 144 0052 8160      		ori r24,1
 145 0054 782F      		mov r23,r24
 146 0056 9D83      		std Y+5,r25
 147 0058 8C83      		std Y+4,r24
 148 005a 4981      		ldd r20,Y+1
 149 005c 5A81      		ldd r21,Y+2
 150 005e 6B81      		ldd r22,Y+3
 151 0060 8D81      		ldd r24,Y+5
 152 0062 0E94 0000 		call action_exec
 153               	.LVL12:
 154 0066 00C0      		rjmp .L10
 155               	.LVL13:
 156               	.L4:
 157               	.LBB5:
 128:./tmk_core/common/keyboard.c ****             if (debug_matrix) matrix_print();
 158               		.loc 1 128 0
 159 0068 9091 0000 		lds r25,debug_config
 160 006c 91FF      		sbrs r25,1
 161 006e 00C0      		rjmp .L7
 128:./tmk_core/common/keyboard.c ****             if (debug_matrix) matrix_print();
 162               		.loc 1 128 0 is_stmt 0 discriminator 1
 163 0070 8E83      		std Y+6,r24
 164 0072 0E94 0000 		call matrix_print
 165               	.LVL14:
 166 0076 8E81      		ldd r24,Y+6
 167               	.L7:
 168               	.LVL15:
 169               	.LBE5:
 109:./tmk_core/common/keyboard.c ****     matrix_scan();
 170               		.loc 1 109 0 is_stmt 1
 171 0078 20E0      		ldi r18,0
 172 007a 30E0      		ldi r19,0
 173               	.LBB6:
 174               	.LBB3:
 130:./tmk_core/common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 175               		.loc 1 130 0
 176 007c 4D2D      		mov r20,r13
 177 007e 50E0      		ldi r21,0
 178               	.LVL16:
 179               	.L12:
 180 0080 922F      		mov r25,r18
 181               	.LVL17:
 182 0082 BA01      		movw r22,r20
 183 0084 022E      		mov r0,r18
 184 0086 00C0      		rjmp 2f
 185               		1:
 186 0088 7595      		asr r23
 187 008a 6795      		ror r22
 188               		2:
 189 008c 0A94      		dec r0
 190 008e 02F4      		brpl 1b
 191 0090 60FF      		sbrs r22,0
 192 0092 00C0      		rjmp .L8
 193               	.LBB4:
 131:./tmk_core/common/keyboard.c ****                     keyevent_t e = (keyevent_t){
 194               		.loc 1 131 0
 195 0094 2983      		std Y+1,r18
 196 0096 CA82      		std Y+2,r12
 133:./tmk_core/common/keyboard.c ****                         .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 197               		.loc 1 133 0
 198 0098 EE24      		clr r14
 199 009a E394      		inc r14
 200 009c F12C      		mov r15,__zero_reg__
 201               	.LVL18:
 202 009e 00C0      		rjmp 2f
 203               		1:
 204 00a0 EE0C      		lsl r14
 205 00a2 FF1C      		rol r15
 206               		2:
 207 00a4 9A95      		dec r25
 208 00a6 02F4      		brpl 1b
 209 00a8 90E0      		ldi r25,0
 210 00aa 8E21      		and r24,r14
 211 00ac 9F21      		and r25,r15
 212 00ae 21E0      		ldi r18,lo8(1)
 213 00b0 892B      		or r24,r25
 214 00b2 01F4      		brne .L9
 215 00b4 20E0      		ldi r18,0
 216               	.L9:
 131:./tmk_core/common/keyboard.c ****                     keyevent_t e = (keyevent_t){
 217               		.loc 1 131 0
 218 00b6 2B83      		std Y+3,r18
 134:./tmk_core/common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 219               		.loc 1 134 0
 220 00b8 0E94 0000 		call timer_read
 221               	.LVL19:
 222 00bc 8160      		ori r24,1
 131:./tmk_core/common/keyboard.c ****                     keyevent_t e = (keyevent_t){
 223               		.loc 1 131 0
 224 00be 782F      		mov r23,r24
 225 00c0 9D83      		std Y+5,r25
 226 00c2 8C83      		std Y+4,r24
 136:./tmk_core/common/keyboard.c ****                     action_exec(e);
 227               		.loc 1 136 0
 228 00c4 4981      		ldd r20,Y+1
 229 00c6 5A81      		ldd r21,Y+2
 230 00c8 6B81      		ldd r22,Y+3
 231 00ca 8D81      		ldd r24,Y+5
 232 00cc 0E94 0000 		call action_exec
 233               	.LVL20:
 137:./tmk_core/common/keyboard.c ****                     hook_matrix_change(e);
 234               		.loc 1 137 0
 235 00d0 4981      		ldd r20,Y+1
 236 00d2 5A81      		ldd r21,Y+2
 237 00d4 6B81      		ldd r22,Y+3
 238 00d6 7C81      		ldd r23,Y+4
 239 00d8 8D81      		ldd r24,Y+5
 240 00da 0E94 0000 		call hook_matrix_change
 241               	.LVL21:
 139:./tmk_core/common/keyboard.c ****                     matrix_prev[r] ^= ((matrix_row_t)1<<c);
 242               		.loc 1 139 0
 243 00de F801      		movw r30,r16
 244 00e0 E050      		subi r30,lo8(-(matrix_prev.4765))
 245 00e2 F040      		sbci r31,hi8(-(matrix_prev.4765))
 246 00e4 8081      		ld r24,Z
 247 00e6 8E25      		eor r24,r14
 248 00e8 8083      		st Z,r24
 249 00ea 00C0      		rjmp .L10
 250               	.LVL22:
 251               	.L8:
 252 00ec 2F5F      		subi r18,-1
 253 00ee 3F4F      		sbci r19,-1
 254               	.LVL23:
 255               	.LBE4:
 129:./tmk_core/common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 256               		.loc 1 129 0
 257 00f0 2830      		cpi r18,8
 258 00f2 3105      		cpc r19,__zero_reg__
 259 00f4 01F4      		brne .L12
 260 00f6 00C0      		rjmp .L11
 261               	.LVL24:
 262               	.L10:
 263               	.LBE3:
 264               	.LBE6:
 148:./tmk_core/common/keyboard.c **** 
 149:./tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 150:./tmk_core/common/keyboard.c **** 
 151:./tmk_core/common/keyboard.c ****     hook_keyboard_loop();
 265               		.loc 1 151 0
 266 00f8 0E94 0000 		call hook_keyboard_loop
 267               	.LVL25:
 152:./tmk_core/common/keyboard.c **** 
 153:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 154:./tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 155:./tmk_core/common/keyboard.c ****     mousekey_task();
 268               		.loc 1 155 0
 269 00fc 0E94 0000 		call mousekey_task
 270               	.LVL26:
 156:./tmk_core/common/keyboard.c **** #endif
 157:./tmk_core/common/keyboard.c **** 
 158:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 159:./tmk_core/common/keyboard.c ****     ps2_mouse_task();
 160:./tmk_core/common/keyboard.c **** #endif
 161:./tmk_core/common/keyboard.c **** 
 162:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 163:./tmk_core/common/keyboard.c ****         serial_mouse_task();
 164:./tmk_core/common/keyboard.c **** #endif
 165:./tmk_core/common/keyboard.c **** 
 166:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 167:./tmk_core/common/keyboard.c ****         adb_mouse_task();
 168:./tmk_core/common/keyboard.c **** #endif
 169:./tmk_core/common/keyboard.c **** 
 170:./tmk_core/common/keyboard.c ****     // update LED
 171:./tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 271               		.loc 1 171 0
 272 0100 1091 0000 		lds r17,led_status.4766
 273 0104 0E94 0000 		call host_keyboard_leds
 274               	.LVL27:
 275 0108 1817      		cp r17,r24
 276 010a 01F0      		breq .L3
 172:./tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 277               		.loc 1 172 0
 278 010c 0E94 0000 		call host_keyboard_leds
 279               	.LVL28:
 280 0110 8093 0000 		sts led_status.4766,r24
 173:./tmk_core/common/keyboard.c ****         if (debug_keyboard) dprintf("LED: %02X\n", led_status);
 281               		.loc 1 173 0
 282 0114 9091 0000 		lds r25,debug_config
 283 0118 92FF      		sbrs r25,2
 284 011a 00C0      		rjmp .L15
 285               		.loc 1 173 0 is_stmt 0 discriminator 1
 286 011c 90FF      		sbrs r25,0
 287 011e 00C0      		rjmp .L15
 288 0120 1F92      		push __zero_reg__
 289 0122 8F93      		push r24
 290 0124 80E0      		ldi r24,lo8(__c.4783)
 291 0126 90E0      		ldi r25,hi8(__c.4783)
 292 0128 9F93      		push r25
 293 012a 8F93      		push r24
 294 012c 0E94 0000 		call __xprintf
 295               	.LVL29:
 296 0130 0F90      		pop __tmp_reg__
 297 0132 0F90      		pop __tmp_reg__
 298 0134 0F90      		pop __tmp_reg__
 299 0136 0F90      		pop __tmp_reg__
 300               	.L15:
 174:./tmk_core/common/keyboard.c ****         hook_keyboard_leds_change(led_status);
 301               		.loc 1 174 0 is_stmt 1
 302 0138 8091 0000 		lds r24,led_status.4766
 303               	/* epilogue start */
 175:./tmk_core/common/keyboard.c ****     }
 176:./tmk_core/common/keyboard.c **** }
 304               		.loc 1 176 0
 305 013c 2696      		adiw r28,6
 306 013e 0FB6      		in __tmp_reg__,__SREG__
 307 0140 F894      		cli
 308 0142 DEBF      		out __SP_H__,r29
 309 0144 0FBE      		out __SREG__,__tmp_reg__
 310 0146 CDBF      		out __SP_L__,r28
 311 0148 DF91      		pop r29
 312 014a CF91      		pop r28
 313 014c 1F91      		pop r17
 314 014e 0F91      		pop r16
 315 0150 FF90      		pop r15
 316 0152 EF90      		pop r14
 317 0154 DF90      		pop r13
 318               	.LVL30:
 319 0156 CF90      		pop r12
 174:./tmk_core/common/keyboard.c ****         hook_keyboard_leds_change(led_status);
 320               		.loc 1 174 0
 321 0158 0C94 0000 		jmp hook_keyboard_leds_change
 322               	.LVL31:
 323               	.L3:
 324               	/* epilogue start */
 325               		.loc 1 176 0
 326 015c 2696      		adiw r28,6
 327 015e 0FB6      		in __tmp_reg__,__SREG__
 328 0160 F894      		cli
 329 0162 DEBF      		out __SP_H__,r29
 330 0164 0FBE      		out __SREG__,__tmp_reg__
 331 0166 CDBF      		out __SP_L__,r28
 332 0168 DF91      		pop r29
 333 016a CF91      		pop r28
 334 016c 1F91      		pop r17
 335 016e 0F91      		pop r16
 336 0170 FF90      		pop r15
 337 0172 EF90      		pop r14
 338 0174 DF90      		pop r13
 339               	.LVL32:
 340 0176 CF90      		pop r12
 341 0178 0895      		ret
 342               		.cfi_endproc
 343               	.LFE105:
 345               		.section	.text.keyboard_set_leds,"ax",@progbits
 346               	.global	keyboard_set_leds
 348               	keyboard_set_leds:
 349               	.LFB106:
 177:./tmk_core/common/keyboard.c **** 
 178:./tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 179:./tmk_core/common/keyboard.c **** {
 350               		.loc 1 179 0
 351               		.cfi_startproc
 352               	.LVL33:
 353               	/* prologue: function */
 354               	/* frame size = 0 */
 355               	/* stack size = 0 */
 356               	.L__stack_usage = 0
 180:./tmk_core/common/keyboard.c ****     led_set(leds);
 357               		.loc 1 180 0
 358 0000 0C94 0000 		jmp led_set
 359               	.LVL34:
 360               		.cfi_endproc
 361               	.LFE106:
 363               		.section	.progmem.data.__c.4783,"a",@progbits
 366               	__c.4783:
 367 0000 4C45 443A 		.string	"LED: %02X\n"
 367      2025 3032 
 367      580A 00
 368               		.section	.bss.led_status.4766,"aw",@nobits
 371               	led_status.4766:
 372 0000 00        		.zero	1
 373               		.section	.bss.matrix_prev.4765,"aw",@nobits
 376               	matrix_prev.4765:
 377 0000 0000 0000 		.zero	8
 377      0000 0000 
 378               		.text
 379               	.Letext0:
 380               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 381               		.file 3 "./tmk_core/common/keyboard.h"
 382               		.file 4 "./tmk_core/common/matrix.h"
 383               		.file 5 "./tmk_core/common/debug.h"
 384               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 385               		.file 7 "./tmk_core/common/timer.h"
 386               		.file 8 "./tmk_core/common/action.h"
 387               		.file 9 "./tmk_core/common/hook.h"
 388               		.file 10 "./tmk_core/common/mousekey.h"
 389               		.file 11 "./tmk_core/common/host.h"
 390               		.file 12 "./tmk_core/common/avr/xprintf.h"
 391               		.file 13 "./tmk_core/common/led.h"
DEFINED SYMBOLS
                            *ABS*:00000000 keyboard.c
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccX8turB.s:2      *ABS*:0000003e __SP_H__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccX8turB.s:3      *ABS*:0000003d __SP_L__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccX8turB.s:4      *ABS*:0000003f __SREG__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccX8turB.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccX8turB.s:6      *ABS*:00000001 __zero_reg__
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccX8turB.s:13     .text.keyboard_setup:00000000 keyboard_setup
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccX8turB.s:31     .text.keyboard_init:00000000 keyboard_init
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccX8turB.s:51     .text.keyboard_task:00000000 keyboard_task
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccX8turB.s:376    .bss.matrix_prev.4765:00000000 matrix_prev.4765
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccX8turB.s:371    .bss.led_status.4766:00000000 led_status.4766
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccX8turB.s:366    .progmem.data.__c.4783:00000000 __c.4783
/var/folders/3y/n8cf8g5x3x555hcmfv9bj9nc0000gn/T//ccX8turB.s:348    .text.keyboard_set_leds:00000000 keyboard_set_leds

UNDEFINED SYMBOLS
matrix_setup
timer_init
matrix_init
matrix_scan
matrix_get_row
timer_read
action_exec
debug_config
matrix_print
hook_matrix_change
hook_keyboard_loop
mousekey_task
host_keyboard_leds
__xprintf
hook_keyboard_leds_change
led_set
__do_clear_bss
