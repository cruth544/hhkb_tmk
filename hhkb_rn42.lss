
hhkb_rn42.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00005cac  00005d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c5  0080019a  0080019a  00005dda  2**0
                  ALLOC
  3 .noinit       00000004  0080035f  0080035f  00005dda  2**0
                  ALLOC
  4 .stab         00000bb8  00000000  00000000  00005ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000fe  00000000  00000000  00006994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00006a92  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c98  00000000  00000000  00006aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00012027  00000000  00000000  00007740  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000487e  00000000  00000000  00019767  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006155  00000000  00000000  0001dfe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001ee0  00000000  00000000  0002413c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004946  00000000  00000000  0002601c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009dfb  00000000  00000000  0002a962  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d30  00000000  00000000  0003475d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__ctors_end>
       4:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
       8:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
       c:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      10:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      14:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      18:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      1c:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      20:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      24:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      28:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__vector_10>
      2c:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__vector_11>
      30:	0c 94 c6 24 	jmp	0x498c	; 0x498c <__vector_12>
      34:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      3c:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      40:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      44:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      48:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      4c:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      50:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	0c 94 65 25 	jmp	0x4aca	; 0x4aca <__vector_21>
      58:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      5c:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      60:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      64:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_25>
      68:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      70:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      74:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      78:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      7c:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      84:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      88:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      90:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      94:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      98:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      a0:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      a4:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__bad_interrupt>
      ac:	32 0e       	add	r3, r18
      ae:	37 0e       	add	r3, r23
      b0:	3c 0e       	add	r3, r28
      b2:	41 0e       	add	r4, r17
      b4:	46 0e       	add	r4, r22
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	4b 0e       	add	r4, r27
      b8:	50 0e       	add	r5, r16
      ba:	55 0e       	add	r5, r21
      bc:	5a 0e       	add	r5, r26
      be:	5f 0e       	add	r5, r31
      c0:	64 0e       	add	r6, r20
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	69 0e       	add	r6, r25
      c4:	6e 0e       	add	r6, r30
      c6:	73 0e       	add	r7, r19
      c8:	78 0e       	add	r7, r24
      ca:	7d 0e       	add	r7, r29
      cc:	82 0e       	add	r8, r18
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	87 0e       	add	r8, r23
      d0:	8c 0e       	add	r8, r28
      d2:	91 0e       	add	r9, r17
      d4:	96 0e       	add	r9, r22
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	9b 0e       	add	r9, r27
      d8:	a0 0e       	add	r10, r16
      da:	a5 0e       	add	r10, r21
      dc:	aa 0e       	add	r10, r26
      de:	af 0e       	add	r10, r31
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	b4 0e       	add	r11, r20
      e2:	b9 0e       	add	r11, r25
      e4:	be 0e       	add	r11, r30
      e6:	c3 0e       	add	r12, r19
      e8:	c8 0e       	add	r12, r24
      ea:	cd 0e       	add	r12, r29
      ec:	d2 0e       	add	r13, r18
      ee:	d7 0e       	add	r13, r23
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      f0:	dc 0e       	add	r13, r28
      f2:	e1 0e       	add	r14, r17
      f4:	30 0e       	add	r3, r16
		ReportSize--;
      f6:	2b 0f       	add	r18, r27
      f8:	e6 0e       	add	r14, r22
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
      fa:	e8 0e       	add	r14, r24
      fc:	ea 0e       	add	r14, r26
      fe:	ec 0e       	add	r14, r28
     100:	f1 0e       	add	r15, r17
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     102:	f6 0e       	add	r15, r22
     104:	fb 0e       	add	r15, r27
     106:	00 0f       	add	r16, r16
     108:	05 0f       	add	r16, r21
     10a:	09 0f       	add	r16, r25
     10c:	0e 0f       	add	r16, r30
     10e:	13 0f       	add	r17, r19
     110:	18 0f       	add	r17, r24
     112:	1d 0f       	add	r17, r29
     114:	22 0f       	add	r18, r18
     116:	29 0f       	add	r18, r25
     118:	29 0f       	add	r18, r25
     11a:	29 0f       	add	r18, r25
     11c:	29 0f       	add	r18, r25
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     11e:	29 0f       	add	r18, r25
     120:	29 0f       	add	r18, r25
     122:	29 0f       	add	r18, r25
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     124:	29 0f       	add	r18, r25
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	29 0f       	add	r18, r25
     128:	29 0f       	add	r18, r25
     12a:	29 0f       	add	r18, r25
     12c:	29 0f       	add	r18, r25
     12e:	29 0f       	add	r18, r25
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     130:	29 0f       	add	r18, r25
     132:	29 0f       	add	r18, r25
     134:	29 0f       	add	r18, r25
     136:	29 0f       	add	r18, r25
     138:	29 0f       	add	r18, r25
     13a:	29 0f       	add	r18, r25
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     13c:	27 0f       	add	r18, r23
     13e:	eb 16       	cp	r14, r27
				ReportData     += 4;
     140:	0d 17       	cp	r16, r29
     142:	f8 17       	cp	r31, r24
     144:	0d 17       	cp	r16, r29
				break;
     146:	f8 17       	cp	r31, r24

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     148:	4f 17       	cp	r20, r31
     14a:	72 17       	cp	r23, r18
     14c:	f8 17       	cp	r31, r24
     14e:	c7 17       	cp	r28, r23
     150:	da 17       	cp	r29, r26
     152:	33 1b       	sub	r19, r19
     154:	33 1b       	sub	r19, r19
     156:	61 1b       	sub	r22, r17
     158:	61 1b       	sub	r22, r17
				ReportSize     -= 2;
     15a:	bd 1b       	sub	r27, r29
     15c:	f9 1b       	sub	r31, r25
				ReportData     += 2;
     15e:	fc 1d       	adc	r31, r12
     160:	fc 1d       	adc	r31, r12
     162:	11 1c       	adc	r1, r1
				break;
     164:	fc 1d       	adc	r31, r12

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     166:	08 1d       	adc	r16, r8
     168:	08 1d       	adc	r16, r8
     16a:	d6 1d       	adc	r29, r6
     16c:	fc 1d       	adc	r31, r12
     16e:	fc 1d       	adc	r31, r12
     170:	ea 1d       	adc	r30, r10

00000172 <__trampolines_end>:
				ReportSize     -= 1;
     172:	f1 a1       	ldd	r31, Z+33	; 0x21

00000174 <keymaps>:
     174:	1f 14 1a 16 04 1d 1b 06 20 21 15 08 07 09 19 05     ........ !......
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	22 23 1c 17 0a 0b 11 00 1e 29 2b e0 e1 e2 e3 2c     "#.......)+....,
     194:	24 25 18 0c 0e 0d 10 00 31 35 2a 28 c0 e5 e6 e7     $%......15*(....

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a4:	26 27 12 13 33 0f 36 00 2d 2e 30 2f 34 38 37 00     &'..3.6.-.0/487.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b4:	3b 01 01 a9 aa 01 01 01 3c 3d 01 01 a8 01 01 01     ;.......<=......
     1c4:	3e 3f 01 01 01 55 57 00 3a a5 39 01 01 01 01 01     >?...UW.:.9.....
     1d4:	40 41 01 46 4a 54 56 00 49 4c 2a 58 01 01 01 01     @A.FJTV.IL*X....
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
     1e4:	42 43 47 48 50 4b 4d 00 44 45 01 52 4f 51 4e 00     BCGHPKM.DE.ROQN.

000001f4 <__c.2271>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f4:	25 63 00                                            %c.

000001f7 <__c.2265>:
     1f7:	25 73 0d 0a 00                                      %s...

000001fc <__c.4830>:
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     1fc:	52 2c 31 0d 0a 00                                   R,1...

00000202 <__c.4828>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     202:	53 59 2c 46 46 46 34 0d 0a 00                       SY,FFF4...

0000020c <__c.4826>:
     20c:	53 48 2c 30 30 33 43 0d 0a 00                       SH,003C...

00000216 <__c.4824>:
     216:	53 7e 2c 36 0d 0a 00                                S~,6...

0000021d <__c.4822>:
     21d:	53 57 2c 38 30 30 30 0d 0a 00                       SW,8000...

00000227 <__c.4820>:
     227:	53 4d 2c 34 0d 0a 00                                SM,4...

0000022e <__c.4818>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     22e:	53 53 2c 4b 65 79 62 6f 61 72 64 2f 4d 6f 75 73     SS,Keyboard/Mous
     23e:	65 0d 0a 00                                         e...

00000242 <__c.4816>:
     242:	53 2d 2c 54 6d 6b 42 54 0d 0a 00                    S-,TmkBT...

0000024d <__c.4814>:
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     24d:	53 46 2c 31 0d 0a 00                                SF,1...

00000254 <__c.4809>:
     254:	2d 2d 2d 0d 0a 00                                   ---...

0000025a <__c.4807>:
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25a:	45 78 69 74 69 6e 67 20 63 6f 6e 66 69 67 20 6d     Exiting config m
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
     26a:	6f 64 65 20 2e 2e 2e 0a 00                          ode .....

00000273 <__c.4802>:

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     273:	2b 0d 0a 00                                         +...

00000277 <__c.4800>:
     277:	76 0d 0a 00                                         v...

0000027b <__c.4797>:
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     27b:	24 24 24 00                                         $$$.

0000027f <__c.4795>:

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     27f:	45 6e 74 65 72 69 6e 67 20 63 6f 6e 66 69 67 20     Entering config 
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     28f:	6d 6f 64 65 20 2e 2e 2e 0a 00                       mode .....

00000299 <__c.4837>:
				break;
     299:	52 2c 31 0d 0a 00                                   R,1...

0000029f <__c.4835>:

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     29f:	53 52 2c 5a 0d 0a 00                                SR,Z...

000002a6 <__c.4918>:
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2a6:	55 53 42 20 6d 6f 64 65 0a 00                       USB mode..

000002b0 <__c.4916>:
     2b0:	41 75 74 6f 20 6d 6f 64 65 0a 00                    Auto mode..

000002bb <__c.4913>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2bb:	25 30 32 75 0a 00                                   %02u..

000002c1 <__c.4911>:
     2c1:	25 30 32 75 3a 00                                   %02u:.

000002c7 <__c.4909>:
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2c7:	25 30 32 75 3a 00                                   %02u:.

000002cd <__c.4907>:
				break;
     2cd:	42 41 54 3a 20 25 75 6d 56 09 00                    BAT: %umV..

000002d8 <__c.4904>:

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2d8:	75 70 74 69 6d 65 3a 20 25 30 32 75 20 25 30 32     uptime: %02u %02
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2e8:	75 3a 25 30 32 75 3a 25 30 32 75 0a 00              u:%02u:%02u..

000002f5 <__c.4898>:
     2f5:	56 42 55 53 3a 20 25 58 0a 00                       VBUS: %X..

000002ff <__c.4896>:
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2ff:	52 65 6d 6f 74 65 57 61 6b 65 75 70 45 6e 61 62     RemoteWakeupEnab
     30f:	6c 65 64 3a 20 25 58 0a 00                          led: %X..

00000318 <__c.4894>:
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	0a 00                                               ..

0000031a <__c.4892>:
     31a:	3f 00                                               ?.

0000031c <__c.4889>:
     31c:	4c 4f 57 00                                         LOW.

00000320 <__c.4886>:
     320:	44 49 53 43 48 47 00                                DISCHG.

00000327 <__c.4883>:
     327:	43 48 41 52 47 00                                   CHARG.

0000032d <__c.4879>:
     32d:	46 55 4c 4c 00                                      FULL.

00000332 <__c.4876>:
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     332:	62 61 74 74 65 72 79 3a 20 00                       battery: .

0000033c <__c.4874>:
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33c:	55 53 42 20 53 74 61 74 65 3a 20 25 73 0a 00        USB State: %s..

0000034b <__c.4872>:
     34b:	63 6f 6e 66 69 67 5f 6d 6f 64 65 3a 20 25 58 0a     config_mode: %X.
     35b:	00                                                  .

0000035c <__c.4870>:
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     35c:	72 6e 34 32 5f 61 75 74 6f 63 6f 6e 6e 65 63 74     rn42_autoconnect
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	69 6e 67 28 29 3a 20 25 58 0a 00                    ing(): %X..

00000377 <__c.4868>:

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     377:	72 6e 34 32 3a 20 25 73 0a 00                       rn42: %s..

00000381 <__c.4866>:
				break;
     381:	66 6f 72 63 65 5f 75 73 62 3a 20 25 58 0a 00        force_usb: %X..

00000390 <__c.4864>:

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     390:	70 72 6f 74 6f 63 6f 6c 3a 20 25 73 0a 00           protocol: %s..

0000039e <__c.4862>:
     39e:	0a 2d 2d 2d 2d 2d 20 52 4e 2d 34 32 20 69 6e 66     .----- RN-42 inf
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3ae:	6f 20 2d 2d 2d 2d 2d 0a 00                          o -----..

000003b7 <__c.4858>:
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3b7:	75 3a 20 20 20 20 20 20 20 74 6f 67 67 6c 65 20     u:       toggle 
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3c7:	46 6f 72 63 65 20 55 53 42 20 6d 6f 64 65 0a 00     Force USB mode..

000003d7 <__c.4856>:

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3d7:	70 3a 20 20 20 20 20 20 20 70 61 69 72 69 6e 67     p:       pairing
     3e7:	0a 00                                               ..

000003e9 <__c.4854>:
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3e9:	53 6c 63 6b 3a 20 20 20 20 52 4e 2d 34 32 20 69     Slck:    RN-42 i
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f9:	6e 69 74 69 61 6c 69 7a 65 0a 00                    nitialize..

00000404 <__c.4852>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     404:	44 65 6c 3a 20 20 20 20 20 65 6e 74 65 72 2f 65     Del:     enter/e
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     414:	78 69 74 20 52 4e 2d 34 32 20 63 6f 6e 66 69 67     xit RN-42 config

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     424:	20 6d 6f 64 65 0a 00                                 mode..

0000042b <__c.4850>:
     42b:	62 3a 20 20 20 20 20 20 20 62 61 74 74 65 72 79     b:       battery

					for (uint8_t i = 1; i < UsageListSize; i++)
     43b:	20 76 6f 6c 74 61 67 65 0a 00                        voltage..

00000445 <__c.4848>:
					  UsageList[i - 1] = UsageList[i];
     445:	69 3a 20 20 20 20 20 20 20 52 4e 2d 34 32 20 69     i:       RN-42 i

					UsageListSize--;
     455:	6e 66 6f 0a 00                                      nfo..

0000045a <__c.4846>:
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     45a:	0a 0a 2d 2d 2d 2d 2d 20 42 6c 75 65 74 6f 6f 74     ..----- Bluetoot
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46a:	68 20 52 4e 2d 34 32 20 48 65 6c 70 20 2d 2d 2d     h RN-42 Help ---
     47a:	2d 2d 0a 00                                         --..

0000047e <__c.4786>:
     47e:	25 30 32 75 3a 25 30 32 75 3a 25 30 32 75 09 25     %02u:%02u:%02u.%
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48e:	75 6d 56 0a 00                                      umV..

00000493 <__c.4772>:
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     493:	4c 45 44 20 73 74 61 74 75 73 3a 20 25 30 32 58     LED status: %02X
     4a3:	0a 00                                               ..

000004a5 <__c.4766>:
				break;
     4a5:	20 25 30 32 58 00                                    %02X.

000004ab <__c.4764>:
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ab:	25 63 00                                            %c.

000004ae <__c.4722>:
     4ae:	5b 73 5d 00                                         [s].

000004b2 <__c.4720>:
     4b2:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 0a 00     Keyboard start..

000004c2 <__c.4718>:
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c2:	52 4e 2d 34 32 20 69 6e 69 74 0a 00                 RN-42 init..

000004ce <__c.4716>:
     4ce:	0a 55 53 42 20 69 6e 69 74 0a 00                    .USB init..

000004d9 <__c.4716>:
     4d9:	5b 44 5d 00                                         [D].

000004dd <__c.4711>:
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4dd:	5b 43 5d 00                                         [C].

000004e1 <ProductString>:
     4e1:	12 03 48 00 48 00 4b 00 42 00 20 00 6d 00 6f 00     ..H.H.K.B. .m.o.
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f1:	64 00 00 00                                         d...

000004f5 <ManufacturerString>:
     4f5:	0e 03 74 00 2e 00 6d 00 2e 00 6b 00 2e 00 00 00     ..t...m...k.....

00000505 <LanguageString>:
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     505:	04 03 09 04                                         ....

00000509 <ConfigurationDescriptor>:
     509:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
     519:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     529:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...

						for (uint8_t i = 1; i < UsageListSize; i++)
     539:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
						  UsageList[i - 1] = UsageList[i];
     549:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....

						UsageListSize--;
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     559:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     569:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     579:	03 20 00 01                                         . ..

0000057d <DeviceDescriptor>:
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     57d:	12 01 10 01 00 00 00 08 ed fe 42 42 04 01 01 02     ..........BB....
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     58d:	00 01                                               ..

0000058f <ConsoleReport>:
     58f:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     59f:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5af:	02 c0                                               ..

000005b1 <ExtrakeyReport>:
     5b1:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5c1:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     5d1:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     5e1:	10 95 01 81 00 c0                                   ......

000005e7 <MouseReport>:
     5e7:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
     5f7:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     607:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     617:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     627:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000634 <KeyboardReport>:
     634:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     644:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     654:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     664:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000674 <__c.2055>:
     674:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

00000684 <__c.2050>:
					  ParserData->TotalReportItems++;
     684:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

00000692 <__c.2042>:

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	0a 00                                               ..

00000694 <__c.2037>:
     694:	25 30 32 58 20 00                                   %02X .

0000069a <__c.2034>:
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69a:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

000006a5 <__c.2384>:
			UsageListSize       = 0;
     6a5:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

000006b0 <__c.1714>:
		}
	}

	if (!(ParserData->TotalReportItems))
     6b0:	25 30 32 58 3a 20 25 30 38 62 25 73 0a 00           %02X: %08b%s..

000006be <__c.1711>:
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6be:	72 2f 63 20 30 31 32 33 34 35 36 37 0a 00           r/c 01234567..

000006cc <__c.2090>:
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6cc:	4f 6e 65 73 68 6f 74 3a 20 74 69 6d 65 6f 75 74     Oneshot: timeout
}
     6dc:	0a 00                                               ..

000006de <__c.2115>:
     6de:	29 0a 00                                            )..

000006e1 <__c.2113>:
     6e1:	25 75 00                                            %u.

000006e4 <__c.2111>:
     6e4:	2f 00                                               /.

000006e6 <__c.2109>:
     6e6:	25 75 00                                            %u.

000006e9 <__c.2107>:
     6e9:	5d 28 00                                            ](.

000006ec <__c.2105>:
     6ec:	25 64 00                                            %d.

000006ef <__c.2103>:
     6ef:	20 00                                                .

000006f1 <__c.2101>:
     6f1:	25 64 00                                            %d.

000006f4 <__c.2099>:
     6f4:	20 00                                                .

000006f6 <__c.2097>:
     6f6:	25 64 00                                            %d.

000006f9 <__c.2095>:
     6f9:	20 00                                                .

000006fb <__c.2093>:
     6fb:	25 64 00                                            %d.

000006fe <__c.2091>:
     6fe:	7c 00                                               |.

00000700 <__c.2089>:
     700:	25 30 32 58 00                                      %02X.

00000705 <__c.2087>:
     705:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     715:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     725:	20 5b 00                                             [.

00000728 <__c.2729>:
     728:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     738:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000743 <__c.2726>:
     743:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     753:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000075c <__c.2723>:
     75c:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     76c:	20 25 64 0a 00                                       %d..

00000771 <__c.2720>:
     771:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     781:	64 0a 00                                            d..

00000784 <__c.2717>:
     784:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     794:	0a 00                                               ..

00000796 <__c.2713>:
     796:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000007a5 <__c.2706>:
     7a5:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     7b5:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000007c0 <__c.2703>:
     7c0:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     7d0:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000007d9 <__c.2700>:
     7d9:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     7e9:	20 25 64 0a 00                                       %d..

000007ee <__c.2697>:
     7ee:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     7fe:	64 0a 00                                            d..

00000801 <__c.2694>:
     801:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     811:	0a 00                                               ..

00000813 <__c.2690>:
     813:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000822 <__c.2683>:
     822:	0a 00                                               ..

00000824 <__c.2681>:
     824:	25 75 00                                            %u.

00000827 <__c.2679>:
     827:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     837:	5f 6d 61 78 3a 20 00                                _max: .

0000083e <__c.2677>:
     83e:	0a 00                                               ..

00000840 <__c.2675>:
     840:	25 75 00                                            %u.

00000843 <__c.2673>:
     843:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     853:	65 64 3a 20 00                                      ed: .

00000858 <__c.2671>:
     858:	0a 00                                               ..

0000085a <__c.2669>:
     85a:	25 75 00                                            %u.

0000085d <__c.2667>:
     85d:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     86d:	00                                                  .

0000086e <__c.2665>:
     86e:	0a 00                                               ..

00000870 <__c.2663>:
     870:	25 75 00                                            %u.

00000873 <__c.2661>:
     873:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000882 <__c.2659>:
     882:	0a 00                                               ..

00000884 <__c.2657>:
     884:	25 75 00                                            %u.

00000887 <__c.2655>:
     887:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     897:	20 00                                                .

00000899 <__c.2653>:
     899:	0a 00                                               ..

0000089b <__c.2651>:
     89b:	25 75 00                                            %u.

0000089e <__c.2649>:
     89e:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     8ae:	20 00                                                .

000008b0 <__c.2647>:
     8b0:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000008be <__c.2767>:
     8be:	4d 3e 00                                            M>.

000008c1 <__c.2765>:
     8c1:	4d 25 64 3e 20 00                                   M%d> .

000008c7 <__c.2763>:
     8c7:	3f 00                                               ?.

000008c9 <__c.2760>:
     8c9:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000008d6 <__c.2746>:
     8d6:	43 3e 20 00                                         C> .

000008da <__c.2736>:
     8da:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     8ea:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     8fa:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     90a:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     91a:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000928 <__c.2734>:
     928:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     938:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     948:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     958:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     968:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     978:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     988:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     998:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     9a8:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     9b8:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     9c8:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     9d8:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     9e8:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     9f8:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     a08:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     a18:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000a23 <__c.2639>:
     a23:	3f 00                                               ?.

00000a25 <__c.2636>:
     a25:	4d 3e 20 00                                         M> .

00000a29 <__c.2641>:
     a29:	43 3e 20 00                                         C> .

00000a2d <__c.2785>:
     a2d:	4c 25 64 0a 00                                      L%d..

00000a32 <__c.2625>:
     a32:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     a42:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     a52:	73 65 6b 65 79 0a 00                                sekey..

00000a59 <__c.2555>:
     a59:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     a69:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     a79:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     a89:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     a99:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     aa9:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     ab9:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     ac9:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     ad9:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     ae9:	72 0a 00                                            r..

00000aec <__c.2620>:
     aec:	3f 00                                               ?.

00000aee <__c.2611>:
     aee:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     afe:	25 30 34 6c 58 0a 00                                %04lX..

00000b05 <__c.2609>:
     b05:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     b15:	58 0a 00                                            X..

00000b18 <__c.2607>:
     b18:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     b28:	6c 3a 20 25 58 0a 00                                l: %X..

00000b2f <__c.2605>:
     b2f:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     b3f:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000b49 <__c.2603>:
     b49:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000b57 <__c.2600>:
     b57:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     b67:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     b77:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000b85 <__c.2598>:
     b85:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 4d 4f     OPTIONS: LUFA MO
     b95:	55 53 45 4b 45 59 20 45 58 54 52 41 4b 45 59 20     USEKEY EXTRAKEY 
     ba5:	43 4f 4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44 20     CONSOLE COMMAND 
     bb5:	34 30 39 36 0a 00                                   4096..

00000bbb <__c.2596>:
     bbb:	42 55 49 4c 44 3a 20 31 33 62 31 63 38 33 20 28     BUILD: 13b1c83 (
     bcb:	31 34 3a 31 31 3a 32 33 20 41 70 72 20 31 32 20     14:11:23 Apr 12 
     bdb:	32 30 31 37 29 0a 00                                2017)..

00000be2 <__c.2594>:
     be2:	56 49 44 3a 20 30 78 46 45 45 44 28 74 2e 6d 2e     VID: 0xFEED(t.m.
     bf2:	6b 2e 29 20 50 49 44 3a 20 30 78 34 32 34 32 28     k.) PID: 0x4242(
     c02:	48 48 4b 42 20 6d 6f 64 29 20 56 45 52 3a 20 30     HHKB mod) VER: 0
     c12:	78 30 31 30 34 0a 00                                x0104..

00000c19 <__c.2592>:
     c19:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     c29:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     c39:	6f 72 20 48 48 4b 42 20 6d 6f 64 0a 00              or HHKB mod..

00000c46 <__c.2590>:
     c46:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000c55 <__c.2587>:
     c55:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000c62 <__c.2585>:
     c62:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000c6e <__c.2582>:
     c6e:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000c7e <__c.2580>:
     c7e:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000c8d <__c.2577>:
     c8d:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000c9b <__c.2575>:
     c9b:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000ca8 <__c.2572>:
     ca8:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000cb4 <__c.2570>:
     cb4:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000cc1 <__c.2567>:
     cc1:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     cd1:	00                                                  .

00000cd2 <__c.2564>:
     cd2:	43 3e 20 00                                         C> .

00000cd6 <__ctors_end>:
     cd6:	11 24       	eor	r1, r1
     cd8:	1f be       	out	0x3f, r1	; 63
     cda:	cf ef       	ldi	r28, 0xFF	; 255
     cdc:	da e0       	ldi	r29, 0x0A	; 10
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	cd bf       	out	0x3d, r28	; 61

00000ce2 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     ce2:	04 b6       	in	r0, 0x34	; 52
     ce4:	03 fe       	sbrs	r0, 3
     ce6:	24 c0       	rjmp	.+72     	; 0xd30 <__do_copy_data>
     ce8:	80 91 5f 03 	lds	r24, 0x035F
     cec:	90 91 60 03 	lds	r25, 0x0360
     cf0:	a0 91 61 03 	lds	r26, 0x0361
     cf4:	b0 91 62 03 	lds	r27, 0x0362
     cf8:	87 30       	cpi	r24, 0x07	; 7
     cfa:	90 4b       	sbci	r25, 0xB0	; 176
     cfc:	a7 40       	sbci	r26, 0x07	; 7
     cfe:	b0 4b       	sbci	r27, 0xB0	; 176
     d00:	b9 f4       	brne	.+46     	; 0xd30 <__do_copy_data>
        reset_key = 0;
     d02:	10 92 5f 03 	sts	0x035F, r1
     d06:	10 92 60 03 	sts	0x0360, r1
     d0a:	10 92 61 03 	sts	0x0361, r1
     d0e:	10 92 62 03 	sts	0x0362, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     d12:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     d14:	84 b7       	in	r24, 0x34	; 52
     d16:	87 7f       	andi	r24, 0xF7	; 247
     d18:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     d1a:	88 e1       	ldi	r24, 0x18	; 24
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	80 93 60 00 	sts	0x0060, r24
     d24:	10 92 60 00 	sts	0x0060, r1
     d28:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     d2a:	e0 e0       	ldi	r30, 0x00	; 0
     d2c:	f8 e3       	ldi	r31, 0x38	; 56
     d2e:	09 95       	icall

00000d30 <__do_copy_data>:
     d30:	11 e0       	ldi	r17, 0x01	; 1
     d32:	a0 e0       	ldi	r26, 0x00	; 0
     d34:	b1 e0       	ldi	r27, 0x01	; 1
     d36:	ec ea       	ldi	r30, 0xAC	; 172
     d38:	fc e5       	ldi	r31, 0x5C	; 92
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <__do_copy_data+0x10>
     d3c:	05 90       	lpm	r0, Z+
     d3e:	0d 92       	st	X+, r0
     d40:	aa 39       	cpi	r26, 0x9A	; 154
     d42:	b1 07       	cpc	r27, r17
     d44:	d9 f7       	brne	.-10     	; 0xd3c <__do_copy_data+0xc>

00000d46 <__do_clear_bss>:
     d46:	23 e0       	ldi	r18, 0x03	; 3
     d48:	aa e9       	ldi	r26, 0x9A	; 154
     d4a:	b1 e0       	ldi	r27, 0x01	; 1
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <.do_clear_bss_start>

00000d4e <.do_clear_bss_loop>:
     d4e:	1d 92       	st	X+, r1

00000d50 <.do_clear_bss_start>:
     d50:	af 35       	cpi	r26, 0x5F	; 95
     d52:	b2 07       	cpc	r27, r18
     d54:	e1 f7       	brne	.-8      	; 0xd4e <.do_clear_bss_loop>
     d56:	0e 94 63 10 	call	0x20c6	; 0x20c6 <main>
     d5a:	0c 94 54 2e 	jmp	0x5ca8	; 0x5ca8 <_exit>

00000d5e <__bad_interrupt>:
     d5e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d62 <xmit>:
#if BIDIR
	ldi	r23, BPS-1	;Pre-idle time for bidirectional data line
5:	dec	r23     	;
	brne	5b		;/
#endif
	in	r0, _SFR_IO_ADDR(SREG)	;Save flags
     d62:	0f b6       	in	r0, 0x3f	; 63

	com	r24		;C = start bit
     d64:	80 95       	com	r24
	ldi	r25, 10		;Bit counter
     d66:	9a e0       	ldi	r25, 0x0A	; 10
	cli			;Start critical section
     d68:	f8 94       	cli

1:	ldi	r23, BPS-1	;----- Bit transferring loop 
     d6a:	7b e2       	ldi	r23, 0x2B	; 43
2:	dec	r23     	;Wait for a bit time
     d6c:	7a 95       	dec	r23
	brne	2b		;/
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <xmit+0xa>
	brcs	3f		;MISO = bit to be sent
     d70:	08 f0       	brcs	.+2      	; 0xd74 <xmit+0x12>
	OUT_1			;
     d72:	58 9a       	sbi	0x0b, 0	; 11
3:	brcc	4f		;
     d74:	08 f4       	brcc	.+2      	; 0xd78 <xmit+0x16>
	OUT_0			;/
     d76:	58 98       	cbi	0x0b, 0	; 11
4:	lsr	r24     	;Get next bit into C
     d78:	86 95       	lsr	r24
	dec	r25     	;All bits sent?
     d7a:	9a 95       	dec	r25
	brne	1b	     	;  no, coutinue
     d7c:	b1 f7       	brne	.-20     	; 0xd6a <xmit+0x8>

	out	_SFR_IO_ADDR(SREG), r0	;End of critical section
     d7e:	0f be       	out	0x3f, r0	; 63
	ret
     d80:	08 95       	ret

00000d82 <rcvr>:
;Size: 19 words

.global rcvr
.func rcvr
rcvr:
	in	r0, _SFR_IO_ADDR(SREG)	;Save flags
     d82:	0f b6       	in	r0, 0x3f	; 63

	ldi	r24, 0x80	;Receiving shift reg
     d84:	80 e8       	ldi	r24, 0x80	; 128
	cli			;Start critical section
     d86:	f8 94       	cli

1:	SKIP_IN_1		;Wait for idle
     d88:	49 9b       	sbis	0x09, 1	; 9
	rjmp	1b
     d8a:	fe cf       	rjmp	.-4      	; 0xd88 <rcvr+0x6>
2:	SKIP_IN_0		;Wait for start bit
     d8c:	49 99       	sbic	0x09, 1	; 9
	rjmp	2b
     d8e:	fe cf       	rjmp	.-4      	; 0xd8c <rcvr+0xa>
	ldi	r25, BPS/2	;Wait for half bit time
     d90:	96 e1       	ldi	r25, 0x16	; 22
3:	dec	r25
     d92:	9a 95       	dec	r25
	brne	3b
     d94:	f1 f7       	brne	.-4      	; 0xd92 <rcvr+0x10>

4:	ldi	r25, BPS	;----- Bit receiving loop
     d96:	9c e2       	ldi	r25, 0x2C	; 44
5:	dec	r25     	;Wait for a bit time
     d98:	9a 95       	dec	r25
	brne	5b		;/
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <rcvr+0x16>
	lsr	r24     	;Next bit
     d9c:	86 95       	lsr	r24
	SKIP_IN_0		;Get a data bit into r24.7
     d9e:	49 99       	sbic	0x09, 1	; 9
	ori	r24, 0x80
     da0:	80 68       	ori	r24, 0x80	; 128
	brcc	4b	     	;All bits received?  no, continue
     da2:	c8 f7       	brcc	.-14     	; 0xd96 <rcvr+0x14>

	out	_SFR_IO_ADDR(SREG), r0	;End of critical section
     da4:	0f be       	out	0x3f, r0	; 63
	ret
     da6:	08 95       	ret

00000da8 <recv>:

; Not wait for start bit. This should be called after detecting start bit.
.global recv
.func recv
recv:
	in	r0, _SFR_IO_ADDR(SREG)	;Save flags
     da8:	0f b6       	in	r0, 0x3f	; 63

	ldi	r24, 0x80	;Receiving shift reg
     daa:	80 e8       	ldi	r24, 0x80	; 128
	cli			;Start critical section
     dac:	f8 94       	cli

;1:	SKIP_IN_1		;Wait for idle
;	rjmp	1b
;2:	SKIP_IN_0		;Wait for start bit
;	rjmp	2b
	ldi	r25, BPS/2	;Wait for half bit time
     dae:	96 e1       	ldi	r25, 0x16	; 22
3:	dec	r25
     db0:	9a 95       	dec	r25
	brne	3b
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <recv+0x8>

4:	ldi	r25, BPS	;----- Bit receiving loop
     db4:	9c e2       	ldi	r25, 0x2C	; 44
5:	dec	r25     	;Wait for a bit time
     db6:	9a 95       	dec	r25
	brne	5b		;/
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <recv+0xe>
	lsr	r24     	;Next bit
     dba:	86 95       	lsr	r24
	SKIP_IN_0		;Get a data bit into r24.7
     dbc:	49 99       	sbic	0x09, 1	; 9
	ori	r24, 0x80
     dbe:	80 68       	ori	r24, 0x80	; 128
	brcc	4b	     	;All bits received?  no, continue
     dc0:	c8 f7       	brcc	.-14     	; 0xdb4 <recv+0xc>

	ldi	r25, BPS/2	;Wait for half bit time
     dc2:	96 e1       	ldi	r25, 0x16	; 22
6:	dec	r25
     dc4:	9a 95       	dec	r25
	brne	6b
     dc6:	f1 f7       	brne	.-4      	; 0xdc4 <recv+0x1c>
7:	SKIP_IN_1		;Wait for stop bit
     dc8:	49 9b       	sbis	0x09, 1	; 9
	rjmp	7b
     dca:	fe cf       	rjmp	.-4      	; 0xdc8 <recv+0x20>

	out	_SFR_IO_ADDR(SREG), r0	;End of critical section
     dcc:	0f be       	out	0x3f, r0	; 63
	ret
     dce:	08 95       	ret

00000dd0 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     dd0:	ff 93       	push	r31
	push	ZL
     dd2:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     dd4:	e0 91 9a 01 	lds	r30, 0x019A
	lds	ZH, xfunc_out+1	;/
     dd8:	f0 91 9b 01 	lds	r31, 0x019B
	sbiw	ZL, 0		;Skip if null
     ddc:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     dde:	09 f0       	breq	.+2      	; 0xde2 <xputc+0x12>
	icall
     de0:	09 95       	icall
2:	pop	ZL
     de2:	ef 91       	pop	r30
	pop	ZH
     de4:	ff 91       	pop	r31
	ret
     de6:	08 95       	ret

00000de8 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     de8:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     dea:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     dec:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     dee:	11 f0       	breq	.+4      	; 0xdf4 <xputs+0xc>
	rcall	xputc
     df0:	ef df       	rcall	.-34     	; 0xdd0 <xputc>
	rjmp	1b
     df2:	fb cf       	rjmp	.-10     	; 0xdea <xputs+0x2>
2:	ret
     df4:	08 95       	ret

00000df6 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     df6:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     df8:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     dfa:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     dfc:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     dfe:	0c c0       	rjmp	.+24     	; 0xe18 <xitoa+0x22>
	neg	r20		;
     e00:	41 95       	neg	r20
	sbrs	r25, 7		;
     e02:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     e04:	09 c0       	rjmp	.+18     	; 0xe18 <xitoa+0x22>
	ldi	r30, '-'	;
     e06:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     e08:	60 95       	com	r22
	com	r23		;
     e0a:	70 95       	com	r23
	com	r24		;
     e0c:	80 95       	com	r24
	com	r25		;
     e0e:	90 95       	com	r25
	adc	r22, r1		;
     e10:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     e12:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     e14:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     e16:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     e18:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <xitoa+0x2a>
	neg	r18		;
     e1c:	21 95       	neg	r18
	ldi	r19, '0'	;/
     e1e:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     e20:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     e22:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     e24:	66 0f       	add	r22, r22
	rol	r23		;
     e26:	77 1f       	adc	r23, r23
	rol	r24		;
     e28:	88 1f       	adc	r24, r24
	rol	r25		;
     e2a:	99 1f       	adc	r25, r25
	rol	r26		;
     e2c:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     e2e:	a4 17       	cp	r26, r20
	brcs	3f		;
     e30:	10 f0       	brcs	.+4      	; 0xe36 <xitoa+0x40>
	sub	r26, r20	;
     e32:	a4 1b       	sub	r26, r20
	inc	r22		;
     e34:	63 95       	inc	r22
3:	dec	r21		;
     e36:	5a 95       	dec	r21
	brne	2b		;/
     e38:	a9 f7       	brne	.-22     	; 0xe24 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     e3a:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     e3c:	08 f0       	brcs	.+2      	; 0xe40 <xitoa+0x4a>
	subi	r26, -7		;
     e3e:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     e40:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     e42:	af 93       	push	r26
	inc	r31		;/
     e44:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     e46:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     e48:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     e4a:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     e4c:	91 05       	cpc	r25, r1
	brne	1b		;/
     e4e:	41 f7       	brne	.-48     	; 0xe20 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     e50:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     e52:	11 f4       	brne	.+4      	; 0xe58 <xitoa+0x62>
	push	r30		;
     e54:	ef 93       	push	r30
	inc	r31		;/
     e56:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     e58:	f2 17       	cp	r31, r18
	brcc	6f		;
     e5a:	18 f4       	brcc	.+6      	; 0xe62 <xitoa+0x6c>
	push	r19		;
     e5c:	3f 93       	push	r19
	inc	r31		;
     e5e:	f3 95       	inc	r31
	rjmp	5b		;/
     e60:	fb cf       	rjmp	.-10     	; 0xe58 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     e62:	8f 91       	pop	r24
	rcall	xputc		;
     e64:	b5 df       	rcall	.-150    	; 0xdd0 <xputc>
	dec	r31		;
     e66:	fa 95       	dec	r31
	brne	6b		;/
     e68:	e1 f7       	brne	.-8      	; 0xe62 <xitoa+0x6c>

	ret
     e6a:	08 95       	ret

00000e6c <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     e6c:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     e6e:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     e70:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     e72:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     e74:	21 f0       	breq	.+8      	; 0xe7e <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     e76:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     e78:	19 f0       	breq	.+6      	; 0xe80 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     e7a:	aa df       	rcall	.-172    	; 0xdd0 <xputc>
	rjmp	0b		;/
     e7c:	f9 cf       	rjmp	.-14     	; 0xe70 <xvprintf+0x4>
90:	ret
     e7e:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     e80:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     e82:	e8 94       	clt
	_LPMI	r21		;Get flags
     e84:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     e86:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     e88:	c1 f3       	breq	.-16     	; 0xe7a <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     e8a:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     e8c:	11 f4       	brne	.+4      	; 0xe92 <xvprintf+0x26>
	set			;/
     e8e:	68 94       	set
22:	_LPMI	r21		;Get width
     e90:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     e92:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     e94:	48 f4       	brcc	.+18     	; 0xea8 <xvprintf+0x3c>
	subi	r21, '0'	;
     e96:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     e98:	90 f3       	brcs	.-28     	; 0xe7e <xvprintf+0x12>
	lsl	r18		;
     e9a:	22 0f       	add	r18, r18
	mov	r0, r18		;
     e9c:	02 2e       	mov	r0, r18
	lsl	r18		;
     e9e:	22 0f       	add	r18, r18
	lsl	r18		;
     ea0:	22 0f       	add	r18, r18
	add	r18, r0		;
     ea2:	20 0d       	add	r18, r0
	add	r18, r21	;
     ea4:	25 0f       	add	r18, r21
	rjmp	22b		;/
     ea6:	f4 cf       	rjmp	.-24     	; 0xe90 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     ea8:	0e f4       	brtc	.+2      	; 0xeac <xvprintf+0x40>
	neg	r18		;
     eaa:	21 95       	neg	r18
25:	ld	r24, Y+		;
     eac:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     eae:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     eb0:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     eb2:	19 f3       	breq	.-58     	; 0xe7a <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     eb4:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     eb6:	29 f1       	breq	.+74     	; 0xf02 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     eb8:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     eba:	59 f1       	breq	.+86     	; 0xf12 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     ebc:	bc 01       	movw	r22, r24
	clr	r24		;
     ebe:	88 27       	eor	r24, r24
	clr	r25		;
     ec0:	99 27       	eor	r25, r25
	clt			;/
     ec2:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     ec4:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     ec6:	21 f4       	brne	.+8      	; 0xed0 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     ec8:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     eca:	99 91       	ld	r25, Y+
	set			;
     ecc:	68 94       	set
	_LPMI	r21		;/
     ece:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     ed0:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     ed2:	39 f4       	brne	.+14     	; 0xee2 <xvprintf+0x76>
	ldi	r20, -10	;
     ed4:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     ed6:	7e f0       	brts	.+30     	; 0xef6 <xvprintf+0x8a>
	sbrs	r23, 7		;
     ed8:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     eda:	0d c0       	rjmp	.+26     	; 0xef6 <xvprintf+0x8a>
	ldi	r24, -1		;
     edc:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     ede:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     ee0:	0a c0       	rjmp	.+20     	; 0xef6 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     ee2:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     ee4:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     ee6:	39 f0       	breq	.+14     	; 0xef6 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     ee8:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     eea:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     eec:	21 f0       	breq	.+8      	; 0xef6 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     eee:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     ef0:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     ef2:	09 f0       	breq	.+2      	; 0xef6 <xvprintf+0x8a>
	ret			;abort
     ef4:	08 95       	ret
40:	push	ZH		;Output the value
     ef6:	ff 93       	push	r31
	push	ZL		;
     ef8:	ef 93       	push	r30
	rcall	xitoa		;
     efa:	7d df       	rcall	.-262    	; 0xdf6 <xitoa>
42:	pop	ZL		;
     efc:	ef 91       	pop	r30
	pop	ZH		;
     efe:	ff 91       	pop	r31
	rjmp	0b		;/
     f00:	b7 cf       	rjmp	.-146    	; 0xe70 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     f02:	ff 93       	push	r31
	push	ZL
     f04:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     f06:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     f08:	81 91       	ld	r24, Z+
	cpi	r24, 0
     f0a:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     f0c:	b9 f3       	breq	.-18     	; 0xefc <xvprintf+0x90>
	rcall	xputc
     f0e:	60 df       	rcall	.-320    	; 0xdd0 <xputc>
	rjmp	51b
     f10:	fb cf       	rjmp	.-10     	; 0xf08 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     f12:	ff 93       	push	r31
	push	ZL
     f14:	ef 93       	push	r30
	rcall	xputs
     f16:	68 df       	rcall	.-304    	; 0xde8 <xputs>
	rjmp	42b
     f18:	f1 cf       	rjmp	.-30     	; 0xefc <xvprintf+0x90>

00000f1a <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     f1a:	df 93       	push	r29
	push	YL
     f1c:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     f1e:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     f20:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     f22:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     f24:	a3 df       	rcall	.-186    	; 0xe6c <xvprintf>
	pop	YL
     f26:	cf 91       	pop	r28
	pop	YH
     f28:	df 91       	pop	r29
	ret
     f2a:	08 95       	ret

00000f2c <KEY_POWER_OFF>:
    /* Without this wait you will miss or get false key events. */
    _delay_ms(5);                       // wait for powering up
}
static inline void KEY_POWER_OFF(void) {
    /* input with pull-up consumes less than without it when pin is open. */
    DDRB = 0x00; PORTB = 0xFF;          // change pins input with pull-up
     f2c:	14 b8       	out	0x04, r1	; 4
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	85 b9       	out	0x05, r24	; 5
    DDRD |= (1<<4); PORTD &= ~(1<<4);   // MOS FET switch off
     f32:	54 9a       	sbi	0x0a, 4	; 10
     f34:	5c 98       	cbi	0x0b, 4	; 11
     f36:	08 95       	ret

00000f38 <KEY_POWER_ON>:
static inline bool KEY_STATE(void) { return (PIND & (1<<7)); }
static inline void KEY_PREV_ON(void) { (PORTB |=  (1<<7)); }
static inline void KEY_PREV_OFF(void) { (PORTB &= ~(1<<7)); }
#ifdef HHKB_POWER_SAVING
static inline void KEY_POWER_ON(void) {
    DDRB = 0xFF; PORTB = 0x40;          // change pins output
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	84 b9       	out	0x04, r24	; 4
     f3c:	80 e4       	ldi	r24, 0x40	; 64
     f3e:	85 b9       	out	0x05, r24	; 5
    DDRD |= (1<<4); PORTD |= (1<<4);    // MOS FET switch on
     f40:	54 9a       	sbi	0x0a, 4	; 10
     f42:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f44:	8f e1       	ldi	r24, 0x1F	; 31
     f46:	9e e4       	ldi	r25, 0x4E	; 78
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <KEY_POWER_ON+0x10>
     f4c:	00 c0       	rjmp	.+0      	; 0xf4e <KEY_POWER_ON+0x16>
     f4e:	00 00       	nop
     f50:	08 95       	ret

00000f52 <matrix_init>:
static inline bool KEY_POWER_STATE(void) { return true; }
#endif
static inline void KEY_INIT(void)
{
    /* row,col,prev: output */
    DDRB  = 0xFF;
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x40;   // unable
     f56:	80 e4       	ldi	r24, 0x40	; 64
     f58:	85 b9       	out	0x05, r24	; 5
    /* key: input with pull-up */
    DDRD  &= ~0x80;
     f5a:	57 98       	cbi	0x0a, 7	; 10
    PORTD |=  0x80;
     f5c:	5f 9a       	sbi	0x0b, 7	; 11
    /* row extention for HHKB JP */
    DDRC  |= (1<<6|1<<7);
    PORTC |= (1<<6|1<<7);
#else
    /* input with pull up to save power */
    DDRC  &= ~(1<<6|1<<7);
     f5e:	87 b1       	in	r24, 0x07	; 7
     f60:	8f 73       	andi	r24, 0x3F	; 63
     f62:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<6|1<<7);
     f64:	88 b1       	in	r24, 0x08	; 8
     f66:	80 6c       	ori	r24, 0xC0	; 192
     f68:	88 b9       	out	0x08, r24	; 8
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
     f6a:	2e 9a       	sbi	0x05, 6	; 5
static inline bool KEY_STATE(void) { return (PIND & (1<<7)); }
static inline void KEY_PREV_ON(void) { (PORTB |=  (1<<7)); }
static inline void KEY_PREV_OFF(void) { (PORTB &= ~(1<<7)); }
     f6c:	2f 98       	cbi	0x05, 7	; 5
    PORTC |=  (1<<6|1<<7);
#endif
    KEY_UNABLE();
    KEY_PREV_OFF();

    KEY_POWER_OFF();
     f6e:	0e 94 96 07 	call	0xf2c	; 0xf2c <KEY_POWER_OFF>
     f72:	e4 ea       	ldi	r30, 0xA4	; 164
     f74:	f1 e0       	ldi	r31, 0x01	; 1
#endif

    KEY_INIT();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) _matrix0[i] = 0x00;
     f76:	11 92       	st	Z+, r1
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	ec 3a       	cpi	r30, 0xAC	; 172
     f7c:	f8 07       	cpc	r31, r24
     f7e:	d9 f7       	brne	.-10     	; 0xf76 <matrix_init+0x24>
     f80:	ec e9       	ldi	r30, 0x9C	; 156
     f82:	f1 e0       	ldi	r31, 0x01	; 1
    for (uint8_t i=0; i < MATRIX_ROWS; i++) _matrix1[i] = 0x00;
     f84:	11 92       	st	Z+, r1
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	e4 3a       	cpi	r30, 0xA4	; 164
     f8a:	f8 07       	cpc	r31, r24
     f8c:	d9 f7       	brne	.-10     	; 0xf84 <matrix_init+0x32>
    matrix = _matrix0;
     f8e:	84 ea       	ldi	r24, 0xA4	; 164
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	90 93 af 01 	sts	0x01AF, r25
     f96:	80 93 ae 01 	sts	0x01AE, r24
    matrix_prev = _matrix1;
     f9a:	8c e9       	ldi	r24, 0x9C	; 156
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	90 93 ad 01 	sts	0x01AD, r25
     fa2:	80 93 ac 01 	sts	0x01AC, r24
     fa6:	08 95       	ret

00000fa8 <matrix_scan>:
}

uint8_t matrix_scan(void)
{
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
    uint8_t *tmp;

    tmp = matrix_prev;
     fb0:	80 91 ac 01 	lds	r24, 0x01AC
     fb4:	90 91 ad 01 	lds	r25, 0x01AD
    matrix_prev = matrix;
     fb8:	20 91 ae 01 	lds	r18, 0x01AE
     fbc:	30 91 af 01 	lds	r19, 0x01AF
     fc0:	30 93 ad 01 	sts	0x01AD, r19
     fc4:	20 93 ac 01 	sts	0x01AC, r18
    matrix = tmp;
     fc8:	90 93 af 01 	sts	0x01AF, r25
     fcc:	80 93 ae 01 	sts	0x01AE, r24

    // power on
    if (!KEY_POWER_STATE()) KEY_POWER_ON();
     fd0:	5c 9b       	sbis	0x0b, 4	; 11
     fd2:	0e 94 9c 07 	call	0xf38	; 0xf38 <KEY_POWER_ON>
    matrix = _matrix0;
    matrix_prev = _matrix1;
}

uint8_t matrix_scan(void)
{
     fd6:	c0 e0       	ldi	r28, 0x00	; 0
     fd8:	d0 e0       	ldi	r29, 0x00	; 0
            _delay_us(5);

            if (KEY_STATE()) {
                matrix[row] &= ~(1<<col);
            } else {
                matrix[row] |= (1<<col);
     fda:	01 e0       	ldi	r16, 0x01	; 1
     fdc:	10 e0       	ldi	r17, 0x00	; 0
    matrix = _matrix0;
    matrix_prev = _matrix1;
}

uint8_t matrix_scan(void)
{
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
}
static inline void KEY_SELECT(uint8_t ROW, uint8_t COL)
{
    PORTB = (PORTB & 0xC0) | (((COL) & 0x07)<<3) | ((ROW) & 0x07);
     fe2:	45 b1       	in	r20, 0x05	; 5
     fe4:	40 7c       	andi	r20, 0xC0	; 192
     fe6:	4c 2b       	or	r20, r28
     fe8:	9c 01       	movw	r18, r24
     fea:	53 e0       	ldi	r21, 0x03	; 3
     fec:	22 0f       	add	r18, r18
     fee:	33 1f       	adc	r19, r19
     ff0:	5a 95       	dec	r21
     ff2:	e1 f7       	brne	.-8      	; 0xfec <matrix_scan+0x44>
     ff4:	42 2b       	or	r20, r18
     ff6:	45 b9       	out	0x05, r20	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff8:	ea e1       	ldi	r30, 0x1A	; 26
     ffa:	ea 95       	dec	r30
     ffc:	f1 f7       	brne	.-4      	; 0xffa <matrix_scan+0x52>
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <matrix_scan+0x58>
        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
            KEY_SELECT(row, col);
            _delay_us(5);

            // Not sure this is needed. This just emulates HHKB controller's behaviour.
            if (matrix_prev[row] & (1<<col)) {
    1000:	e0 91 ac 01 	lds	r30, 0x01AC
    1004:	f0 91 ad 01 	lds	r31, 0x01AD
    1008:	ec 0f       	add	r30, r28
    100a:	fd 1f       	adc	r31, r29
    100c:	20 81       	ld	r18, Z
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	08 2e       	mov	r0, r24
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <matrix_scan+0x70>
    1014:	35 95       	asr	r19
    1016:	27 95       	ror	r18
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <matrix_scan+0x6c>
    101c:	20 fd       	sbrc	r18, 0
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
static inline bool KEY_STATE(void) { return (PIND & (1<<7)); }
static inline void KEY_PREV_ON(void) { (PORTB |=  (1<<7)); }
    101e:	2f 9a       	sbi	0x05, 7	; 5
    1020:	f5 e3       	ldi	r31, 0x35	; 53
    1022:	fa 95       	dec	r31
    1024:	f1 f7       	brne	.-4      	; 0x1022 <matrix_scan+0x7a>
    1026:	00 00       	nop
            _delay_us(10);

            // NOTE: KEY_STATE is valid only in 20us after KEY_ENABLE.
            // If V-USB interrupts in this section we could lose 40us or so
            // and would read invalid value from KEY_STATE.
            uint8_t last = TIMER_RAW;
    1028:	a6 b5       	in	r26, 0x26	; 38
 * key:     PD7(pull-uped)
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
    102a:	2e 98       	cbi	0x05, 6	; 5
    102c:	2a e1       	ldi	r18, 0x1A	; 26
    102e:	2a 95       	dec	r18
    1030:	f1 f7       	brne	.-4      	; 0x102e <matrix_scan+0x86>
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <matrix_scan+0x8c>
    1034:	20 91 ae 01 	lds	r18, 0x01AE
    1038:	30 91 af 01 	lds	r19, 0x01AF
            // 10us wait does    work on Teensy++ with pro
            // 10us wait does    work on 328p+iwrap with pro
            // 10us wait doesn't work on tmk PCB(8MHz) with pro2(very lagged scan)
            _delay_us(5);

            if (KEY_STATE()) {
    103c:	4f 9b       	sbis	0x09, 7	; 9
    103e:	0e c0       	rjmp	.+28     	; 0x105c <matrix_scan+0xb4>
                matrix[row] &= ~(1<<col);
    1040:	a8 01       	movw	r20, r16
    1042:	08 2e       	mov	r0, r24
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <matrix_scan+0xa0>
    1046:	44 0f       	add	r20, r20
    1048:	0a 94       	dec	r0
    104a:	ea f7       	brpl	.-6      	; 0x1046 <matrix_scan+0x9e>
    104c:	40 95       	com	r20
    104e:	f9 01       	movw	r30, r18
    1050:	ec 0f       	add	r30, r28
    1052:	fd 1f       	adc	r31, r29
    1054:	50 81       	ld	r21, Z
    1056:	54 23       	and	r21, r20
    1058:	50 83       	st	Z, r21
    105a:	0c c0       	rjmp	.+24     	; 0x1074 <matrix_scan+0xcc>
            } else {
                matrix[row] |= (1<<col);
    105c:	f9 01       	movw	r30, r18
    105e:	ec 0f       	add	r30, r28
    1060:	fd 1f       	adc	r31, r29
    1062:	60 81       	ld	r22, Z
    1064:	a8 01       	movw	r20, r16
    1066:	08 2e       	mov	r0, r24
    1068:	01 c0       	rjmp	.+2      	; 0x106c <matrix_scan+0xc4>
    106a:	44 0f       	add	r20, r20
    106c:	0a 94       	dec	r0
    106e:	ea f7       	brpl	.-6      	; 0x106a <matrix_scan+0xc2>
    1070:	64 2b       	or	r22, r20
    1072:	60 83       	st	Z, r22
            }

            // Ignore if this code region execution time elapses more than 20us.
            // MEMO: 20[us] * (TIMER_RAW_FREQ / 1000000)[count per us]
            // MEMO: then change above using this rule: a/(b/c) = a*1/(b/c) = a*(c/b)
            if (TIMER_DIFF_RAW(TIMER_RAW, last) > 20/(1000000/TIMER_RAW_FREQ)) {
    1074:	46 b5       	in	r20, 0x26	; 38
    1076:	6a 2f       	mov	r22, r26
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	4a 17       	cp	r20, r26
    107c:	18 f0       	brcs	.+6      	; 0x1084 <matrix_scan+0xdc>
    107e:	46 b5       	in	r20, 0x26	; 38
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	04 c0       	rjmp	.+8      	; 0x108c <matrix_scan+0xe4>
    1084:	46 b5       	in	r20, 0x26	; 38
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	41 50       	subi	r20, 0x01	; 1
    108a:	5f 4f       	sbci	r21, 0xFF	; 255
    108c:	46 1b       	sub	r20, r22
    108e:	57 0b       	sbc	r21, r23
    1090:	46 30       	cpi	r20, 0x06	; 6
    1092:	51 05       	cpc	r21, r1
    1094:	58 f0       	brcs	.+22     	; 0x10ac <matrix_scan+0x104>
                matrix[row] = matrix_prev[row];
    1096:	e0 91 ac 01 	lds	r30, 0x01AC
    109a:	f0 91 ad 01 	lds	r31, 0x01AD
    109e:	ec 0f       	add	r30, r28
    10a0:	fd 1f       	adc	r31, r29
    10a2:	40 81       	ld	r20, Z
    10a4:	f9 01       	movw	r30, r18
    10a6:	ec 0f       	add	r30, r28
    10a8:	fd 1f       	adc	r31, r29
    10aa:	40 83       	st	Z, r20
    10ac:	ea e1       	ldi	r30, 0x1A	; 26
    10ae:	ea 95       	dec	r30
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <matrix_scan+0x106>
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <matrix_scan+0x10c>
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
static inline bool KEY_STATE(void) { return (PIND & (1<<7)); }
static inline void KEY_PREV_ON(void) { (PORTB |=  (1<<7)); }
static inline void KEY_PREV_OFF(void) { (PORTB &= ~(1<<7)); }
    10b4:	2f 98       	cbi	0x05, 7	; 5
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
    10b6:	2e 9a       	sbi	0x05, 6	; 5
    10b8:	eb e2       	ldi	r30, 0x2B	; 43
    10ba:	f1 e0       	ldi	r31, 0x01	; 1
    10bc:	31 97       	sbiw	r30, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <matrix_scan+0x114>
    10c0:	00 c0       	rjmp	.+0      	; 0x10c2 <matrix_scan+0x11a>
    10c2:	00 00       	nop
    10c4:	01 96       	adiw	r24, 0x01	; 1
    matrix = tmp;

    // power on
    if (!KEY_POWER_STATE()) KEY_POWER_ON();
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
    10c6:	88 30       	cpi	r24, 0x08	; 8
    10c8:	91 05       	cpc	r25, r1
    10ca:	09 f0       	breq	.+2      	; 0x10ce <matrix_scan+0x126>
    10cc:	8a cf       	rjmp	.-236    	; 0xfe2 <matrix_scan+0x3a>
            _delay_us(30);
#else
            _delay_us(75);
#endif
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    10ce:	a0 91 ae 01 	lds	r26, 0x01AE
    10d2:	b0 91 af 01 	lds	r27, 0x01AF
    10d6:	ac 0f       	add	r26, r28
    10d8:	bd 1f       	adc	r27, r29
    10da:	e0 91 ac 01 	lds	r30, 0x01AC
    10de:	f0 91 ad 01 	lds	r31, 0x01AD
    10e2:	ec 0f       	add	r30, r28
    10e4:	fd 1f       	adc	r31, r29
    10e6:	9c 91       	ld	r25, X
    10e8:	80 81       	ld	r24, Z
    10ea:	98 17       	cp	r25, r24
    10ec:	51 f0       	breq	.+20     	; 0x1102 <matrix_scan+0x15a>
    10ee:	0e 94 04 25 	call	0x4a08	; 0x4a08 <timer_read32>
    10f2:	60 93 b0 01 	sts	0x01B0, r22
    10f6:	70 93 b1 01 	sts	0x01B1, r23
    10fa:	80 93 b2 01 	sts	0x01B2, r24
    10fe:	90 93 b3 01 	sts	0x01B3, r25
    1102:	21 96       	adiw	r28, 0x01	; 1
    matrix_prev = matrix;
    matrix = tmp;

    // power on
    if (!KEY_POWER_STATE()) KEY_POWER_ON();
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    1104:	c8 30       	cpi	r28, 0x08	; 8
    1106:	d1 05       	cpc	r29, r1
    1108:	09 f0       	breq	.+2      	; 0x110c <matrix_scan+0x164>
    110a:	69 cf       	rjmp	.-302    	; 0xfde <matrix_scan+0x36>
#endif
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
    110c:	5c 9b       	sbis	0x0b, 4	; 11
    110e:	1b c0       	rjmp	.+54     	; 0x1146 <matrix_scan+0x19e>
            (USB_DeviceState == DEVICE_STATE_Suspended ||
    1110:	80 91 56 03 	lds	r24, 0x0356
#endif
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
    1114:	85 30       	cpi	r24, 0x05	; 5
    1116:	21 f0       	breq	.+8      	; 0x1120 <matrix_scan+0x178>
            (USB_DeviceState == DEVICE_STATE_Suspended ||
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
    1118:	80 91 56 03 	lds	r24, 0x0356
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
    111c:	81 11       	cpse	r24, r1
    111e:	13 c0       	rjmp	.+38     	; 0x1146 <matrix_scan+0x19e>
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
            timer_elapsed32(matrix_last_modified) > MATRIX_POWER_SAVE) {
    1120:	60 91 b0 01 	lds	r22, 0x01B0
    1124:	70 91 b1 01 	lds	r23, 0x01B1
    1128:	80 91 b2 01 	lds	r24, 0x01B2
    112c:	90 91 b3 01 	lds	r25, 0x01B3
    1130:	0e 94 39 25 	call	0x4a72	; 0x4a72 <timer_elapsed32>
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
    1134:	61 31       	cpi	r22, 0x11	; 17
    1136:	77 42       	sbci	r23, 0x27	; 39
    1138:	81 05       	cpc	r24, r1
    113a:	91 05       	cpc	r25, r1
    113c:	20 f0       	brcs	.+8      	; 0x1146 <matrix_scan+0x19e>
            timer_elapsed32(matrix_last_modified) > MATRIX_POWER_SAVE) {
        KEY_POWER_OFF();
    113e:	0e 94 96 07 	call	0xf2c	; 0xf2c <KEY_POWER_OFF>
        suspend_power_down();
    1142:	0e 94 87 24 	call	0x490e	; 0x490e <suspend_power_down>
    }
    return 1;
}
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	08 95       	ret

00001152 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1152:	e0 91 ae 01 	lds	r30, 0x01AE
    1156:	f0 91 af 01 	lds	r31, 0x01AF
    115a:	e8 0f       	add	r30, r24
    115c:	f1 1d       	adc	r31, r1
}
    115e:	80 81       	ld	r24, Z
    1160:	08 95       	ret

00001162 <matrix_power_up>:

void matrix_power_up(void) {
    KEY_POWER_ON();
    1162:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <KEY_POWER_ON>

00001166 <matrix_power_down>:
}
void matrix_power_down(void) {
    KEY_POWER_OFF();
    1166:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <KEY_POWER_OFF>

0000116a <led_set>:

/* HHKB has no LEDs */
void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
        DDRD |= (1<<6);
    116a:	56 9a       	sbi	0x0a, 6	; 10


/* HHKB has no LEDs */
void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    116c:	81 ff       	sbrs	r24, 1
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <led_set+0xa>
        DDRD |= (1<<6);
        PORTD |= (1<<6);
    1170:	5e 9a       	sbi	0x0b, 6	; 11
    1172:	08 95       	ret
    } else {
        DDRD |= (1<<6);
        PORTD &= ~(1<<6);
    1174:	5e 98       	cbi	0x0b, 6	; 11
    1176:	08 95       	ret

00001178 <serial_init>:
#endif


void serial_init(void)
{
    SERIAL_UART_INIT();
    1178:	88 e0       	ldi	r24, 0x08	; 8
    117a:	80 93 cc 00 	sts	0x00CC, r24
    117e:	10 92 cd 00 	sts	0x00CD, r1
    1182:	e9 ec       	ldi	r30, 0xC9	; 201
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	80 69       	ori	r24, 0x90	; 144
    118a:	80 83       	st	Z, r24
    118c:	80 81       	ld	r24, Z
    118e:	88 60       	ori	r24, 0x08	; 8
    1190:	80 83       	st	Z, r24
    1192:	ea ec       	ldi	r30, 0xCA	; 202
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 83       	st	Z, r24
    119a:	eb ec       	ldi	r30, 0xCB	; 203
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	80 83       	st	Z, r24
    11a2:	55 9a       	sbi	0x0a, 5	; 10
    11a4:	5d 98       	cbi	0x0b, 5	; 11
    11a6:	78 94       	sei
    11a8:	08 95       	ret

000011aa <serial_recv2>:
}

int16_t serial_recv2(void)
{
    uint8_t data = 0;
    if (rbuf_head == rbuf_tail) {
    11aa:	90 91 b5 01 	lds	r25, 0x01B5
    11ae:	20 91 b4 01 	lds	r18, 0x01B4
    11b2:	92 17       	cp	r25, r18
    11b4:	d1 f0       	breq	.+52     	; 0x11ea <serial_recv2+0x40>
        return -1;
    }

    data = rbuf[rbuf_tail];
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	f9 01       	movw	r30, r18
    11ba:	ea 54       	subi	r30, 0x4A	; 74
    11bc:	fe 4f       	sbci	r31, 0xFE	; 254
    11be:	80 81       	ld	r24, Z
    rbuf_tail = (rbuf_tail + 1) % RBUF_SIZE;
    11c0:	2f 5f       	subi	r18, 0xFF	; 255
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	33 27       	eor	r19, r19
    11c6:	20 93 b4 01 	sts	0x01B4, r18
    11ca:	49 2f       	mov	r20, r25
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    rbuf_check_rts_lo();
    11ce:	92 17       	cp	r25, r18
    11d0:	18 f4       	brcc	.+6      	; 0x11d8 <serial_recv2+0x2e>
    11d2:	24 1b       	sub	r18, r20
    11d4:	35 0b       	sbc	r19, r21
    11d6:	03 c0       	rjmp	.+6      	; 0x11de <serial_recv2+0x34>
    11d8:	24 1b       	sub	r18, r20
    11da:	35 0b       	sbc	r19, r21
    11dc:	33 95       	inc	r19
    11de:	23 30       	cpi	r18, 0x03	; 3
    11e0:	31 05       	cpc	r19, r1
    11e2:	0c f0       	brlt	.+2      	; 0x11e6 <serial_recv2+0x3c>
    11e4:	5d 98       	cbi	0x0b, 5	; 11
    return data;
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	08 95       	ret

int16_t serial_recv2(void)
{
    uint8_t data = 0;
    if (rbuf_head == rbuf_tail) {
        return -1;
    11ea:	8f ef       	ldi	r24, 0xFF	; 255
    11ec:	9f ef       	ldi	r25, 0xFF	; 255

    data = rbuf[rbuf_tail];
    rbuf_tail = (rbuf_tail + 1) % RBUF_SIZE;
    rbuf_check_rts_lo();
    return data;
}
    11ee:	08 95       	ret

000011f0 <serial_send>:

void serial_send(uint8_t data)
{
    while (!SERIAL_UART_TXD_READY) ;
    11f0:	90 91 c8 00 	lds	r25, 0x00C8
    11f4:	95 ff       	sbrs	r25, 5
    11f6:	fc cf       	rjmp	.-8      	; 0x11f0 <serial_send>
    SERIAL_UART_DATA = data;
    11f8:	80 93 ce 00 	sts	0x00CE, r24
    11fc:	08 95       	ret

000011fe <__vector_25>:
}

// USART RX complete interrupt
ISR(SERIAL_UART_RXD_VECT)
{
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
    1208:	2f 93       	push	r18
    120a:	3f 93       	push	r19
    120c:	4f 93       	push	r20
    120e:	5f 93       	push	r21
    1210:	8f 93       	push	r24
    1212:	9f 93       	push	r25
    1214:	ef 93       	push	r30
    1216:	ff 93       	push	r31
    uint8_t next = (rbuf_head + 1) % RBUF_SIZE;
    1218:	20 91 b5 01 	lds	r18, 0x01B5
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	c9 01       	movw	r24, r18
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	99 27       	eor	r25, r25
    if (next != rbuf_tail) {
    1224:	40 91 b4 01 	lds	r20, 0x01B4
    1228:	48 17       	cp	r20, r24
    122a:	41 f0       	breq	.+16     	; 0x123c <__vector_25+0x3e>
        rbuf[rbuf_head] = SERIAL_UART_DATA;
    122c:	90 91 ce 00 	lds	r25, 0x00CE
    1230:	f9 01       	movw	r30, r18
    1232:	ea 54       	subi	r30, 0x4A	; 74
    1234:	fe 4f       	sbci	r31, 0xFE	; 254
    1236:	90 83       	st	Z, r25
        rbuf_head = next;
    1238:	80 93 b5 01 	sts	0x01B5, r24
    }
    rbuf_check_rts_hi();
    123c:	50 91 b5 01 	lds	r21, 0x01B5
    1240:	84 2f       	mov	r24, r20
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	25 2f       	mov	r18, r21
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	82 1b       	sub	r24, r18
    124a:	93 0b       	sbc	r25, r19
    124c:	54 17       	cp	r21, r20
    124e:	08 f0       	brcs	.+2      	; 0x1252 <__vector_25+0x54>
    1250:	93 95       	inc	r25
    1252:	03 97       	sbiw	r24, 0x03	; 3
    1254:	0c f4       	brge	.+2      	; 0x1258 <__vector_25+0x5a>
    1256:	5d 9a       	sbi	0x0b, 5	; 11
}
    1258:	ff 91       	pop	r31
    125a:	ef 91       	pop	r30
    125c:	9f 91       	pop	r25
    125e:	8f 91       	pop	r24
    1260:	5f 91       	pop	r21
    1262:	4f 91       	pop	r20
    1264:	3f 91       	pop	r19
    1266:	2f 91       	pop	r18
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	0f 90       	pop	r0
    126e:	1f 90       	pop	r1
    1270:	18 95       	reti

00001272 <keyboard_leds>:
    return PINF&(1<<6);
}


static uint8_t leds = 0;
static uint8_t keyboard_leds(void) { return leds; }
    1272:	80 91 d0 02 	lds	r24, 0x02D0
    1276:	08 95       	ret

00001278 <send_system>:
    serial_send(report->y);
    serial_send(report->v);
}

static void send_system(uint16_t data)
{
    1278:	08 95       	ret

0000127a <config_keyboard_leds>:
    config_send_mouse,
    config_send_system,
    config_send_consumer
};

static uint8_t config_keyboard_leds(void) { return leds; }
    127a:	80 91 d0 02 	lds	r24, 0x02D0
    127e:	08 95       	ret

00001280 <config_send_keyboard>:
static void config_send_keyboard(report_keyboard_t *report) {}
    1280:	08 95       	ret

00001282 <config_send_mouse>:
static void config_send_mouse(report_mouse_t *report) {}
    1282:	08 95       	ret

00001284 <config_send_system>:
static void config_send_system(uint16_t data) {}
    1284:	08 95       	ret

00001286 <config_send_consumer>:
static void config_send_consumer(uint16_t data) {}
    1286:	08 95       	ret

00001288 <send_consumer>:
    };
    return 0;
}

static void send_consumer(uint16_t data)
{
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
}


static uint16_t usage2bits(uint16_t usage)
{
    switch (usage) {
    128c:	8d 3c       	cpi	r24, 0xCD	; 205
    128e:	91 05       	cpc	r25, r1
    1290:	c1 f1       	breq	.+112    	; 0x1302 <send_consumer+0x7a>
    1292:	b8 f4       	brcc	.+46     	; 0x12c2 <send_consumer+0x3a>
    1294:	85 3b       	cpi	r24, 0xB5	; 181
    1296:	91 05       	cpc	r25, r1
    1298:	b1 f1       	breq	.+108    	; 0x1306 <send_consumer+0x7e>
    129a:	48 f4       	brcc	.+18     	; 0x12ae <send_consumer+0x26>
    129c:	83 3b       	cpi	r24, 0xB3	; 179
    129e:	91 05       	cpc	r25, r1
    12a0:	d9 f1       	breq	.+118    	; 0x1318 <send_consumer+0x90>
    12a2:	84 3b       	cpi	r24, 0xB4	; 180
    12a4:	91 05       	cpc	r25, r1
    12a6:	d9 f5       	brne	.+118    	; 0x131e <send_consumer+0x96>
        case TRANSPORT_NEXT_TRACK:    return 0x100;
        case TRANSPORT_PREV_TRACK:    return 0x200;
        case TRANSPORT_STOP:          return 0x400;
        case TRANSPORT_STOP_EJECT:    return 0x800;
        case TRANSPORT_FAST_FORWARD:  return 0x1000;
        case TRANSPORT_REWIND:        return 0x2000;
    12a8:	d0 e0       	ldi	r29, 0x00	; 0
    12aa:	c0 e2       	ldi	r28, 0x20	; 32
    12ac:	3c c0       	rjmp	.+120    	; 0x1326 <send_consumer+0x9e>
}


static uint16_t usage2bits(uint16_t usage)
{
    switch (usage) {
    12ae:	87 3b       	cpi	r24, 0xB7	; 183
    12b0:	91 05       	cpc	r25, r1
    12b2:	79 f1       	breq	.+94     	; 0x1312 <send_consumer+0x8a>
    12b4:	58 f1       	brcs	.+86     	; 0x130c <send_consumer+0x84>
    12b6:	8c 3c       	cpi	r24, 0xCC	; 204
    12b8:	91 05       	cpc	r25, r1
    12ba:	89 f5       	brne	.+98     	; 0x131e <send_consumer+0x96>
        case AUDIO_MUTE:              return 0x40;
        case TRANSPORT_PLAY_PAUSE:    return 0x80;
        case TRANSPORT_NEXT_TRACK:    return 0x100;
        case TRANSPORT_PREV_TRACK:    return 0x200;
        case TRANSPORT_STOP:          return 0x400;
        case TRANSPORT_STOP_EJECT:    return 0x800;
    12bc:	d0 e0       	ldi	r29, 0x00	; 0
    12be:	c8 e0       	ldi	r28, 0x08	; 8
    12c0:	32 c0       	rjmp	.+100    	; 0x1326 <send_consumer+0x9e>
}


static uint16_t usage2bits(uint16_t usage)
{
    switch (usage) {
    12c2:	8a 3e       	cpi	r24, 0xEA	; 234
    12c4:	91 05       	cpc	r25, r1
    12c6:	c9 f0       	breq	.+50     	; 0x12fa <send_consumer+0x72>
    12c8:	40 f4       	brcc	.+16     	; 0x12da <send_consumer+0x52>
    12ca:	82 3e       	cpi	r24, 0xE2	; 226
    12cc:	91 05       	cpc	r25, r1
    12ce:	b9 f0       	breq	.+46     	; 0x12fe <send_consumer+0x76>
    12d0:	89 3e       	cpi	r24, 0xE9	; 233
    12d2:	91 05       	cpc	r25, r1
    12d4:	21 f5       	brne	.+72     	; 0x131e <send_consumer+0x96>
        case APPCONTROL_HOME:         return 0x01;
        case APPLAUNCH_EMAIL:         return 0x02;
        case APPCONTROL_SEARCH:       return 0x04;
        //case AL_KBD_LAYOUT:         return 0x08;  // Apple virtual keybaord toggle
        case AUDIO_VOL_UP:            return 0x10;
    12d6:	d0 e1       	ldi	r29, 0x10	; 16
    12d8:	25 c0       	rjmp	.+74     	; 0x1324 <send_consumer+0x9c>
}


static uint16_t usage2bits(uint16_t usage)
{
    switch (usage) {
    12da:	81 32       	cpi	r24, 0x21	; 33
    12dc:	22 e0       	ldi	r18, 0x02	; 2
    12de:	92 07       	cpc	r25, r18
    12e0:	51 f0       	breq	.+20     	; 0x12f6 <send_consumer+0x6e>
    12e2:	83 32       	cpi	r24, 0x23	; 35
    12e4:	22 e0       	ldi	r18, 0x02	; 2
    12e6:	92 07       	cpc	r25, r18
    12e8:	21 f0       	breq	.+8      	; 0x12f2 <send_consumer+0x6a>
    12ea:	8a 38       	cpi	r24, 0x8A	; 138
    12ec:	91 40       	sbci	r25, 0x01	; 1
    12ee:	b9 f4       	brne	.+46     	; 0x131e <send_consumer+0x96>
    12f0:	18 c0       	rjmp	.+48     	; 0x1322 <send_consumer+0x9a>
        case APPCONTROL_HOME:         return 0x01;
    12f2:	d1 e0       	ldi	r29, 0x01	; 1
    12f4:	17 c0       	rjmp	.+46     	; 0x1324 <send_consumer+0x9c>
        case APPLAUNCH_EMAIL:         return 0x02;
        case APPCONTROL_SEARCH:       return 0x04;
    12f6:	d4 e0       	ldi	r29, 0x04	; 4
    12f8:	15 c0       	rjmp	.+42     	; 0x1324 <send_consumer+0x9c>
        //case AL_KBD_LAYOUT:         return 0x08;  // Apple virtual keybaord toggle
        case AUDIO_VOL_UP:            return 0x10;
        case AUDIO_VOL_DOWN:          return 0x20;
    12fa:	d0 e2       	ldi	r29, 0x20	; 32
    12fc:	13 c0       	rjmp	.+38     	; 0x1324 <send_consumer+0x9c>
        case AUDIO_MUTE:              return 0x40;
    12fe:	d0 e4       	ldi	r29, 0x40	; 64
    1300:	11 c0       	rjmp	.+34     	; 0x1324 <send_consumer+0x9c>
        case TRANSPORT_PLAY_PAUSE:    return 0x80;
    1302:	d0 e8       	ldi	r29, 0x80	; 128
    1304:	0f c0       	rjmp	.+30     	; 0x1324 <send_consumer+0x9c>
        case TRANSPORT_NEXT_TRACK:    return 0x100;
    1306:	d0 e0       	ldi	r29, 0x00	; 0
    1308:	c1 e0       	ldi	r28, 0x01	; 1
    130a:	0d c0       	rjmp	.+26     	; 0x1326 <send_consumer+0x9e>
        case TRANSPORT_PREV_TRACK:    return 0x200;
    130c:	d0 e0       	ldi	r29, 0x00	; 0
    130e:	c2 e0       	ldi	r28, 0x02	; 2
    1310:	0a c0       	rjmp	.+20     	; 0x1326 <send_consumer+0x9e>
        case TRANSPORT_STOP:          return 0x400;
    1312:	d0 e0       	ldi	r29, 0x00	; 0
    1314:	c4 e0       	ldi	r28, 0x04	; 4
    1316:	07 c0       	rjmp	.+14     	; 0x1326 <send_consumer+0x9e>
        case TRANSPORT_STOP_EJECT:    return 0x800;
        case TRANSPORT_FAST_FORWARD:  return 0x1000;
    1318:	d0 e0       	ldi	r29, 0x00	; 0
    131a:	c0 e1       	ldi	r28, 0x10	; 16
    131c:	04 c0       	rjmp	.+8      	; 0x1326 <send_consumer+0x9e>
        case TRANSPORT_REWIND:        return 0x2000;
        //case return 0x4000;   // Stop/eject
        //case return 0x8000;   // Internet browser
    };
    return 0;
    131e:	d0 e0       	ldi	r29, 0x00	; 0
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <send_consumer+0x9c>

static uint16_t usage2bits(uint16_t usage)
{
    switch (usage) {
        case APPCONTROL_HOME:         return 0x01;
        case APPLAUNCH_EMAIL:         return 0x02;
    1322:	d2 e0       	ldi	r29, 0x02	; 2
    1324:	c0 e0       	ldi	r28, 0x00	; 0
}

static void send_consumer(uint16_t data)
{
    uint16_t bits = usage2bits(data);
    serial_send(0xFD);  // Raw report mode
    1326:	8d ef       	ldi	r24, 0xFD	; 253
    1328:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(3);     // length
    132c:	83 e0       	ldi	r24, 0x03	; 3
    132e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(3);     // descriptor type
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(bits&0xFF);
    1338:	8d 2f       	mov	r24, r29
    133a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send((bits>>8)&0xFF);
    133e:	8c 2f       	mov	r24, r28
}
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    uint16_t bits = usage2bits(data);
    serial_send(0xFD);  // Raw report mode
    serial_send(3);     // length
    serial_send(3);     // descriptor type
    serial_send(bits&0xFF);
    serial_send((bits>>8)&0xFF);
    1344:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <serial_send>

00001348 <send_mouse>:
    serial_send(report->keys[4]);
    serial_send(report->keys[5]);
}

static void send_mouse(report_mouse_t *report)
{
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	ec 01       	movw	r28, r24
    PORTD |= (1<<5);    // high
    wait_ms(5);
    PORTD &= ~(1<<5);   // low
*/

    serial_send(0xFD);  // Raw report mode
    134e:	8d ef       	ldi	r24, 0xFD	; 253
    1350:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(5);     // length
    1354:	85 e0       	ldi	r24, 0x05	; 5
    1356:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(2);     // descriptor type
    135a:	82 e0       	ldi	r24, 0x02	; 2
    135c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(report->buttons);
    1360:	88 81       	ld	r24, Y
    1362:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(report->x);
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(report->y);
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(report->v);
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    serial_send(5);     // length
    serial_send(2);     // descriptor type
    serial_send(report->buttons);
    serial_send(report->x);
    serial_send(report->y);
    serial_send(report->v);
    1378:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <serial_send>

0000137c <send_keyboard>:
    }
}


static void send_keyboard(report_keyboard_t *report)
{
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	ec 01       	movw	r28, r24
    PORTD |= (1<<5);    // high
    wait_ms(5);
    PORTD &= ~(1<<5);   // low
*/

    serial_send(0xFD);  // Raw report mode
    1382:	8d ef       	ldi	r24, 0xFD	; 253
    1384:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(9);     // length
    1388:	89 e0       	ldi	r24, 0x09	; 9
    138a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(1);     // descriptor type
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(report->mods);
    1394:	88 81       	ld	r24, Y
    1396:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(0x00);
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(report->keys[0]);
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(report->keys[1]);
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(report->keys[2]);
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(report->keys[3]);
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(report->keys[4]);
    13b8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ba:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    serial_send(report->keys[5]);
    13be:	8f 81       	ldd	r24, Y+7	; 0x07
}
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    serial_send(report->keys[0]);
    serial_send(report->keys[1]);
    serial_send(report->keys[2]);
    serial_send(report->keys[3]);
    serial_send(report->keys[4]);
    serial_send(report->keys[5]);
    13c4:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <serial_send>

000013c8 <rn42_getc>:
    serial_init();
}

int16_t rn42_getc(void)
{
    return serial_recv2();
    13c8:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <serial_recv2>

000013cc <rn42_gets>:
}

const char *rn42_gets(uint16_t timeout)
{
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	ec 01       	movw	r28, r24
    static char s[24];
    uint16_t t = timer_read();
    13d8:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <timer_read>
    13dc:	8c 01       	movw	r16, r24
    uint8_t i = 0;
    13de:	f1 2c       	mov	r15, r1
    int16_t c;
    while (i < 23 && timer_elapsed(t) < timeout) {
    13e0:	c8 01       	movw	r24, r16
    13e2:	0e 94 10 25 	call	0x4a20	; 0x4a20 <timer_elapsed>
    13e6:	8c 17       	cp	r24, r28
    13e8:	9d 07       	cpc	r25, r29
    13ea:	a0 f4       	brcc	.+40     	; 0x1414 <rn42_gets+0x48>
    serial_init();
}

int16_t rn42_getc(void)
{
    return serial_recv2();
    13ec:	0e 94 d5 08 	call	0x11aa	; 0x11aa <serial_recv2>
    13f0:	9c 01       	movw	r18, r24
    static char s[24];
    uint16_t t = timer_read();
    uint8_t i = 0;
    int16_t c;
    while (i < 23 && timer_elapsed(t) < timeout) {
        if ((c = rn42_getc()) != -1) {
    13f2:	2f 3f       	cpi	r18, 0xFF	; 255
    13f4:	8f ef       	ldi	r24, 0xFF	; 255
    13f6:	38 07       	cpc	r19, r24
    13f8:	51 f0       	breq	.+20     	; 0x140e <rn42_gets+0x42>
            if ((char)c == '\r') continue;
    13fa:	2d 30       	cpi	r18, 0x0D	; 13
    13fc:	41 f0       	breq	.+16     	; 0x140e <rn42_gets+0x42>
            if ((char)c == '\n') break;
    13fe:	2a 30       	cpi	r18, 0x0A	; 10
    1400:	49 f0       	breq	.+18     	; 0x1414 <rn42_gets+0x48>
            s[i++] = c;
    1402:	af 2d       	mov	r26, r15
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	a8 54       	subi	r26, 0x48	; 72
    1408:	bd 4f       	sbci	r27, 0xFD	; 253
    140a:	2c 93       	st	X, r18
    140c:	f3 94       	inc	r15
{
    static char s[24];
    uint16_t t = timer_read();
    uint8_t i = 0;
    int16_t c;
    while (i < 23 && timer_elapsed(t) < timeout) {
    140e:	86 e1       	ldi	r24, 0x16	; 22
    1410:	8f 15       	cp	r24, r15
    1412:	30 f7       	brcc	.-52     	; 0x13e0 <rn42_gets+0x14>
            if ((char)c == '\r') continue;
            if ((char)c == '\n') break;
            s[i++] = c;
        }
    }
    s[i] = '\0';
    1414:	ef 2d       	mov	r30, r15
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	e8 54       	subi	r30, 0x48	; 72
    141a:	fd 4f       	sbci	r31, 0xFD	; 253
    141c:	10 82       	st	Z, r1
    return s;
}
    141e:	88 eb       	ldi	r24, 0xB8	; 184
    1420:	92 e0       	ldi	r25, 0x02	; 2
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	ff 90       	pop	r15
    142c:	08 95       	ret

0000142e <rn42_putc>:

void rn42_putc(uint8_t c)
{
    serial_send(c);
    142e:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <serial_send>

00001432 <rn42_autoconnecting>:

bool rn42_autoconnecting(void)
{
    // GPIO6 for control connection(high: auto connect, low: disconnect)
    // Note that this needs config: SM,4(Auto-Connect DTR Mode)
    return (PORTF & (1<<7) ? true : false);
    1432:	81 b3       	in	r24, 0x11	; 17
}
    1434:	88 1f       	adc	r24, r24
    1436:	88 27       	eor	r24, r24
    1438:	88 1f       	adc	r24, r24
    143a:	08 95       	ret

0000143c <rn42_autoconnect>:

void rn42_autoconnect(void)
{
    // hi to auto connect
    DDRF |= (1<<7);
    143c:	87 9a       	sbi	0x10, 7	; 16
    PORTF |= (1<<7);
    143e:	8f 9a       	sbi	0x11, 7	; 17
    1440:	08 95       	ret

00001442 <rn42_init>:


void rn42_init(void)
{
    // JTAG disable for PORT F. write JTD bit twice within four cycles.
    MCUCR |= (1<<JTD);
    1442:	85 b7       	in	r24, 0x35	; 53
    1444:	80 68       	ori	r24, 0x80	; 128
    1446:	85 bf       	out	0x35, r24	; 53
    MCUCR |= (1<<JTD);
    1448:	85 b7       	in	r24, 0x35	; 53
    144a:	80 68       	ori	r24, 0x80	; 128
    144c:	85 bf       	out	0x35, r24	; 53

    // PF7: BT connection control(high: connect, low: disconnect)
    rn42_autoconnect();
    144e:	0e 94 1e 0a 	call	0x143c	; 0x143c <rn42_autoconnect>

    // PF6: linked(input without pull-up)
    DDRF  &= ~(1<<6);
    1452:	86 98       	cbi	0x10, 6	; 16
    PORTF |=  (1<<6);
    1454:	8e 9a       	sbi	0x11, 6	; 17

    // PF1: RTS(low: allowed to send, high: not allowed)
    DDRF &= ~(1<<1);
    1456:	81 98       	cbi	0x10, 1	; 16
    PORTF &= ~(1<<1);
    1458:	89 98       	cbi	0x11, 1	; 17

    // PD5: CTS(low: allow to send, high:not allow)
    DDRD |= (1<<5);
    145a:	55 9a       	sbi	0x0a, 5	; 10
    PORTD &= ~(1<<5);
    145c:	5d 98       	cbi	0x0b, 5	; 11

    serial_init();
    145e:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <serial_init>

00001462 <rn42_disconnect>:
}

void rn42_disconnect(void)
{
    // low to disconnect
    DDRF |= (1<<7);
    1462:	87 9a       	sbi	0x10, 7	; 16
    PORTF &= ~(1<<7);
    1464:	8f 98       	cbi	0x11, 7	; 17
    1466:	08 95       	ret

00001468 <rn42_rts>:
}

bool rn42_rts(void)
{
    // low when RN-42 is powered and ready to receive
    return PINF&(1<<1);
    1468:	8f b1       	in	r24, 0x0f	; 15
}
    146a:	86 95       	lsr	r24
    146c:	81 70       	andi	r24, 0x01	; 1
    146e:	08 95       	ret

00001470 <rn42_linked>:
{
    // RN-42 GPIO2
    //   Hi-Z:  Not powered
    //   High:  Linked
    //   Low:   Connecting
    return PINF&(1<<6);
    1470:	8f b1       	in	r24, 0x0f	; 15
}
    1472:	86 fb       	bst	r24, 6
    1474:	88 27       	eor	r24, r24
    1476:	80 f9       	bld	r24, 0
    1478:	08 95       	ret

0000147a <rn42_set_leds>:


static uint8_t leds = 0;
static uint8_t keyboard_leds(void) { return leds; }
void rn42_set_leds(uint8_t l) { leds = l; }
    147a:	80 93 d0 02 	sts	0x02D0, r24
    147e:	08 95       	ret

00001480 <rn42_send_str>:


void rn42_send_str(const char *str)
{
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	fc 01       	movw	r30, r24
    uint8_t c;
    while ((c = pgm_read_byte(str++)))
    1486:	84 91       	lpm	r24, Z
    1488:	ef 01       	movw	r28, r30
    148a:	21 96       	adiw	r28, 0x01	; 1
    148c:	88 23       	and	r24, r24
    148e:	21 f0       	breq	.+8      	; 0x1498 <rn42_send_str+0x18>
    return s;
}

void rn42_putc(uint8_t c)
{
    serial_send(c);
    1490:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <serial_send>
    1494:	fe 01       	movw	r30, r28
    1496:	f7 cf       	rjmp	.-18     	; 0x1486 <rn42_send_str+0x6>
void rn42_send_str(const char *str)
{
    uint8_t c;
    while ((c = pgm_read_byte(str++)))
        rn42_putc(c);
}
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	08 95       	ret

0000149e <rn42_print_response>:
    rn42_print_response();
    return s;
}

void rn42_print_response(void)
{
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    int16_t c;
    while ((c = rn42_getc()) != -1) {
        xprintf("%c", c);
    14a2:	c4 ef       	ldi	r28, 0xF4	; 244
    14a4:	d1 e0       	ldi	r29, 0x01	; 1
    serial_init();
}

int16_t rn42_getc(void)
{
    return serial_recv2();
    14a6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <serial_recv2>
}

void rn42_print_response(void)
{
    int16_t c;
    while ((c = rn42_getc()) != -1) {
    14aa:	8f 3f       	cpi	r24, 0xFF	; 255
    14ac:	2f ef       	ldi	r18, 0xFF	; 255
    14ae:	92 07       	cpc	r25, r18
    14b0:	59 f0       	breq	.+22     	; 0x14c8 <rn42_print_response+0x2a>
        xprintf("%c", c);
    14b2:	9f 93       	push	r25
    14b4:	8f 93       	push	r24
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	ef cf       	rjmp	.-34     	; 0x14a6 <rn42_print_response+0x8>
    }
}
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <rn42_send_command>:
}

const char *rn42_send_command(const char *cmd)
{
    static const char *s;
    rn42_send_str(cmd);
    14ce:	0e 94 40 0a 	call	0x1480	; 0x1480 <rn42_send_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14d2:	2f ef       	ldi	r18, 0xFF	; 255
    14d4:	89 e6       	ldi	r24, 0x69	; 105
    14d6:	98 e1       	ldi	r25, 0x18	; 24
    14d8:	21 50       	subi	r18, 0x01	; 1
    14da:	80 40       	sbci	r24, 0x00	; 0
    14dc:	90 40       	sbci	r25, 0x00	; 0
    14de:	e1 f7       	brne	.-8      	; 0x14d8 <rn42_send_command+0xa>
    14e0:	00 c0       	rjmp	.+0      	; 0x14e2 <rn42_send_command+0x14>
    14e2:	00 00       	nop
    wait_ms(500);
    s = rn42_gets(100);
    14e4:	84 e6       	ldi	r24, 0x64	; 100
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <rn42_gets>
    14ec:	80 93 b6 02 	sts	0x02B6, r24
    14f0:	90 93 b7 02 	sts	0x02B7, r25
    xprintf("%s\r\n", s);
    14f4:	9f 93       	push	r25
    14f6:	8f 93       	push	r24
    14f8:	87 ef       	ldi	r24, 0xF7	; 247
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	9f 93       	push	r25
    14fe:	8f 93       	push	r24
    1500:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    rn42_print_response();
    1504:	0e 94 4f 0a 	call	0x149e	; 0x149e <rn42_print_response>
    return s;
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
}
    1510:	80 91 b6 02 	lds	r24, 0x02B6
    1514:	90 91 b7 02 	lds	r25, 0x02B7
    1518:	08 95       	ret

0000151a <enter_command_mode>:
 ******************************************************************************/
static host_driver_t *prev_driver = &rn42_driver;

static void enter_command_mode(void)
{
    prev_driver = host_get_driver();
    151a:	0e 94 15 18 	call	0x302a	; 0x302a <host_get_driver>
    151e:	90 93 15 01 	sts	0x0115, r25
    1522:	80 93 14 01 	sts	0x0114, r24
    clear_keyboard();
    1526:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <clear_keyboard>
    host_set_driver(&rn42_config_driver);   // null driver; not to send a key to host
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	0e 94 10 18 	call	0x3020	; 0x3020 <host_set_driver>
    rn42_disconnect();
    1532:	0e 94 31 0a 	call	0x1462	; 0x1462 <rn42_disconnect>
    while (rn42_linked()) ;
    1536:	0e 94 38 0a 	call	0x1470	; 0x1470 <rn42_linked>
    153a:	81 11       	cpse	r24, r1
    153c:	fc cf       	rjmp	.-8      	; 0x1536 <enter_command_mode+0x1c>

    print("Entering config mode ...\n");
    153e:	8f e7       	ldi	r24, 0x7F	; 127
    1540:	92 e0       	ldi	r25, 0x02	; 2
    1542:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    1546:	2f ef       	ldi	r18, 0xFF	; 255
    1548:	85 eb       	ldi	r24, 0xB5	; 181
    154a:	95 e3       	ldi	r25, 0x35	; 53
    154c:	21 50       	subi	r18, 0x01	; 1
    154e:	80 40       	sbci	r24, 0x00	; 0
    1550:	90 40       	sbci	r25, 0x00	; 0
    1552:	e1 f7       	brne	.-8      	; 0x154c <enter_command_mode+0x32>
    1554:	00 c0       	rjmp	.+0      	; 0x1556 <enter_command_mode+0x3c>
    1556:	00 00       	nop
    wait_ms(1100);          // need 1 sec
    SEND_COMMAND("$$$");
    1558:	8b e7       	ldi	r24, 0x7B	; 123
    155a:	92 e0       	ldi	r25, 0x02	; 2
    155c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>
    1560:	ef ef       	ldi	r30, 0xFF	; 255
    1562:	fb e4       	ldi	r31, 0x4B	; 75
    1564:	2d e1       	ldi	r18, 0x1D	; 29
    1566:	e1 50       	subi	r30, 0x01	; 1
    1568:	f0 40       	sbci	r31, 0x00	; 0
    156a:	20 40       	sbci	r18, 0x00	; 0
    156c:	e1 f7       	brne	.-8      	; 0x1566 <enter_command_mode+0x4c>
    156e:	00 c0       	rjmp	.+0      	; 0x1570 <enter_command_mode+0x56>
    1570:	00 00       	nop
    wait_ms(600);           // need 1 sec
    rn42_print_response();
    1572:	0e 94 4f 0a 	call	0x149e	; 0x149e <rn42_print_response>
    const char *s = SEND_COMMAND("v\r\n");
    1576:	87 e7       	ldi	r24, 0x77	; 119
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>
    if (strncmp("v", s, 1) != 0) SEND_COMMAND("+\r\n"); // local echo on
    157e:	fc 01       	movw	r30, r24
    1580:	80 81       	ld	r24, Z
    1582:	86 37       	cpi	r24, 0x76	; 118
    1584:	21 f0       	breq	.+8      	; 0x158e <enter_command_mode+0x74>
    1586:	83 e7       	ldi	r24, 0x73	; 115
    1588:	92 e0       	ldi	r25, 0x02	; 2
    158a:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <rn42_send_command>
    158e:	08 95       	ret

00001590 <exit_command_mode>:
}

static void exit_command_mode(void)
{
    print("Exiting config mode ...\n");
    1590:	8a e5       	ldi	r24, 0x5A	; 90
    1592:	92 e0       	ldi	r25, 0x02	; 2
    1594:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    SEND_COMMAND("---\r\n");    // exit
    1598:	84 e5       	ldi	r24, 0x54	; 84
    159a:	92 e0       	ldi	r25, 0x02	; 2
    159c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>

    rn42_autoconnect();
    15a0:	0e 94 1e 0a 	call	0x143c	; 0x143c <rn42_autoconnect>
    clear_keyboard();
    15a4:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <clear_keyboard>
    host_set_driver(prev_driver);
    15a8:	80 91 14 01 	lds	r24, 0x0114
    15ac:	90 91 15 01 	lds	r25, 0x0115
    15b0:	0c 94 10 18 	jmp	0x3020	; 0x3020 <host_set_driver>

000015b4 <rn42_task_init>:
    }
}

void rn42_task_init(void)
{
    battery_init();
    15b4:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <battery_init>

000015b8 <rn42_task>:
}

void rn42_task(void)
{
    15b8:	8f 92       	push	r8
    15ba:	9f 92       	push	r9
    15bc:	af 92       	push	r10
    15be:	bf 92       	push	r11
    15c0:	cf 92       	push	r12
    15c2:	df 92       	push	r13
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
                    if (0x0 <= c && c <= 0x7f) xprintf("%c", c);
                    else xprintf(" %02X", c);
                }
                break;
            case LED_FE:
                if (c == 0x02) state = LED_02;
    15d0:	92 e0       	ldi	r25, 0x02	; 2
    15d2:	b9 2e       	mov	r11, r25
        switch (state) {
            case LED_INIT:
                if (c == 0xFE) state = LED_FE;
                else {
                    if (0x0 <= c && c <= 0x7f) xprintf("%c", c);
                    else xprintf(" %02X", c);
    15d4:	c5 ea       	ldi	r28, 0xA5	; 165
    15d6:	d4 e0       	ldi	r29, 0x04	; 4
        static enum {LED_INIT, LED_FE, LED_02, LED_01} state = LED_INIT;
        switch (state) {
            case LED_INIT:
                if (c == 0xFE) state = LED_FE;
                else {
                    if (0x0 <= c && c <= 0x7f) xprintf("%c", c);
    15d8:	0b ea       	ldi	r16, 0xAB	; 171
    15da:	14 e0       	ldi	r17, 0x04	; 4
        // LED Out report: 0xFE, 0x02, 0x01, <leds>
        // To get the report over UART set bit3 with SH, command.
        static enum {LED_INIT, LED_FE, LED_02, LED_01} state = LED_INIT;
        switch (state) {
            case LED_INIT:
                if (c == 0xFE) state = LED_FE;
    15dc:	aa 24       	eor	r10, r10
    15de:	a3 94       	inc	r10
            case LED_FE:
                if (c == 0x02) state = LED_02;
                else           state = LED_INIT;
                break;
            case LED_02:
                if (c == 0x01) state = LED_01;
    15e0:	23 e0       	ldi	r18, 0x03	; 3
    15e2:	92 2e       	mov	r9, r18
                else           state = LED_INIT;
                break;
            case LED_01:
                dprintf("LED status: %02X\n", c);
    15e4:	33 e9       	ldi	r19, 0x93	; 147
    15e6:	c3 2e       	mov	r12, r19
    15e8:	34 e0       	ldi	r19, 0x04	; 4
    15ea:	d3 2e       	mov	r13, r19

void rn42_task(void)
{
    int16_t c;
    // Raw mode: interpret output report of LED state
    while ((c = rn42_getc()) != -1) {
    15ec:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <rn42_getc>
    15f0:	7c 01       	movw	r14, r24
    15f2:	8f 3f       	cpi	r24, 0xFF	; 255
    15f4:	2f ef       	ldi	r18, 0xFF	; 255
    15f6:	92 07       	cpc	r25, r18
    15f8:	09 f4       	brne	.+2      	; 0x15fc <rn42_task+0x44>
    15fa:	46 c0       	rjmp	.+140    	; 0x1688 <rn42_task+0xd0>
        // LED Out report: 0xFE, 0x02, 0x01, <leds>
        // To get the report over UART set bit3 with SH, command.
        static enum {LED_INIT, LED_FE, LED_02, LED_01} state = LED_INIT;
        switch (state) {
    15fc:	80 91 d3 02 	lds	r24, 0x02D3
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	09 f1       	breq	.+66     	; 0x1646 <rn42_task+0x8e>
    1604:	28 f0       	brcs	.+10     	; 0x1610 <rn42_task+0x58>
    1606:	82 30       	cpi	r24, 0x02	; 2
    1608:	29 f1       	breq	.+74     	; 0x1654 <rn42_task+0x9c>
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	49 f1       	breq	.+82     	; 0x1660 <rn42_task+0xa8>
    160e:	39 c0       	rjmp	.+114    	; 0x1682 <rn42_task+0xca>
            case LED_INIT:
                if (c == 0xFE) state = LED_FE;
    1610:	8e ef       	ldi	r24, 0xFE	; 254
    1612:	e8 16       	cp	r14, r24
    1614:	f1 04       	cpc	r15, r1
    1616:	19 f4       	brne	.+6      	; 0x161e <rn42_task+0x66>
    1618:	a0 92 d3 02 	sts	0x02D3, r10
    161c:	e7 cf       	rjmp	.-50     	; 0x15ec <rn42_task+0x34>
                else {
                    if (0x0 <= c && c <= 0x7f) xprintf("%c", c);
    161e:	90 e8       	ldi	r25, 0x80	; 128
    1620:	e9 16       	cp	r14, r25
    1622:	f1 04       	cpc	r15, r1
    1624:	28 f4       	brcc	.+10     	; 0x1630 <rn42_task+0x78>
    1626:	ff 92       	push	r15
    1628:	ef 92       	push	r14
    162a:	1f 93       	push	r17
    162c:	0f 93       	push	r16
    162e:	04 c0       	rjmp	.+8      	; 0x1638 <rn42_task+0x80>
                    else xprintf(" %02X", c);
    1630:	ff 92       	push	r15
    1632:	ef 92       	push	r14
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	d3 cf       	rjmp	.-90     	; 0x15ec <rn42_task+0x34>
                }
                break;
            case LED_FE:
                if (c == 0x02) state = LED_02;
    1646:	92 e0       	ldi	r25, 0x02	; 2
    1648:	e9 16       	cp	r14, r25
    164a:	f1 04       	cpc	r15, r1
    164c:	d1 f4       	brne	.+52     	; 0x1682 <rn42_task+0xca>
    164e:	b0 92 d3 02 	sts	0x02D3, r11
    1652:	cc cf       	rjmp	.-104    	; 0x15ec <rn42_task+0x34>
                else           state = LED_INIT;
                break;
            case LED_02:
                if (c == 0x01) state = LED_01;
    1654:	ea 94       	dec	r14
    1656:	ef 28       	or	r14, r15
    1658:	a1 f4       	brne	.+40     	; 0x1682 <rn42_task+0xca>
    165a:	90 92 d3 02 	sts	0x02D3, r9
    165e:	c6 cf       	rjmp	.-116    	; 0x15ec <rn42_task+0x34>
                else           state = LED_INIT;
                break;
            case LED_01:
                dprintf("LED status: %02X\n", c);
    1660:	80 91 41 03 	lds	r24, 0x0341
    1664:	80 ff       	sbrs	r24, 0
    1666:	0a c0       	rjmp	.+20     	; 0x167c <rn42_task+0xc4>
    1668:	ff 92       	push	r15
    166a:	ef 92       	push	r14
    166c:	df 92       	push	r13
    166e:	cf 92       	push	r12
    1670:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
                rn42_set_leds(c);
    167c:	8e 2d       	mov	r24, r14
    167e:	0e 94 3d 0a 	call	0x147a	; 0x147a <rn42_set_leds>
                state = LED_INIT;
                break;
            default:
                state = LED_INIT;
    1682:	10 92 d3 02 	sts	0x02D3, r1
    1686:	b2 cf       	rjmp	.-156    	; 0x15ec <rn42_task+0x34>
        }
    }

    /* Bluetooth mode when ready */
    if (!config_mode && !force_usb) {
    1688:	80 91 d5 02 	lds	r24, 0x02D5
    168c:	81 11       	cpse	r24, r1
    168e:	21 c0       	rjmp	.+66     	; 0x16d2 <rn42_task+0x11a>
    1690:	80 91 d4 02 	lds	r24, 0x02D4
    1694:	81 11       	cpse	r24, r1
    1696:	1d c0       	rjmp	.+58     	; 0x16d2 <rn42_task+0x11a>
        if (!rn42_rts() && host_get_driver() != &rn42_driver) {
    1698:	0e 94 34 0a 	call	0x1468	; 0x1468 <rn42_rts>
    169c:	81 11       	cpse	r24, r1
    169e:	0a c0       	rjmp	.+20     	; 0x16b4 <rn42_task+0xfc>
    16a0:	0e 94 15 18 	call	0x302a	; 0x302a <host_get_driver>
    16a4:	8a 50       	subi	r24, 0x0A	; 10
    16a6:	91 40       	sbci	r25, 0x01	; 1
    16a8:	29 f0       	breq	.+10     	; 0x16b4 <rn42_task+0xfc>
            clear_keyboard();
    16aa:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <clear_keyboard>
            host_set_driver(&rn42_driver);
    16ae:	8a e0       	ldi	r24, 0x0A	; 10
    16b0:	91 e0       	ldi	r25, 0x01	; 1
    16b2:	0d c0       	rjmp	.+26     	; 0x16ce <rn42_task+0x116>
        } else if (rn42_rts() && host_get_driver() != &lufa_driver) {
    16b4:	0e 94 34 0a 	call	0x1468	; 0x1468 <rn42_rts>
    16b8:	88 23       	and	r24, r24
    16ba:	59 f0       	breq	.+22     	; 0x16d2 <rn42_task+0x11a>
    16bc:	0e 94 15 18 	call	0x302a	; 0x302a <host_get_driver>
    16c0:	86 51       	subi	r24, 0x16	; 22
    16c2:	91 40       	sbci	r25, 0x01	; 1
    16c4:	31 f0       	breq	.+12     	; 0x16d2 <rn42_task+0x11a>
            clear_keyboard();
    16c6:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <clear_keyboard>
            host_set_driver(&lufa_driver);
    16ca:	86 e1       	ldi	r24, 0x16	; 22
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	0e 94 10 18 	call	0x3020	; 0x3020 <host_set_driver>
        }
    }


    static uint16_t prev_timer = 0;
    uint16_t e = timer_elapsed(prev_timer);
    16d2:	80 91 d1 02 	lds	r24, 0x02D1
    16d6:	90 91 d2 02 	lds	r25, 0x02D2
    16da:	0e 94 10 25 	call	0x4a20	; 0x4a20 <timer_elapsed>
    if (e > 1000) {
    16de:	89 3e       	cpi	r24, 0xE9	; 233
    16e0:	23 e0       	ldi	r18, 0x03	; 3
    16e2:	92 07       	cpc	r25, r18
    16e4:	08 f4       	brcc	.+2      	; 0x16e8 <rn42_task+0x130>
    16e6:	61 c0       	rjmp	.+194    	; 0x17aa <rn42_task+0x1f2>
        /* every second */
        prev_timer += e/1000*1000;
    16e8:	28 ee       	ldi	r18, 0xE8	; 232
    16ea:	33 e0       	ldi	r19, 0x03	; 3
    16ec:	b9 01       	movw	r22, r18
    16ee:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <__udivmodhi4>
    16f2:	62 9f       	mul	r22, r18
    16f4:	a0 01       	movw	r20, r0
    16f6:	63 9f       	mul	r22, r19
    16f8:	50 0d       	add	r21, r0
    16fa:	72 9f       	mul	r23, r18
    16fc:	50 0d       	add	r21, r0
    16fe:	11 24       	eor	r1, r1
    1700:	80 91 d1 02 	lds	r24, 0x02D1
    1704:	90 91 d2 02 	lds	r25, 0x02D2
    1708:	84 0f       	add	r24, r20
    170a:	95 1f       	adc	r25, r21
    170c:	90 93 d2 02 	sts	0x02D2, r25
    1710:	80 93 d1 02 	sts	0x02D1, r24

        /* Low voltage alert */
        uint8_t bs = battery_status();
    1714:	0e 94 3d 10 	call	0x207a	; 0x207a <battery_status>
        if (bs == LOW_VOLTAGE) {
    1718:	83 30       	cpi	r24, 0x03	; 3
    171a:	11 f4       	brne	.+4      	; 0x1720 <rn42_task+0x168>
            battery_led(LED_ON);
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <rn42_task+0x16a>
        } else {
            battery_led(LED_CHARGER);
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <battery_led>
        }

        /* every minute */
        uint32_t t = timer_read32()/1000;
    1726:	0e 94 04 25 	call	0x4a08	; 0x4a08 <timer_read32>
    172a:	28 ee       	ldi	r18, 0xE8	; 232
    172c:	33 e0       	ldi	r19, 0x03	; 3
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__udivmodsi4>
    1736:	49 01       	movw	r8, r18
    1738:	5a 01       	movw	r10, r20
        if (t%60 == 0) {
    173a:	8c e3       	ldi	r24, 0x3C	; 60
    173c:	c8 2e       	mov	r12, r24
    173e:	d1 2c       	mov	r13, r1
    1740:	e1 2c       	mov	r14, r1
    1742:	f1 2c       	mov	r15, r1
    1744:	ca 01       	movw	r24, r20
    1746:	b9 01       	movw	r22, r18
    1748:	a7 01       	movw	r20, r14
    174a:	96 01       	movw	r18, r12
    174c:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__udivmodsi4>
    1750:	67 2b       	or	r22, r23
    1752:	68 2b       	or	r22, r24
    1754:	69 2b       	or	r22, r25
    1756:	49 f5       	brne	.+82     	; 0x17aa <rn42_task+0x1f2>
            uint16_t v = battery_voltage();
    1758:	0e 94 06 10 	call	0x200c	; 0x200c <battery_voltage>
            uint8_t h = t/3600;
            uint8_t m = t%3600/60;
            uint8_t s = t%60;
            dprintf("%02u:%02u:%02u\t%umV\n", h, m, s, v);
    175c:	20 91 41 03 	lds	r18, 0x0341
    1760:	20 ff       	sbrs	r18, 0
    1762:	23 c0       	rjmp	.+70     	; 0x17aa <rn42_task+0x1f2>
    1764:	9f 93       	push	r25
    1766:	8f 93       	push	r24
    1768:	1f 92       	push	r1
    176a:	1f 92       	push	r1
        /* every minute */
        uint32_t t = timer_read32()/1000;
        if (t%60 == 0) {
            uint16_t v = battery_voltage();
            uint8_t h = t/3600;
            uint8_t m = t%3600/60;
    176c:	c5 01       	movw	r24, r10
    176e:	b4 01       	movw	r22, r8
    1770:	20 e1       	ldi	r18, 0x10	; 16
    1772:	3e e0       	ldi	r19, 0x0E	; 14
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__udivmodsi4>
    177c:	c2 2f       	mov	r28, r18
    177e:	a7 01       	movw	r20, r14
    1780:	96 01       	movw	r18, r12
    1782:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__udivmodsi4>
            uint8_t s = t%60;
            dprintf("%02u:%02u:%02u\t%umV\n", h, m, s, v);
    1786:	3f 93       	push	r19
    1788:	2f 93       	push	r18
    178a:	1f 92       	push	r1
    178c:	cf 93       	push	r28
    178e:	8e e7       	ldi	r24, 0x7E	; 126
    1790:	94 e0       	ldi	r25, 0x04	; 4
    1792:	9f 93       	push	r25
    1794:	8f 93       	push	r24
    1796:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    179a:	8d b7       	in	r24, 0x3d	; 61
    179c:	9e b7       	in	r25, 0x3e	; 62
    179e:	0a 96       	adiw	r24, 0x0a	; 10
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	9e bf       	out	0x3e, r25	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	8d bf       	out	0x3d, r24	; 61
        }
    }


    /* Connection monitor */
    if (!rn42_rts() && rn42_linked()) {
    17aa:	0e 94 34 0a 	call	0x1468	; 0x1468 <rn42_rts>
    17ae:	81 11       	cpse	r24, r1
    17b0:	07 c0       	rjmp	.+14     	; 0x17c0 <rn42_task+0x208>
    17b2:	0e 94 38 0a 	call	0x1470	; 0x1470 <rn42_linked>
    17b6:	88 23       	and	r24, r24
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <rn42_task+0x208>
static bool force_usb = false;

static void status_led(bool on)
{
    if (on) {
        DDRE  |=  (1<<6);
    17ba:	6e 9a       	sbi	0x0d, 6	; 13
        PORTE &= ~(1<<6);
    17bc:	76 98       	cbi	0x0e, 6	; 14
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <rn42_task+0x20c>
    } else {
        DDRE  |=  (1<<6);
    17c0:	6e 9a       	sbi	0x0d, 6	; 13
        PORTE |=  (1<<6);
    17c2:	76 9a       	sbi	0x0e, 6	; 14
    if (!rn42_rts() && rn42_linked()) {
        status_led(true);
    } else {
        status_led(false);
    }
}
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	df 90       	pop	r13
    17d2:	cf 90       	pop	r12
    17d4:	bf 90       	pop	r11
    17d6:	af 90       	pop	r10
    17d8:	9f 90       	pop	r9
    17da:	8f 90       	pop	r8
    17dc:	08 95       	ret

000017de <command_extra>:
    SEND_COMMAND("R,1\r\n");    // reboot
    exit_command_mode();
}

bool command_extra(uint8_t code)
{
    17de:	8f 92       	push	r8
    17e0:	9f 92       	push	r9
    17e2:	af 92       	push	r10
    17e4:	bf 92       	push	r11
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <command_extra+0x18>
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <command_extra+0x1a>
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    uint32_t t;
    uint16_t b;
    switch (code) {
    17fc:	83 31       	cpi	r24, 0x13	; 19
    17fe:	09 f4       	brne	.+2      	; 0x1802 <command_extra+0x24>
    1800:	8c c0       	rjmp	.+280    	; 0x191a <command_extra+0x13c>
    1802:	08 f0       	brcs	.+2      	; 0x1806 <command_extra+0x28>
    1804:	5b c0       	rjmp	.+182    	; 0x18bc <command_extra+0xde>
    1806:	8b 30       	cpi	r24, 0x0B	; 11
    1808:	09 f4       	brne	.+2      	; 0x180c <command_extra+0x2e>
    180a:	66 c0       	rjmp	.+204    	; 0x18d8 <command_extra+0xfa>
    180c:	8c 30       	cpi	r24, 0x0C	; 12
    180e:	09 f4       	brne	.+2      	; 0x1812 <command_extra+0x34>
    1810:	8f c0       	rjmp	.+286    	; 0x1930 <command_extra+0x152>
    1812:	85 30       	cpi	r24, 0x05	; 5
    1814:	09 f0       	breq	.+2      	; 0x1818 <command_extra+0x3a>
    1816:	fc c1       	rjmp	.+1016   	; 0x1c10 <command_extra+0x432>
            xprintf("LINK3: %s\r\n", get_link(RN42_LINK3));
#endif
            return true;
        case KC_B:
            // battery monitor
            t = timer_read32()/1000;
    1818:	0e 94 04 25 	call	0x4a08	; 0x4a08 <timer_read32>
    181c:	28 ee       	ldi	r18, 0xE8	; 232
    181e:	33 e0       	ldi	r19, 0x03	; 3
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__udivmodsi4>
    1828:	49 01       	movw	r8, r18
    182a:	5a 01       	movw	r10, r20
            b = battery_voltage();
    182c:	0e 94 06 10 	call	0x200c	; 0x200c <battery_voltage>
            xprintf("BAT: %umV\t", b);
    1830:	9f 93       	push	r25
    1832:	8f 93       	push	r24
    1834:	8d ec       	ldi	r24, 0xCD	; 205
    1836:	92 e0       	ldi	r25, 0x02	; 2
    1838:	9f 93       	push	r25
    183a:	8f 93       	push	r24
    183c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            xprintf("%02u:",   t/3600);
    1840:	c5 01       	movw	r24, r10
    1842:	b4 01       	movw	r22, r8
    1844:	20 e1       	ldi	r18, 0x10	; 16
    1846:	3e e0       	ldi	r19, 0x0E	; 14
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__udivmodsi4>
    1850:	5f 93       	push	r21
    1852:	4f 93       	push	r20
    1854:	3f 93       	push	r19
    1856:	2f 93       	push	r18
    1858:	27 ec       	ldi	r18, 0xC7	; 199
    185a:	32 e0       	ldi	r19, 0x02	; 2
    185c:	3f 93       	push	r19
    185e:	2f 93       	push	r18
    1860:	69 83       	std	Y+1, r22	; 0x01
    1862:	7a 83       	std	Y+2, r23	; 0x02
    1864:	8c 83       	std	Y+4, r24	; 0x04
    1866:	9b 83       	std	Y+3, r25	; 0x03
    1868:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            xprintf("%02u:",   t%3600/60);
    186c:	4c e3       	ldi	r20, 0x3C	; 60
    186e:	c4 2e       	mov	r12, r20
    1870:	d1 2c       	mov	r13, r1
    1872:	e1 2c       	mov	r14, r1
    1874:	f1 2c       	mov	r15, r1
    1876:	69 81       	ldd	r22, Y+1	; 0x01
    1878:	7a 81       	ldd	r23, Y+2	; 0x02
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	9b 81       	ldd	r25, Y+3	; 0x03
    187e:	a7 01       	movw	r20, r14
    1880:	96 01       	movw	r18, r12
    1882:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__udivmodsi4>
    1886:	5f 93       	push	r21
    1888:	4f 93       	push	r20
    188a:	3f 93       	push	r19
    188c:	2f 93       	push	r18
    188e:	81 ec       	ldi	r24, 0xC1	; 193
    1890:	92 e0       	ldi	r25, 0x02	; 2
    1892:	9f 93       	push	r25
    1894:	8f 93       	push	r24
    1896:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            xprintf("%02u\n",  t%60);
    189a:	c5 01       	movw	r24, r10
    189c:	b4 01       	movw	r22, r8
    189e:	a7 01       	movw	r20, r14
    18a0:	96 01       	movw	r18, r12
    18a2:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__udivmodsi4>
    18a6:	9f 93       	push	r25
    18a8:	8f 93       	push	r24
    18aa:	7f 93       	push	r23
    18ac:	6f 93       	push	r22
    18ae:	8b eb       	ldi	r24, 0xBB	; 187
    18b0:	92 e0       	ldi	r25, 0x02	; 2
    18b2:	9f 93       	push	r25
    18b4:	8f 93       	push	r24
    18b6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    18ba:	40 c1       	rjmp	.+640    	; 0x1b3c <command_extra+0x35e>

bool command_extra(uint8_t code)
{
    uint32_t t;
    uint16_t b;
    switch (code) {
    18bc:	88 33       	cpi	r24, 0x38	; 56
    18be:	61 f0       	breq	.+24     	; 0x18d8 <command_extra+0xfa>
    18c0:	20 f4       	brcc	.+8      	; 0x18ca <command_extra+0xec>
    18c2:	88 31       	cpi	r24, 0x18	; 24
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <command_extra+0xea>
    18c6:	40 c1       	rjmp	.+640    	; 0x1b48 <command_extra+0x36a>
    18c8:	a3 c1       	rjmp	.+838    	; 0x1c10 <command_extra+0x432>
    18ca:	87 34       	cpi	r24, 0x47	; 71
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <command_extra+0xf2>
    18ce:	6e c1       	rjmp	.+732    	; 0x1bac <command_extra+0x3ce>
    18d0:	8c 34       	cpi	r24, 0x4C	; 76
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <command_extra+0xf8>
    18d4:	56 c1       	rjmp	.+684    	; 0x1b82 <command_extra+0x3a4>
    18d6:	9c c1       	rjmp	.+824    	; 0x1c10 <command_extra+0x432>
        case KC_H:
        case KC_SLASH: /* ? */
            print("\n\n----- Bluetooth RN-42 Help -----\n");
    18d8:	8a e5       	ldi	r24, 0x5A	; 90
    18da:	94 e0       	ldi	r25, 0x04	; 4
    18dc:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            print("i:       RN-42 info\n");
    18e0:	85 e4       	ldi	r24, 0x45	; 69
    18e2:	94 e0       	ldi	r25, 0x04	; 4
    18e4:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            print("b:       battery voltage\n");
    18e8:	8b e2       	ldi	r24, 0x2B	; 43
    18ea:	94 e0       	ldi	r25, 0x04	; 4
    18ec:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            print("Del:     enter/exit RN-42 config mode\n");
    18f0:	84 e0       	ldi	r24, 0x04	; 4
    18f2:	94 e0       	ldi	r25, 0x04	; 4
    18f4:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            print("Slck:    RN-42 initialize\n");
    18f8:	89 ee       	ldi	r24, 0xE9	; 233
    18fa:	93 e0       	ldi	r25, 0x03	; 3
    18fc:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
#if 0
            print("1-4:     restore link\n");
            print("F1-F4:   store link\n");
#endif
            print("p:       pairing\n");
    1900:	87 ed       	ldi	r24, 0xD7	; 215
    1902:	93 e0       	ldi	r25, 0x03	; 3
    1904:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>

            if (config_mode) {
    1908:	80 91 d5 02 	lds	r24, 0x02D5
    190c:	81 11       	cpse	r24, r1
    190e:	7e c1       	rjmp	.+764    	; 0x1c0c <command_extra+0x42e>
                return true;
            } else {
                print("u:       toggle Force USB mode\n");
    1910:	87 eb       	ldi	r24, 0xB7	; 183
    1912:	93 e0       	ldi	r25, 0x03	; 3
    1914:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    1918:	7e c1       	rjmp	.+764    	; 0x1c16 <command_extra+0x438>
}
#endif

static void pairing(void)
{
    enter_command_mode();
    191a:	0e 94 8d 0a 	call	0x151a	; 0x151a <enter_command_mode>
    SEND_COMMAND("SR,Z\r\n");   // remove remote address
    191e:	8f e9       	ldi	r24, 0x9F	; 159
    1920:	92 e0       	ldi	r25, 0x02	; 2
    1922:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>
    SEND_COMMAND("R,1\r\n");    // reboot
    1926:	89 e9       	ldi	r24, 0x99	; 153
    1928:	92 e0       	ldi	r25, 0x02	; 2
    192a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>
    192e:	6c c1       	rjmp	.+728    	; 0x1c08 <command_extra+0x42a>
        case KC_4:
            restore_link(RN42_LINK3);
            return true;
#endif
        case KC_I:
            print("\n----- RN-42 info -----\n");
    1930:	8e e9       	ldi	r24, 0x9E	; 158
    1932:	93 e0       	ldi	r25, 0x03	; 3
    1934:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            xprintf("protocol: %s\n", (host_get_driver() == &rn42_driver) ? "RN-42" : "LUFA");
    1938:	0e 94 15 18 	call	0x302a	; 0x302a <host_get_driver>
    193c:	8a 50       	subi	r24, 0x0A	; 10
    193e:	91 40       	sbci	r25, 0x01	; 1
    1940:	19 f4       	brne	.+6      	; 0x1948 <command_extra+0x16a>
    1942:	89 e2       	ldi	r24, 0x29	; 41
    1944:	91 e0       	ldi	r25, 0x01	; 1
    1946:	02 c0       	rjmp	.+4      	; 0x194c <command_extra+0x16e>
    1948:	8f e2       	ldi	r24, 0x2F	; 47
    194a:	91 e0       	ldi	r25, 0x01	; 1
    194c:	9f 93       	push	r25
    194e:	8f 93       	push	r24
    1950:	80 e9       	ldi	r24, 0x90	; 144
    1952:	93 e0       	ldi	r25, 0x03	; 3
    1954:	9f 93       	push	r25
    1956:	8f 93       	push	r24
    1958:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            xprintf("force_usb: %X\n", force_usb);
    195c:	80 91 d4 02 	lds	r24, 0x02D4
    1960:	1f 92       	push	r1
    1962:	8f 93       	push	r24
    1964:	81 e8       	ldi	r24, 0x81	; 129
    1966:	93 e0       	ldi	r25, 0x03	; 3
    1968:	9f 93       	push	r25
    196a:	8f 93       	push	r24
    196c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            xprintf("rn42: %s\n", rn42_rts() ? "OFF" : (rn42_linked() ? "CONN" : "ON"));
    1970:	0e 94 34 0a 	call	0x1468	; 0x1468 <rn42_rts>
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	81 11       	cpse	r24, r1
    1980:	07 c0       	rjmp	.+14     	; 0x1990 <command_extra+0x1b2>
    1982:	0e 94 38 0a 	call	0x1470	; 0x1470 <rn42_linked>
    1986:	88 23       	and	r24, r24
    1988:	31 f0       	breq	.+12     	; 0x1996 <command_extra+0x1b8>
    198a:	8b e3       	ldi	r24, 0x3B	; 59
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	05 c0       	rjmp	.+10     	; 0x199a <command_extra+0x1bc>
    1990:	84 e3       	ldi	r24, 0x34	; 52
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	02 c0       	rjmp	.+4      	; 0x199a <command_extra+0x1bc>
    1996:	88 e3       	ldi	r24, 0x38	; 56
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	9f 93       	push	r25
    199c:	8f 93       	push	r24
    199e:	87 e7       	ldi	r24, 0x77	; 119
    19a0:	93 e0       	ldi	r25, 0x03	; 3
    19a2:	9f 93       	push	r25
    19a4:	8f 93       	push	r24
    19a6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            xprintf("rn42_autoconnecting(): %X\n", rn42_autoconnecting());
    19aa:	0e 94 19 0a 	call	0x1432	; 0x1432 <rn42_autoconnecting>
    19ae:	1f 92       	push	r1
    19b0:	8f 93       	push	r24
    19b2:	8c e5       	ldi	r24, 0x5C	; 92
    19b4:	93 e0       	ldi	r25, 0x03	; 3
    19b6:	9f 93       	push	r25
    19b8:	8f 93       	push	r24
    19ba:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            xprintf("config_mode: %X\n", config_mode);
    19be:	80 91 d5 02 	lds	r24, 0x02D5
    19c2:	1f 92       	push	r1
    19c4:	8f 93       	push	r24
    19c6:	8b e4       	ldi	r24, 0x4B	; 75
    19c8:	93 e0       	ldi	r25, 0x03	; 3
    19ca:	9f 93       	push	r25
    19cc:	8f 93       	push	r24
    19ce:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            xprintf("USB State: %s\n",
    19d2:	80 91 56 03 	lds	r24, 0x0356
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	88 23       	and	r24, r24
    19e2:	b9 f0       	breq	.+46     	; 0x1a12 <command_extra+0x234>
    19e4:	80 91 56 03 	lds	r24, 0x0356
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	b1 f0       	breq	.+44     	; 0x1a18 <command_extra+0x23a>
    19ec:	80 91 56 03 	lds	r24, 0x0356
    19f0:	82 30       	cpi	r24, 0x02	; 2
    19f2:	a9 f0       	breq	.+42     	; 0x1a1e <command_extra+0x240>
    19f4:	80 91 56 03 	lds	r24, 0x0356
    19f8:	83 30       	cpi	r24, 0x03	; 3
    19fa:	a1 f0       	breq	.+40     	; 0x1a24 <command_extra+0x246>
    19fc:	80 91 56 03 	lds	r24, 0x0356
    1a00:	84 30       	cpi	r24, 0x04	; 4
    1a02:	99 f0       	breq	.+38     	; 0x1a2a <command_extra+0x24c>
    1a04:	80 91 56 03 	lds	r24, 0x0356
    1a08:	85 30       	cpi	r24, 0x05	; 5
    1a0a:	91 f4       	brne	.+36     	; 0x1a30 <command_extra+0x252>
    1a0c:	82 e7       	ldi	r24, 0x72	; 114
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	11 c0       	rjmp	.+34     	; 0x1a34 <command_extra+0x256>
    1a12:	88 e4       	ldi	r24, 0x48	; 72
    1a14:	91 e0       	ldi	r25, 0x01	; 1
    1a16:	0e c0       	rjmp	.+28     	; 0x1a34 <command_extra+0x256>
    1a18:	80 e4       	ldi	r24, 0x40	; 64
    1a1a:	91 e0       	ldi	r25, 0x01	; 1
    1a1c:	0b c0       	rjmp	.+22     	; 0x1a34 <command_extra+0x256>
    1a1e:	83 e5       	ldi	r24, 0x53	; 83
    1a20:	91 e0       	ldi	r25, 0x01	; 1
    1a22:	08 c0       	rjmp	.+16     	; 0x1a34 <command_extra+0x256>
    1a24:	8b e5       	ldi	r24, 0x5B	; 91
    1a26:	91 e0       	ldi	r25, 0x01	; 1
    1a28:	05 c0       	rjmp	.+10     	; 0x1a34 <command_extra+0x256>
    1a2a:	85 e6       	ldi	r24, 0x65	; 101
    1a2c:	91 e0       	ldi	r25, 0x01	; 1
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <command_extra+0x256>
    1a30:	80 e7       	ldi	r24, 0x70	; 112
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	9f 93       	push	r25
    1a36:	8f 93       	push	r24
    1a38:	8c e3       	ldi	r24, 0x3C	; 60
    1a3a:	93 e0       	ldi	r25, 0x03	; 3
    1a3c:	9f 93       	push	r25
    1a3e:	8f 93       	push	r24
    1a40:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
                    (USB_DeviceState == DEVICE_STATE_Powered) ? "Powered" :
                    (USB_DeviceState == DEVICE_STATE_Default) ? "Default" :
                    (USB_DeviceState == DEVICE_STATE_Addressed) ? "Addressed" :
                    (USB_DeviceState == DEVICE_STATE_Configured) ? "Configured" :
                    (USB_DeviceState == DEVICE_STATE_Suspended) ? "Suspended" : "?");
            xprintf("battery: ");
    1a44:	82 e3       	ldi	r24, 0x32	; 50
    1a46:	93 e0       	ldi	r25, 0x03	; 3
    1a48:	9f 93       	push	r25
    1a4a:	8f 93       	push	r24
    1a4c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            switch (battery_status()) {
    1a50:	0e 94 3d 10 	call	0x207a	; 0x207a <battery_status>
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	59 f0       	breq	.+22     	; 0x1a7a <command_extra+0x29c>
    1a64:	38 f0       	brcs	.+14     	; 0x1a74 <command_extra+0x296>
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	59 f0       	breq	.+22     	; 0x1a80 <command_extra+0x2a2>
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	61 f4       	brne	.+24     	; 0x1a86 <command_extra+0x2a8>
                case FULL_CHARGED:  xprintf("FULL"); break;
                case CHARGING:      xprintf("CHARG"); break;
                case DISCHARGING:   xprintf("DISCHG"); break;
                case LOW_VOLTAGE:   xprintf("LOW"); break;
    1a6e:	8c e1       	ldi	r24, 0x1C	; 28
    1a70:	93 e0       	ldi	r25, 0x03	; 3
    1a72:	0b c0       	rjmp	.+22     	; 0x1a8a <command_extra+0x2ac>
                    (USB_DeviceState == DEVICE_STATE_Addressed) ? "Addressed" :
                    (USB_DeviceState == DEVICE_STATE_Configured) ? "Configured" :
                    (USB_DeviceState == DEVICE_STATE_Suspended) ? "Suspended" : "?");
            xprintf("battery: ");
            switch (battery_status()) {
                case FULL_CHARGED:  xprintf("FULL"); break;
    1a74:	8d e2       	ldi	r24, 0x2D	; 45
    1a76:	93 e0       	ldi	r25, 0x03	; 3
    1a78:	08 c0       	rjmp	.+16     	; 0x1a8a <command_extra+0x2ac>
                case CHARGING:      xprintf("CHARG"); break;
    1a7a:	87 e2       	ldi	r24, 0x27	; 39
    1a7c:	93 e0       	ldi	r25, 0x03	; 3
    1a7e:	05 c0       	rjmp	.+10     	; 0x1a8a <command_extra+0x2ac>
                case DISCHARGING:   xprintf("DISCHG"); break;
    1a80:	80 e2       	ldi	r24, 0x20	; 32
    1a82:	93 e0       	ldi	r25, 0x03	; 3
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <command_extra+0x2ac>
                case LOW_VOLTAGE:   xprintf("LOW"); break;
                default:            xprintf("?"); break;
    1a86:	8a e1       	ldi	r24, 0x1A	; 26
    1a88:	93 e0       	ldi	r25, 0x03	; 3
    1a8a:	9f 93       	push	r25
    1a8c:	8f 93       	push	r24
    1a8e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
            };
            xprintf("\n");
    1a96:	88 e1       	ldi	r24, 0x18	; 24
    1a98:	93 e0       	ldi	r25, 0x03	; 3
    1a9a:	9f 93       	push	r25
    1a9c:	8f 93       	push	r24
    1a9e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            xprintf("RemoteWakeupEnabled: %X\n", USB_Device_RemoteWakeupEnabled);
    1aa2:	80 91 54 03 	lds	r24, 0x0354
    1aa6:	1f 92       	push	r1
    1aa8:	8f 93       	push	r24
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	92 e0       	ldi	r25, 0x02	; 2
    1aae:	9f 93       	push	r25
    1ab0:	8f 93       	push	r24
    1ab2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            xprintf("VBUS: %X\n", USBSTA&(1<<VBUS));
    1ab6:	80 91 d9 00 	lds	r24, 0x00D9
    1aba:	81 70       	andi	r24, 0x01	; 1
    1abc:	1f 92       	push	r1
    1abe:	8f 93       	push	r24
    1ac0:	85 ef       	ldi	r24, 0xF5	; 245
    1ac2:	92 e0       	ldi	r25, 0x02	; 2
    1ac4:	9f 93       	push	r25
    1ac6:	8f 93       	push	r24
    1ac8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            t = timer_read32()/1000;
    1acc:	0e 94 04 25 	call	0x4a08	; 0x4a08 <timer_read32>
    1ad0:	28 ee       	ldi	r18, 0xE8	; 232
    1ad2:	33 e0       	ldi	r19, 0x03	; 3
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__udivmodsi4>
    1adc:	69 01       	movw	r12, r18
    1ade:	7a 01       	movw	r14, r20
            uint8_t d = t/3600/24;
            uint8_t h = t/3600;
            uint8_t m = t%3600/60;
            uint8_t s = t%60;
    1ae0:	5c e3       	ldi	r21, 0x3C	; 60
    1ae2:	85 2e       	mov	r8, r21
    1ae4:	91 2c       	mov	r9, r1
    1ae6:	a1 2c       	mov	r10, r1
    1ae8:	b1 2c       	mov	r11, r1
    1aea:	c7 01       	movw	r24, r14
    1aec:	b6 01       	movw	r22, r12
    1aee:	a5 01       	movw	r20, r10
    1af0:	94 01       	movw	r18, r8
    1af2:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__udivmodsi4>
            xprintf("uptime: %02u %02u:%02u:%02u\n", d, h, m, s);
    1af6:	7f 93       	push	r23
    1af8:	6f 93       	push	r22
            xprintf("RemoteWakeupEnabled: %X\n", USB_Device_RemoteWakeupEnabled);
            xprintf("VBUS: %X\n", USBSTA&(1<<VBUS));
            t = timer_read32()/1000;
            uint8_t d = t/3600/24;
            uint8_t h = t/3600;
            uint8_t m = t%3600/60;
    1afa:	c7 01       	movw	r24, r14
    1afc:	b6 01       	movw	r22, r12
    1afe:	20 e1       	ldi	r18, 0x10	; 16
    1b00:	3e e0       	ldi	r19, 0x0E	; 14
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__udivmodsi4>
    1b0a:	12 2f       	mov	r17, r18
    1b0c:	a5 01       	movw	r20, r10
    1b0e:	94 01       	movw	r18, r8
    1b10:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__udivmodsi4>
            uint8_t s = t%60;
            xprintf("uptime: %02u %02u:%02u:%02u\n", d, h, m, s);
    1b14:	3f 93       	push	r19
    1b16:	2f 93       	push	r18
    1b18:	1f 92       	push	r1
    1b1a:	1f 93       	push	r17
            };
            xprintf("\n");
            xprintf("RemoteWakeupEnabled: %X\n", USB_Device_RemoteWakeupEnabled);
            xprintf("VBUS: %X\n", USBSTA&(1<<VBUS));
            t = timer_read32()/1000;
            uint8_t d = t/3600/24;
    1b1c:	c7 01       	movw	r24, r14
    1b1e:	b6 01       	movw	r22, r12
    1b20:	20 e8       	ldi	r18, 0x80	; 128
    1b22:	31 e5       	ldi	r19, 0x51	; 81
    1b24:	41 e0       	ldi	r20, 0x01	; 1
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__udivmodsi4>
            uint8_t h = t/3600;
            uint8_t m = t%3600/60;
            uint8_t s = t%60;
            xprintf("uptime: %02u %02u:%02u:%02u\n", d, h, m, s);
    1b2c:	3f 93       	push	r19
    1b2e:	2f 93       	push	r18
    1b30:	88 ed       	ldi	r24, 0xD8	; 216
    1b32:	92 e0       	ldi	r25, 0x02	; 2
    1b34:	9f 93       	push	r25
    1b36:	8f 93       	push	r24
    1b38:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            xprintf("LINK0: %s\r\n", get_link(RN42_LINK0));
            xprintf("LINK1: %s\r\n", get_link(RN42_LINK1));
            xprintf("LINK2: %s\r\n", get_link(RN42_LINK2));
            xprintf("LINK3: %s\r\n", get_link(RN42_LINK3));
#endif
            return true;
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	62 c0       	rjmp	.+196    	; 0x1c0c <command_extra+0x42e>
            xprintf("%02u:",   t/3600);
            xprintf("%02u:",   t%3600/60);
            xprintf("%02u\n",  t%60);
            return true;
        case KC_U:
            if (config_mode) return false;
    1b48:	80 91 d5 02 	lds	r24, 0x02D5
    1b4c:	81 11       	cpse	r24, r1
    1b4e:	63 c0       	rjmp	.+198    	; 0x1c16 <command_extra+0x438>
            if (force_usb) {
    1b50:	80 91 d4 02 	lds	r24, 0x02D4
    1b54:	88 23       	and	r24, r24
    1b56:	39 f0       	breq	.+14     	; 0x1b66 <command_extra+0x388>
                print("Auto mode\n");
    1b58:	80 eb       	ldi	r24, 0xB0	; 176
    1b5a:	92 e0       	ldi	r25, 0x02	; 2
    1b5c:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
                force_usb = false;
    1b60:	10 92 d4 02 	sts	0x02D4, r1
    1b64:	53 c0       	rjmp	.+166    	; 0x1c0c <command_extra+0x42e>
            } else {
                print("USB mode\n");
    1b66:	86 ea       	ldi	r24, 0xA6	; 166
    1b68:	92 e0       	ldi	r25, 0x02	; 2
    1b6a:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
                force_usb = true;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	80 93 d4 02 	sts	0x02D4, r24
                clear_keyboard();
    1b74:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <clear_keyboard>
                host_set_driver(&lufa_driver);
    1b78:	86 e1       	ldi	r24, 0x16	; 22
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
    1b7c:	0e 94 10 18 	call	0x3020	; 0x3020 <host_set_driver>
    1b80:	45 c0       	rjmp	.+138    	; 0x1c0c <command_extra+0x42e>
            }
            return true;
        case KC_DELETE:
            /* RN-42 Command mode */
            if (rn42_autoconnecting()) {
    1b82:	0e 94 19 0a 	call	0x1432	; 0x1432 <rn42_autoconnecting>
    1b86:	88 23       	and	r24, r24
    1b88:	51 f0       	breq	.+20     	; 0x1b9e <command_extra+0x3c0>
                enter_command_mode();
    1b8a:	8c 83       	std	Y+4, r24	; 0x04
    1b8c:	0e 94 8d 0a 	call	0x151a	; 0x151a <enter_command_mode>

                command_state = CONSOLE;
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	90 93 51 03 	sts	0x0351, r25
                config_mode = true;
    1b96:	90 93 d5 02 	sts	0x02D5, r25
    1b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9c:	3d c0       	rjmp	.+122    	; 0x1c18 <command_extra+0x43a>
            } else {
                exit_command_mode();
    1b9e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <exit_command_mode>

                command_state = ONESHOT;
    1ba2:	10 92 51 03 	sts	0x0351, r1
                config_mode = false;
    1ba6:	10 92 d5 02 	sts	0x02D5, r1
    1baa:	30 c0       	rjmp	.+96     	; 0x1c0c <command_extra+0x42e>
}

static void init_rn42(void)
{
    // RN-42 configure
    if (!config_mode) enter_command_mode();
    1bac:	80 91 d5 02 	lds	r24, 0x02D5
    1bb0:	81 11       	cpse	r24, r1
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <command_extra+0x3da>
    1bb4:	0e 94 8d 0a 	call	0x151a	; 0x151a <enter_command_mode>
    SEND_COMMAND("SF,1\r\n");  // factory defaults
    1bb8:	8d e4       	ldi	r24, 0x4D	; 77
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>
    SEND_COMMAND("S-,TmkBT\r\n");
    1bc0:	82 e4       	ldi	r24, 0x42	; 66
    1bc2:	92 e0       	ldi	r25, 0x02	; 2
    1bc4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>
    SEND_COMMAND("SS,Keyboard/Mouse\r\n");
    1bc8:	8e e2       	ldi	r24, 0x2E	; 46
    1bca:	92 e0       	ldi	r25, 0x02	; 2
    1bcc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>
    SEND_COMMAND("SM,4\r\n");  // auto connect(DTR)
    1bd0:	87 e2       	ldi	r24, 0x27	; 39
    1bd2:	92 e0       	ldi	r25, 0x02	; 2
    1bd4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>
    SEND_COMMAND("SW,8000\r\n");   // Sniff disable
    1bd8:	8d e1       	ldi	r24, 0x1D	; 29
    1bda:	92 e0       	ldi	r25, 0x02	; 2
    1bdc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>
    SEND_COMMAND("S~,6\r\n");   // HID profile
    1be0:	86 e1       	ldi	r24, 0x16	; 22
    1be2:	92 e0       	ldi	r25, 0x02	; 2
    1be4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>
    SEND_COMMAND("SH,003C\r\n");   // combo device, out-report, 4-reconnect
    1be8:	8c e0       	ldi	r24, 0x0C	; 12
    1bea:	92 e0       	ldi	r25, 0x02	; 2
    1bec:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>
    SEND_COMMAND("SY,FFF4\r\n");   // transmit power -12
    1bf0:	82 e0       	ldi	r24, 0x02	; 2
    1bf2:	92 e0       	ldi	r25, 0x02	; 2
    1bf4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>
    SEND_COMMAND("R,1\r\n");
    1bf8:	8c ef       	ldi	r24, 0xFC	; 252
    1bfa:	91 e0       	ldi	r25, 0x01	; 1
    1bfc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <rn42_send_command>
    if (!config_mode) exit_command_mode();
    1c00:	80 91 d5 02 	lds	r24, 0x02D5
    1c04:	81 11       	cpse	r24, r1
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <command_extra+0x42e>
    1c08:	0e 94 c8 0a 	call	0x1590	; 0x1590 <exit_command_mode>
                config_mode = false;
            }
            return true;
        case KC_SCROLLLOCK:
            init_rn42();
            return true;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	04 c0       	rjmp	.+8      	; 0x1c18 <command_extra+0x43a>
        default:
            if (config_mode)
    1c10:	80 91 d5 02 	lds	r24, 0x02D5
    1c14:	01 c0       	rjmp	.+2      	; 0x1c18 <command_extra+0x43a>
            xprintf("%02u:",   t/3600);
            xprintf("%02u:",   t%3600/60);
            xprintf("%02u\n",  t%60);
            return true;
        case KC_U:
            if (config_mode) return false;
    1c16:	80 e0       	ldi	r24, 0x00	; 0
                return true;
            else
                return false;   // yield to default command
    }
    return true;
}
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	1f 91       	pop	r17
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	df 90       	pop	r13
    1c2c:	cf 90       	pop	r12
    1c2e:	bf 90       	pop	r11
    1c30:	af 90       	pop	r10
    1c32:	9f 90       	pop	r9
    1c34:	8f 90       	pop	r8
    1c36:	08 95       	ret

00001c38 <command_console_extra>:
 * RN-42 Command mode
 * sends charactors to the module
 */
static uint8_t code2asc(uint8_t code);
bool command_console_extra(uint8_t code)
{
    1c38:	cf 93       	push	r28
    1c3a:	c8 2f       	mov	r28, r24
}

// convert keycode into ascii charactor
static uint8_t code2asc(uint8_t code)
{
    bool shifted = (get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT))) ? true : false;
    1c3c:	0e 94 ba 23 	call	0x4774	; 0x4774 <get_mods>
    1c40:	82 72       	andi	r24, 0x22	; 34
    1c42:	21 e0       	ldi	r18, 0x01	; 1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <command_console_extra+0x10>
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    switch (code) {
    1c48:	8c 2f       	mov	r24, r28
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	34 97       	sbiw	r30, 0x04	; 4
    1c50:	e9 34       	cpi	r30, 0x49	; 73
    1c52:	f1 05       	cpc	r31, r1
    1c54:	08 f0       	brcs	.+2      	; 0x1c58 <command_console_extra+0x20>
    1c56:	fd c0       	rjmp	.+506    	; 0x1e52 <command_console_extra+0x21a>
    1c58:	ea 5a       	subi	r30, 0xAA	; 170
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <__tablejump2__>
        case KC_6: return (shifted ? '^' : '6');
        case KC_7: return (shifted ? '&' : '7');
        case KC_8: return (shifted ? '*' : '8');
        case KC_9: return (shifted ? '(' : '9');
        case KC_0: return (shifted ? ')' : '0');
        case KC_ENTER: return '\n';
    1c60:	8a e0       	ldi	r24, 0x0A	; 10
    1c62:	58 c1       	rjmp	.+688    	; 0x1f14 <command_console_extra+0x2dc>
// convert keycode into ascii charactor
static uint8_t code2asc(uint8_t code)
{
    bool shifted = (get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT))) ? true : false;
    switch (code) {
        case KC_A: return (shifted ? 'A' : 'a');
    1c64:	22 23       	and	r18, r18
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <command_console_extra+0x32>
    1c68:	f8 c0       	rjmp	.+496    	; 0x1e5a <command_console_extra+0x222>
    1c6a:	81 e4       	ldi	r24, 0x41	; 65
    1c6c:	53 c1       	rjmp	.+678    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_B: return (shifted ? 'B' : 'b');
    1c6e:	22 23       	and	r18, r18
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <command_console_extra+0x3c>
    1c72:	f5 c0       	rjmp	.+490    	; 0x1e5e <command_console_extra+0x226>
    1c74:	82 e4       	ldi	r24, 0x42	; 66
    1c76:	4e c1       	rjmp	.+668    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_C: return (shifted ? 'C' : 'c');
    1c78:	22 23       	and	r18, r18
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <command_console_extra+0x46>
    1c7c:	f2 c0       	rjmp	.+484    	; 0x1e62 <command_console_extra+0x22a>
    1c7e:	83 e4       	ldi	r24, 0x43	; 67
    1c80:	49 c1       	rjmp	.+658    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_D: return (shifted ? 'D' : 'd');
    1c82:	22 23       	and	r18, r18
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <command_console_extra+0x50>
    1c86:	ef c0       	rjmp	.+478    	; 0x1e66 <command_console_extra+0x22e>
    1c88:	84 e4       	ldi	r24, 0x44	; 68
    1c8a:	44 c1       	rjmp	.+648    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_E: return (shifted ? 'E' : 'e');
    1c8c:	22 23       	and	r18, r18
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <command_console_extra+0x5a>
    1c90:	ec c0       	rjmp	.+472    	; 0x1e6a <command_console_extra+0x232>
    1c92:	85 e4       	ldi	r24, 0x45	; 69
    1c94:	3f c1       	rjmp	.+638    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_F: return (shifted ? 'F' : 'f');
    1c96:	22 23       	and	r18, r18
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <command_console_extra+0x64>
    1c9a:	e9 c0       	rjmp	.+466    	; 0x1e6e <command_console_extra+0x236>
    1c9c:	86 e4       	ldi	r24, 0x46	; 70
    1c9e:	3a c1       	rjmp	.+628    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_G: return (shifted ? 'G' : 'g');
    1ca0:	22 23       	and	r18, r18
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <command_console_extra+0x6e>
    1ca4:	e6 c0       	rjmp	.+460    	; 0x1e72 <command_console_extra+0x23a>
    1ca6:	87 e4       	ldi	r24, 0x47	; 71
    1ca8:	35 c1       	rjmp	.+618    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_H: return (shifted ? 'H' : 'h');
    1caa:	22 23       	and	r18, r18
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <command_console_extra+0x78>
    1cae:	e3 c0       	rjmp	.+454    	; 0x1e76 <command_console_extra+0x23e>
    1cb0:	88 e4       	ldi	r24, 0x48	; 72
    1cb2:	30 c1       	rjmp	.+608    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_I: return (shifted ? 'I' : 'i');
    1cb4:	22 23       	and	r18, r18
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <command_console_extra+0x82>
    1cb8:	e0 c0       	rjmp	.+448    	; 0x1e7a <command_console_extra+0x242>
    1cba:	89 e4       	ldi	r24, 0x49	; 73
    1cbc:	2b c1       	rjmp	.+598    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_J: return (shifted ? 'J' : 'j');
    1cbe:	22 23       	and	r18, r18
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <command_console_extra+0x8c>
    1cc2:	dd c0       	rjmp	.+442    	; 0x1e7e <command_console_extra+0x246>
    1cc4:	8a e4       	ldi	r24, 0x4A	; 74
    1cc6:	26 c1       	rjmp	.+588    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_K: return (shifted ? 'K' : 'k');
    1cc8:	22 23       	and	r18, r18
    1cca:	09 f4       	brne	.+2      	; 0x1cce <command_console_extra+0x96>
    1ccc:	da c0       	rjmp	.+436    	; 0x1e82 <command_console_extra+0x24a>
    1cce:	8b e4       	ldi	r24, 0x4B	; 75
    1cd0:	21 c1       	rjmp	.+578    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_L: return (shifted ? 'L' : 'l');
    1cd2:	22 23       	and	r18, r18
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <command_console_extra+0xa0>
    1cd6:	d7 c0       	rjmp	.+430    	; 0x1e86 <command_console_extra+0x24e>
    1cd8:	8c e4       	ldi	r24, 0x4C	; 76
    1cda:	1c c1       	rjmp	.+568    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_M: return (shifted ? 'M' : 'm');
    1cdc:	22 23       	and	r18, r18
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <command_console_extra+0xaa>
    1ce0:	d4 c0       	rjmp	.+424    	; 0x1e8a <command_console_extra+0x252>
    1ce2:	8d e4       	ldi	r24, 0x4D	; 77
    1ce4:	17 c1       	rjmp	.+558    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_N: return (shifted ? 'N' : 'n');
    1ce6:	22 23       	and	r18, r18
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <command_console_extra+0xb4>
    1cea:	d1 c0       	rjmp	.+418    	; 0x1e8e <command_console_extra+0x256>
    1cec:	8e e4       	ldi	r24, 0x4E	; 78
    1cee:	12 c1       	rjmp	.+548    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_O: return (shifted ? 'O' : 'o');
    1cf0:	22 23       	and	r18, r18
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <command_console_extra+0xbe>
    1cf4:	ce c0       	rjmp	.+412    	; 0x1e92 <command_console_extra+0x25a>
    1cf6:	8f e4       	ldi	r24, 0x4F	; 79
    1cf8:	0d c1       	rjmp	.+538    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_P: return (shifted ? 'P' : 'p');
    1cfa:	22 23       	and	r18, r18
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <command_console_extra+0xc8>
    1cfe:	cb c0       	rjmp	.+406    	; 0x1e96 <command_console_extra+0x25e>
    1d00:	80 e5       	ldi	r24, 0x50	; 80
    1d02:	08 c1       	rjmp	.+528    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_Q: return (shifted ? 'Q' : 'q');
    1d04:	22 23       	and	r18, r18
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <command_console_extra+0xd2>
    1d08:	c8 c0       	rjmp	.+400    	; 0x1e9a <command_console_extra+0x262>
    1d0a:	81 e5       	ldi	r24, 0x51	; 81
    1d0c:	03 c1       	rjmp	.+518    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_R: return (shifted ? 'R' : 'r');
    1d0e:	22 23       	and	r18, r18
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <command_console_extra+0xdc>
    1d12:	c5 c0       	rjmp	.+394    	; 0x1e9e <command_console_extra+0x266>
    1d14:	82 e5       	ldi	r24, 0x52	; 82
    1d16:	fe c0       	rjmp	.+508    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_S: return (shifted ? 'S' : 's');
    1d18:	22 23       	and	r18, r18
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <command_console_extra+0xe6>
    1d1c:	c2 c0       	rjmp	.+388    	; 0x1ea2 <command_console_extra+0x26a>
    1d1e:	83 e5       	ldi	r24, 0x53	; 83
    1d20:	f9 c0       	rjmp	.+498    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_T: return (shifted ? 'T' : 't');
    1d22:	22 23       	and	r18, r18
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <command_console_extra+0xf0>
    1d26:	bf c0       	rjmp	.+382    	; 0x1ea6 <command_console_extra+0x26e>
    1d28:	84 e5       	ldi	r24, 0x54	; 84
    1d2a:	f4 c0       	rjmp	.+488    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_U: return (shifted ? 'U' : 'u');
    1d2c:	22 23       	and	r18, r18
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <command_console_extra+0xfa>
    1d30:	bc c0       	rjmp	.+376    	; 0x1eaa <command_console_extra+0x272>
    1d32:	85 e5       	ldi	r24, 0x55	; 85
    1d34:	ef c0       	rjmp	.+478    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_V: return (shifted ? 'V' : 'v');
    1d36:	22 23       	and	r18, r18
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <command_console_extra+0x104>
    1d3a:	b9 c0       	rjmp	.+370    	; 0x1eae <command_console_extra+0x276>
    1d3c:	86 e5       	ldi	r24, 0x56	; 86
    1d3e:	ea c0       	rjmp	.+468    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_W: return (shifted ? 'W' : 'w');
    1d40:	22 23       	and	r18, r18
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <command_console_extra+0x10e>
    1d44:	b6 c0       	rjmp	.+364    	; 0x1eb2 <command_console_extra+0x27a>
    1d46:	87 e5       	ldi	r24, 0x57	; 87
    1d48:	e5 c0       	rjmp	.+458    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_X: return (shifted ? 'X' : 'x');
    1d4a:	22 23       	and	r18, r18
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <command_console_extra+0x118>
    1d4e:	b3 c0       	rjmp	.+358    	; 0x1eb6 <command_console_extra+0x27e>
    1d50:	88 e5       	ldi	r24, 0x58	; 88
    1d52:	e0 c0       	rjmp	.+448    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_Y: return (shifted ? 'Y' : 'y');
    1d54:	22 23       	and	r18, r18
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <command_console_extra+0x122>
    1d58:	b0 c0       	rjmp	.+352    	; 0x1eba <command_console_extra+0x282>
    1d5a:	89 e5       	ldi	r24, 0x59	; 89
    1d5c:	db c0       	rjmp	.+438    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_Z: return (shifted ? 'Z' : 'z');
    1d5e:	22 23       	and	r18, r18
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <command_console_extra+0x12c>
    1d62:	ad c0       	rjmp	.+346    	; 0x1ebe <command_console_extra+0x286>
    1d64:	8a e5       	ldi	r24, 0x5A	; 90
    1d66:	d6 c0       	rjmp	.+428    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_1: return (shifted ? '!' : '1');
    1d68:	22 23       	and	r18, r18
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <command_console_extra+0x136>
    1d6c:	aa c0       	rjmp	.+340    	; 0x1ec2 <command_console_extra+0x28a>
    1d6e:	81 e2       	ldi	r24, 0x21	; 33
    1d70:	d1 c0       	rjmp	.+418    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_2: return (shifted ? '@' : '2');
    1d72:	22 23       	and	r18, r18
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <command_console_extra+0x140>
    1d76:	a7 c0       	rjmp	.+334    	; 0x1ec6 <command_console_extra+0x28e>
    1d78:	80 e4       	ldi	r24, 0x40	; 64
    1d7a:	cc c0       	rjmp	.+408    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_3: return (shifted ? '#' : '3');
    1d7c:	22 23       	and	r18, r18
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <command_console_extra+0x14a>
    1d80:	a4 c0       	rjmp	.+328    	; 0x1eca <command_console_extra+0x292>
    1d82:	83 e2       	ldi	r24, 0x23	; 35
    1d84:	c7 c0       	rjmp	.+398    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_4: return (shifted ? '$' : '4');
    1d86:	22 23       	and	r18, r18
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <command_console_extra+0x154>
    1d8a:	a1 c0       	rjmp	.+322    	; 0x1ece <command_console_extra+0x296>
    1d8c:	84 e2       	ldi	r24, 0x24	; 36
    1d8e:	c2 c0       	rjmp	.+388    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_5: return (shifted ? '%' : '5');
    1d90:	22 23       	and	r18, r18
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <command_console_extra+0x15e>
    1d94:	9e c0       	rjmp	.+316    	; 0x1ed2 <command_console_extra+0x29a>
    1d96:	85 e2       	ldi	r24, 0x25	; 37
    1d98:	bd c0       	rjmp	.+378    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_6: return (shifted ? '^' : '6');
    1d9a:	22 23       	and	r18, r18
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <command_console_extra+0x168>
    1d9e:	9b c0       	rjmp	.+310    	; 0x1ed6 <command_console_extra+0x29e>
    1da0:	8e e5       	ldi	r24, 0x5E	; 94
    1da2:	b8 c0       	rjmp	.+368    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_7: return (shifted ? '&' : '7');
    1da4:	22 23       	and	r18, r18
    1da6:	09 f4       	brne	.+2      	; 0x1daa <command_console_extra+0x172>
    1da8:	98 c0       	rjmp	.+304    	; 0x1eda <command_console_extra+0x2a2>
    1daa:	86 e2       	ldi	r24, 0x26	; 38
    1dac:	b3 c0       	rjmp	.+358    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_8: return (shifted ? '*' : '8');
    1dae:	22 23       	and	r18, r18
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <command_console_extra+0x17c>
    1db2:	95 c0       	rjmp	.+298    	; 0x1ede <command_console_extra+0x2a6>
    1db4:	8a e2       	ldi	r24, 0x2A	; 42
    1db6:	ae c0       	rjmp	.+348    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_9: return (shifted ? '(' : '9');
    1db8:	22 23       	and	r18, r18
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <command_console_extra+0x186>
    1dbc:	92 c0       	rjmp	.+292    	; 0x1ee2 <command_console_extra+0x2aa>
    1dbe:	88 e2       	ldi	r24, 0x28	; 40
    1dc0:	a9 c0       	rjmp	.+338    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_0: return (shifted ? ')' : '0');
    1dc2:	22 23       	and	r18, r18
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <command_console_extra+0x190>
    1dc6:	8f c0       	rjmp	.+286    	; 0x1ee6 <command_console_extra+0x2ae>
    1dc8:	89 e2       	ldi	r24, 0x29	; 41
    1dca:	a4 c0       	rjmp	.+328    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_ENTER: return '\n';
        case KC_ESCAPE: return 0x1B;
        case KC_BSPACE: return '\b';
    1dcc:	88 e0       	ldi	r24, 0x08	; 8
    1dce:	a2 c0       	rjmp	.+324    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_TAB: return '\t';
    1dd0:	89 e0       	ldi	r24, 0x09	; 9
    1dd2:	a0 c0       	rjmp	.+320    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_SPACE: return ' ';
    1dd4:	80 e2       	ldi	r24, 0x20	; 32
    1dd6:	9e c0       	rjmp	.+316    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_MINUS: return (shifted ? '_' : '-');
    1dd8:	22 23       	and	r18, r18
    1dda:	09 f4       	brne	.+2      	; 0x1dde <command_console_extra+0x1a6>
    1ddc:	86 c0       	rjmp	.+268    	; 0x1eea <command_console_extra+0x2b2>
    1dde:	8f e5       	ldi	r24, 0x5F	; 95
    1de0:	99 c0       	rjmp	.+306    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_EQUAL: return (shifted ? '+' : '=');
    1de2:	22 23       	and	r18, r18
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <command_console_extra+0x1b0>
    1de6:	83 c0       	rjmp	.+262    	; 0x1eee <command_console_extra+0x2b6>
    1de8:	8b e2       	ldi	r24, 0x2B	; 43
    1dea:	94 c0       	rjmp	.+296    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_LBRACKET: return (shifted ? '{' : '[');
    1dec:	22 23       	and	r18, r18
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <command_console_extra+0x1ba>
    1df0:	80 c0       	rjmp	.+256    	; 0x1ef2 <command_console_extra+0x2ba>
    1df2:	8b e7       	ldi	r24, 0x7B	; 123
    1df4:	8f c0       	rjmp	.+286    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_RBRACKET: return (shifted ? '}' : ']');
    1df6:	22 23       	and	r18, r18
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <command_console_extra+0x1c4>
    1dfa:	7d c0       	rjmp	.+250    	; 0x1ef6 <command_console_extra+0x2be>
    1dfc:	8d e7       	ldi	r24, 0x7D	; 125
    1dfe:	8a c0       	rjmp	.+276    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_BSLASH: return (shifted ? '|' : '\\');
    1e00:	22 23       	and	r18, r18
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <command_console_extra+0x1ce>
    1e04:	7a c0       	rjmp	.+244    	; 0x1efa <command_console_extra+0x2c2>
    1e06:	8c e7       	ldi	r24, 0x7C	; 124
    1e08:	85 c0       	rjmp	.+266    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_NONUS_HASH: return (shifted ? '|' : '\\');
    1e0a:	21 11       	cpse	r18, r1
    1e0c:	fc cf       	rjmp	.-8      	; 0x1e06 <command_console_extra+0x1ce>
        case KC_SPACE: return ' ';
        case KC_MINUS: return (shifted ? '_' : '-');
        case KC_EQUAL: return (shifted ? '+' : '=');
        case KC_LBRACKET: return (shifted ? '{' : '[');
        case KC_RBRACKET: return (shifted ? '}' : ']');
        case KC_BSLASH: return (shifted ? '|' : '\\');
    1e0e:	8c e5       	ldi	r24, 0x5C	; 92
    1e10:	81 c0       	rjmp	.+258    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_NONUS_HASH: return (shifted ? '|' : '\\');
        case KC_SCOLON: return (shifted ? ':' : ';');
    1e12:	22 23       	and	r18, r18
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <command_console_extra+0x1e0>
    1e16:	73 c0       	rjmp	.+230    	; 0x1efe <command_console_extra+0x2c6>
    1e18:	8a e3       	ldi	r24, 0x3A	; 58
    1e1a:	7c c0       	rjmp	.+248    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_QUOTE: return (shifted ? '"' : '\'');
    1e1c:	22 23       	and	r18, r18
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <command_console_extra+0x1ea>
    1e20:	70 c0       	rjmp	.+224    	; 0x1f02 <command_console_extra+0x2ca>
    1e22:	82 e2       	ldi	r24, 0x22	; 34
    1e24:	77 c0       	rjmp	.+238    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_GRAVE: return (shifted ? '~' : '`');
    1e26:	22 23       	and	r18, r18
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <command_console_extra+0x1f4>
    1e2a:	6d c0       	rjmp	.+218    	; 0x1f06 <command_console_extra+0x2ce>
    1e2c:	8e e7       	ldi	r24, 0x7E	; 126
    1e2e:	72 c0       	rjmp	.+228    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_COMMA: return (shifted ? '<' : ',');
    1e30:	22 23       	and	r18, r18
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <command_console_extra+0x1fe>
    1e34:	6a c0       	rjmp	.+212    	; 0x1f0a <command_console_extra+0x2d2>
    1e36:	8c e3       	ldi	r24, 0x3C	; 60
    1e38:	6d c0       	rjmp	.+218    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_DOT: return (shifted ? '>' : '.');
    1e3a:	22 23       	and	r18, r18
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <command_console_extra+0x208>
    1e3e:	67 c0       	rjmp	.+206    	; 0x1f0e <command_console_extra+0x2d6>
    1e40:	8e e3       	ldi	r24, 0x3E	; 62
    1e42:	68 c0       	rjmp	.+208    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_SLASH: return (shifted ? '?' : '/');
    1e44:	22 23       	and	r18, r18
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <command_console_extra+0x212>
    1e48:	64 c0       	rjmp	.+200    	; 0x1f12 <command_console_extra+0x2da>
    1e4a:	8f e3       	ldi	r24, 0x3F	; 63
    1e4c:	63 c0       	rjmp	.+198    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_DELETE: return '\0';    // Delete to disconnect
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	61 c0       	rjmp	.+194    	; 0x1f14 <command_console_extra+0x2dc>
        default: return ' ';
    1e52:	80 e2       	ldi	r24, 0x20	; 32
    1e54:	5f c0       	rjmp	.+190    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_7: return (shifted ? '&' : '7');
        case KC_8: return (shifted ? '*' : '8');
        case KC_9: return (shifted ? '(' : '9');
        case KC_0: return (shifted ? ')' : '0');
        case KC_ENTER: return '\n';
        case KC_ESCAPE: return 0x1B;
    1e56:	8b e1       	ldi	r24, 0x1B	; 27
    1e58:	5d c0       	rjmp	.+186    	; 0x1f14 <command_console_extra+0x2dc>
// convert keycode into ascii charactor
static uint8_t code2asc(uint8_t code)
{
    bool shifted = (get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT))) ? true : false;
    switch (code) {
        case KC_A: return (shifted ? 'A' : 'a');
    1e5a:	81 e6       	ldi	r24, 0x61	; 97
    1e5c:	5b c0       	rjmp	.+182    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_B: return (shifted ? 'B' : 'b');
    1e5e:	82 e6       	ldi	r24, 0x62	; 98
    1e60:	59 c0       	rjmp	.+178    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_C: return (shifted ? 'C' : 'c');
    1e62:	83 e6       	ldi	r24, 0x63	; 99
    1e64:	57 c0       	rjmp	.+174    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_D: return (shifted ? 'D' : 'd');
    1e66:	84 e6       	ldi	r24, 0x64	; 100
    1e68:	55 c0       	rjmp	.+170    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_E: return (shifted ? 'E' : 'e');
    1e6a:	85 e6       	ldi	r24, 0x65	; 101
    1e6c:	53 c0       	rjmp	.+166    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_F: return (shifted ? 'F' : 'f');
    1e6e:	86 e6       	ldi	r24, 0x66	; 102
    1e70:	51 c0       	rjmp	.+162    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_G: return (shifted ? 'G' : 'g');
    1e72:	87 e6       	ldi	r24, 0x67	; 103
    1e74:	4f c0       	rjmp	.+158    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_H: return (shifted ? 'H' : 'h');
    1e76:	88 e6       	ldi	r24, 0x68	; 104
    1e78:	4d c0       	rjmp	.+154    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_I: return (shifted ? 'I' : 'i');
    1e7a:	89 e6       	ldi	r24, 0x69	; 105
    1e7c:	4b c0       	rjmp	.+150    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_J: return (shifted ? 'J' : 'j');
    1e7e:	8a e6       	ldi	r24, 0x6A	; 106
    1e80:	49 c0       	rjmp	.+146    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_K: return (shifted ? 'K' : 'k');
    1e82:	8b e6       	ldi	r24, 0x6B	; 107
    1e84:	47 c0       	rjmp	.+142    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_L: return (shifted ? 'L' : 'l');
    1e86:	8c e6       	ldi	r24, 0x6C	; 108
    1e88:	45 c0       	rjmp	.+138    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_M: return (shifted ? 'M' : 'm');
    1e8a:	8d e6       	ldi	r24, 0x6D	; 109
    1e8c:	43 c0       	rjmp	.+134    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_N: return (shifted ? 'N' : 'n');
    1e8e:	8e e6       	ldi	r24, 0x6E	; 110
    1e90:	41 c0       	rjmp	.+130    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_O: return (shifted ? 'O' : 'o');
    1e92:	8f e6       	ldi	r24, 0x6F	; 111
    1e94:	3f c0       	rjmp	.+126    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_P: return (shifted ? 'P' : 'p');
    1e96:	80 e7       	ldi	r24, 0x70	; 112
    1e98:	3d c0       	rjmp	.+122    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_Q: return (shifted ? 'Q' : 'q');
    1e9a:	81 e7       	ldi	r24, 0x71	; 113
    1e9c:	3b c0       	rjmp	.+118    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_R: return (shifted ? 'R' : 'r');
    1e9e:	82 e7       	ldi	r24, 0x72	; 114
    1ea0:	39 c0       	rjmp	.+114    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_S: return (shifted ? 'S' : 's');
    1ea2:	83 e7       	ldi	r24, 0x73	; 115
    1ea4:	37 c0       	rjmp	.+110    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_T: return (shifted ? 'T' : 't');
    1ea6:	84 e7       	ldi	r24, 0x74	; 116
    1ea8:	35 c0       	rjmp	.+106    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_U: return (shifted ? 'U' : 'u');
    1eaa:	85 e7       	ldi	r24, 0x75	; 117
    1eac:	33 c0       	rjmp	.+102    	; 0x1f14 <command_console_extra+0x2dc>
        case KC_V: return (shifted ? 'V' : 'v');
    1eae:	86 e7       	ldi	r24, 0x76	; 118
    1eb0:	31 c0       	rjmp	.+98     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_W: return (shifted ? 'W' : 'w');
    1eb2:	87 e7       	ldi	r24, 0x77	; 119
    1eb4:	2f c0       	rjmp	.+94     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_X: return (shifted ? 'X' : 'x');
    1eb6:	88 e7       	ldi	r24, 0x78	; 120
    1eb8:	2d c0       	rjmp	.+90     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_Y: return (shifted ? 'Y' : 'y');
    1eba:	89 e7       	ldi	r24, 0x79	; 121
    1ebc:	2b c0       	rjmp	.+86     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_Z: return (shifted ? 'Z' : 'z');
    1ebe:	8a e7       	ldi	r24, 0x7A	; 122
    1ec0:	29 c0       	rjmp	.+82     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_1: return (shifted ? '!' : '1');
    1ec2:	81 e3       	ldi	r24, 0x31	; 49
    1ec4:	27 c0       	rjmp	.+78     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_2: return (shifted ? '@' : '2');
    1ec6:	82 e3       	ldi	r24, 0x32	; 50
    1ec8:	25 c0       	rjmp	.+74     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_3: return (shifted ? '#' : '3');
    1eca:	83 e3       	ldi	r24, 0x33	; 51
    1ecc:	23 c0       	rjmp	.+70     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_4: return (shifted ? '$' : '4');
    1ece:	84 e3       	ldi	r24, 0x34	; 52
    1ed0:	21 c0       	rjmp	.+66     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_5: return (shifted ? '%' : '5');
    1ed2:	85 e3       	ldi	r24, 0x35	; 53
    1ed4:	1f c0       	rjmp	.+62     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_6: return (shifted ? '^' : '6');
    1ed6:	86 e3       	ldi	r24, 0x36	; 54
    1ed8:	1d c0       	rjmp	.+58     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_7: return (shifted ? '&' : '7');
    1eda:	87 e3       	ldi	r24, 0x37	; 55
    1edc:	1b c0       	rjmp	.+54     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_8: return (shifted ? '*' : '8');
    1ede:	88 e3       	ldi	r24, 0x38	; 56
    1ee0:	19 c0       	rjmp	.+50     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_9: return (shifted ? '(' : '9');
    1ee2:	89 e3       	ldi	r24, 0x39	; 57
    1ee4:	17 c0       	rjmp	.+46     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_0: return (shifted ? ')' : '0');
    1ee6:	80 e3       	ldi	r24, 0x30	; 48
    1ee8:	15 c0       	rjmp	.+42     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_ENTER: return '\n';
        case KC_ESCAPE: return 0x1B;
        case KC_BSPACE: return '\b';
        case KC_TAB: return '\t';
        case KC_SPACE: return ' ';
        case KC_MINUS: return (shifted ? '_' : '-');
    1eea:	8d e2       	ldi	r24, 0x2D	; 45
    1eec:	13 c0       	rjmp	.+38     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_EQUAL: return (shifted ? '+' : '=');
    1eee:	8d e3       	ldi	r24, 0x3D	; 61
    1ef0:	11 c0       	rjmp	.+34     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_LBRACKET: return (shifted ? '{' : '[');
    1ef2:	8b e5       	ldi	r24, 0x5B	; 91
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_RBRACKET: return (shifted ? '}' : ']');
    1ef6:	8d e5       	ldi	r24, 0x5D	; 93
    1ef8:	0d c0       	rjmp	.+26     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_BSLASH: return (shifted ? '|' : '\\');
    1efa:	8c e5       	ldi	r24, 0x5C	; 92
    1efc:	0b c0       	rjmp	.+22     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_NONUS_HASH: return (shifted ? '|' : '\\');
        case KC_SCOLON: return (shifted ? ':' : ';');
    1efe:	8b e3       	ldi	r24, 0x3B	; 59
    1f00:	09 c0       	rjmp	.+18     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_QUOTE: return (shifted ? '"' : '\'');
    1f02:	87 e2       	ldi	r24, 0x27	; 39
    1f04:	07 c0       	rjmp	.+14     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_GRAVE: return (shifted ? '~' : '`');
    1f06:	80 e6       	ldi	r24, 0x60	; 96
    1f08:	05 c0       	rjmp	.+10     	; 0x1f14 <command_console_extra+0x2dc>
        case KC_COMMA: return (shifted ? '<' : ',');
    1f0a:	8c e2       	ldi	r24, 0x2C	; 44
    1f0c:	03 c0       	rjmp	.+6      	; 0x1f14 <command_console_extra+0x2dc>
        case KC_DOT: return (shifted ? '>' : '.');
    1f0e:	8e e2       	ldi	r24, 0x2E	; 46
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <command_console_extra+0x2dc>
        case KC_SLASH: return (shifted ? '?' : '/');
    1f12:	8f e2       	ldi	r24, 0x2F	; 47
 * sends charactors to the module
 */
static uint8_t code2asc(uint8_t code);
bool command_console_extra(uint8_t code)
{
    rn42_putc(code2asc(code));
    1f14:	0e 94 17 0a 	call	0x142e	; 0x142e <rn42_putc>
    return true;
}
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	cf 91       	pop	r28
    1f1c:	08 95       	ret

00001f1e <battery_led>:
}

// Indicator for battery
void battery_led(battery_led_t val)
{
    if (val == LED_TOGGLE) {
    1f1e:	83 30       	cpi	r24, 0x03	; 3
    1f20:	19 f4       	brne	.+6      	; 0x1f28 <battery_led+0xa>
        // Toggle LED
        DDRF  |=  (1<<5);
    1f22:	85 9a       	sbi	0x10, 5	; 16
        PINF  |=  (1<<5);
    1f24:	7d 9a       	sbi	0x0f, 5	; 15
    1f26:	08 95       	ret
    } else if (val == LED_ON) {
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	11 f4       	brne	.+4      	; 0x1f30 <battery_led+0x12>
        // On overriding charger status
        DDRF  |=  (1<<5);
    1f2c:	85 9a       	sbi	0x10, 5	; 16
    1f2e:	06 c0       	rjmp	.+12     	; 0x1f3c <battery_led+0x1e>
        PORTF &= ~(1<<5);
    } else if (val == LED_OFF) {
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	19 f4       	brne	.+6      	; 0x1f3a <battery_led+0x1c>
        // Off overriding charger status
        DDRF  |=  (1<<5);
    1f34:	85 9a       	sbi	0x10, 5	; 16
        PORTF |=  (1<<5);
    1f36:	8d 9a       	sbi	0x11, 5	; 17
    1f38:	08 95       	ret
    } else {
        // Display charger status
        DDRF  &= ~(1<<5);
    1f3a:	85 98       	cbi	0x10, 5	; 16
        PORTF &= ~(1<<5);
    1f3c:	8d 98       	cbi	0x11, 5	; 17
    1f3e:	08 95       	ret

00001f40 <battery_init>:
 * Battery
 */
void battery_init(void)
{
    // blink 
    battery_led(LED_ON);  _delay_ms(100);
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <battery_led>
    1f46:	2f ef       	ldi	r18, 0xFF	; 255
    1f48:	81 ee       	ldi	r24, 0xE1	; 225
    1f4a:	94 e0       	ldi	r25, 0x04	; 4
    1f4c:	21 50       	subi	r18, 0x01	; 1
    1f4e:	80 40       	sbci	r24, 0x00	; 0
    1f50:	90 40       	sbci	r25, 0x00	; 0
    1f52:	e1 f7       	brne	.-8      	; 0x1f4c <battery_init+0xc>
    1f54:	00 c0       	rjmp	.+0      	; 0x1f56 <battery_init+0x16>
    1f56:	00 00       	nop
    battery_led(LED_OFF); _delay_ms(100);
    1f58:	82 e0       	ldi	r24, 0x02	; 2
    1f5a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <battery_led>
    1f5e:	2f ef       	ldi	r18, 0xFF	; 255
    1f60:	81 ee       	ldi	r24, 0xE1	; 225
    1f62:	94 e0       	ldi	r25, 0x04	; 4
    1f64:	21 50       	subi	r18, 0x01	; 1
    1f66:	80 40       	sbci	r24, 0x00	; 0
    1f68:	90 40       	sbci	r25, 0x00	; 0
    1f6a:	e1 f7       	brne	.-8      	; 0x1f64 <battery_init+0x24>
    1f6c:	00 c0       	rjmp	.+0      	; 0x1f6e <battery_init+0x2e>
    1f6e:	00 00       	nop
    battery_led(LED_ON);  _delay_ms(100);
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <battery_led>
    1f76:	2f ef       	ldi	r18, 0xFF	; 255
    1f78:	81 ee       	ldi	r24, 0xE1	; 225
    1f7a:	94 e0       	ldi	r25, 0x04	; 4
    1f7c:	21 50       	subi	r18, 0x01	; 1
    1f7e:	80 40       	sbci	r24, 0x00	; 0
    1f80:	90 40       	sbci	r25, 0x00	; 0
    1f82:	e1 f7       	brne	.-8      	; 0x1f7c <battery_init+0x3c>
    1f84:	00 c0       	rjmp	.+0      	; 0x1f86 <battery_init+0x46>
    1f86:	00 00       	nop
    battery_led(LED_OFF); _delay_ms(100);
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <battery_led>
    1f8e:	2f ef       	ldi	r18, 0xFF	; 255
    1f90:	81 ee       	ldi	r24, 0xE1	; 225
    1f92:	94 e0       	ldi	r25, 0x04	; 4
    1f94:	21 50       	subi	r18, 0x01	; 1
    1f96:	80 40       	sbci	r24, 0x00	; 0
    1f98:	90 40       	sbci	r25, 0x00	; 0
    1f9a:	e1 f7       	brne	.-8      	; 0x1f94 <battery_init+0x54>
    1f9c:	00 c0       	rjmp	.+0      	; 0x1f9e <battery_init+0x5e>
    1f9e:	00 00       	nop
    // LED indicates charger status
    battery_led(LED_CHARGER);
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <battery_led>

    // ADC setting for voltage monitor
    // Ref:2.56V band-gap, Input:ADC0(PF0), Prescale:128(16MHz/128=125KHz)
    ADMUX = (1<<REFS1) | (1<<REFS0);
    1fa6:	80 ec       	ldi	r24, 0xC0	; 192
    1fa8:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    1fac:	87 e0       	ldi	r24, 0x07	; 7
    1fae:	80 93 7a 00 	sts	0x007A, r24
    // digital input buffer disable(24.9.5)
    DIDR0 = (1<<ADC0D) | (1<<ADC4D) | (1<<ADC7D);
    1fb2:	81 e9       	ldi	r24, 0x91	; 145
    1fb4:	80 93 7e 00 	sts	0x007E, r24
    DIDR1 = (1<<AIN0D);
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	80 93 7f 00 	sts	0x007F, r24
    DIDR2 = (1<<ADC8D) | (1<<ADC9D) | (1<<ADC11D) | (1<<ADC12D) | (1<<ADC13D);
    1fbe:	8b e3       	ldi	r24, 0x3B	; 59
    1fc0:	80 93 7d 00 	sts	0x007D, r24

    // ADC disable voltate divider(PF4)
    DDRF  |=  (1<<4);
    1fc4:	84 9a       	sbi	0x10, 4	; 16
    PORTF &= ~(1<<4);
    1fc6:	8c 98       	cbi	0x11, 4	; 17
    1fc8:	08 95       	ret

00001fca <battery_charging>:
    }
}

bool battery_charging(void)
{
    if (!(USBSTA&(1<<VBUS))) return false;
    1fca:	80 91 d9 00 	lds	r24, 0x00D9
    1fce:	80 ff       	sbrs	r24, 0
    1fd0:	1b c0       	rjmp	.+54     	; 0x2008 <battery_charging+0x3e>
    //   Hi-Z       Hi-Z       Hi-Z     Shutdown/No Battery
    //   Low        Low        Low      Charging
    //   Hi         Hi-Z       Hi-Z     Charged

    // preserve last register status
    uint8_t ddrf_prev  = DDRF;
    1fd2:	20 b3       	in	r18, 0x10	; 16
    uint8_t portf_prev = PORTF;
    1fd4:	91 b3       	in	r25, 0x11	; 17

    // Input with pullup
    DDRF  &= ~(1<<5);
    1fd6:	85 98       	cbi	0x10, 5	; 16
    PORTF |=  (1<<5);
    1fd8:	8d 9a       	sbi	0x11, 5	; 17
    1fda:	ef e9       	ldi	r30, 0x9F	; 159
    1fdc:	ff e0       	ldi	r31, 0x0F	; 15
    1fde:	31 97       	sbiw	r30, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <battery_charging+0x14>
    1fe2:	00 c0       	rjmp	.+0      	; 0x1fe4 <battery_charging+0x1a>
    1fe4:	00 00       	nop
    _delay_ms(1);
    bool charging = PINF&(1<<5) ? false : true;
    1fe6:	8f b1       	in	r24, 0x0f	; 15
    1fe8:	85 fb       	bst	r24, 5
    1fea:	88 27       	eor	r24, r24
    1fec:	80 f9       	bld	r24, 0

    // restore last register status
    DDRF  = (DDRF&~(1<<5))  | (ddrf_prev&(1<<5));
    1fee:	30 b3       	in	r19, 0x10	; 16
    1ff0:	20 72       	andi	r18, 0x20	; 32
    1ff2:	3f 7d       	andi	r19, 0xDF	; 223
    1ff4:	23 2b       	or	r18, r19
    1ff6:	20 bb       	out	0x10, r18	; 16
    PORTF = (PORTF&~(1<<5)) | (portf_prev&(1<<5));
    1ff8:	21 b3       	in	r18, 0x11	; 17
    1ffa:	90 72       	andi	r25, 0x20	; 32
    1ffc:	2f 7d       	andi	r18, 0xDF	; 223
    1ffe:	92 2b       	or	r25, r18
    2000:	91 bb       	out	0x11, r25	; 17

    // TODO: With MCP73831 this can not get stable status when charging.
    // LED is powered from PSEL line(USB or Lipo)
    // due to weak low output of STAT pin?
    // due to pull-up'd via resitor and LED?
    return charging;
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	89 27       	eor	r24, r25
    2006:	08 95       	ret
    }
}

bool battery_charging(void)
{
    if (!(USBSTA&(1<<VBUS))) return false;
    2008:	80 e0       	ldi	r24, 0x00	; 0
    // TODO: With MCP73831 this can not get stable status when charging.
    // LED is powered from PSEL line(USB or Lipo)
    // due to weak low output of STAT pin?
    // due to pull-up'd via resitor and LED?
    return charging;
}
    200a:	08 95       	ret

0000200c <battery_voltage>:

// Returns voltage in mV
uint16_t battery_voltage(void)
{
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	00 d0       	rcall	.+0      	; 0x2012 <battery_voltage+0x6>
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    // ADC disable voltate divider(PF4)
    DDRF  |=  (1<<4);
    2016:	84 9a       	sbi	0x10, 4	; 16
    PORTF |=  (1<<4);
    2018:	8c 9a       	sbi	0x11, 4	; 17

    volatile uint16_t bat;
    ADCSRA |= (1<<ADEN);
    201a:	80 91 7a 00 	lds	r24, 0x007A
    201e:	80 68       	ori	r24, 0x80	; 128
    2020:	80 93 7a 00 	sts	0x007A, r24
    2024:	8f e9       	ldi	r24, 0x9F	; 159
    2026:	9f e0       	ldi	r25, 0x0F	; 15
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <battery_voltage+0x1c>
    202c:	00 c0       	rjmp	.+0      	; 0x202e <battery_voltage+0x22>
    202e:	00 00       	nop
    _delay_ms(1);   // wait for charging S/H capacitance

    ADCSRA |= (1<<ADSC);
    2030:	80 91 7a 00 	lds	r24, 0x007A
    2034:	80 64       	ori	r24, 0x40	; 64
    2036:	80 93 7a 00 	sts	0x007A, r24
    while (ADCSRA & (1<<ADSC)) ;
    203a:	80 91 7a 00 	lds	r24, 0x007A
    203e:	86 fd       	sbrc	r24, 6
    2040:	fc cf       	rjmp	.-8      	; 0x203a <battery_voltage+0x2e>
    bat = ADC;
    2042:	80 91 78 00 	lds	r24, 0x0078
    2046:	90 91 79 00 	lds	r25, 0x0079
    204a:	9a 83       	std	Y+2, r25	; 0x02
    204c:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1<<ADEN);
    204e:	80 91 7a 00 	lds	r24, 0x007A
    2052:	8f 77       	andi	r24, 0x7F	; 127
    2054:	80 93 7a 00 	sts	0x007A, r24

    // ADC disable voltate divider(PF4)
    DDRF  |=  (1<<4);
    2058:	84 9a       	sbi	0x10, 4	; 16
    PORTF &= ~(1<<4);
    205a:	8c 98       	cbi	0x11, 4	; 17

    return (bat - BATTERY_ADC_OFFSET) * BATTERY_ADC_RESOLUTION;
    205c:	29 81       	ldd	r18, Y+1	; 0x01
    205e:	3a 81       	ldd	r19, Y+2	; 0x02
    2060:	45 e0       	ldi	r20, 0x05	; 5
    2062:	42 9f       	mul	r20, r18
    2064:	c0 01       	movw	r24, r0
    2066:	43 9f       	mul	r20, r19
    2068:	90 0d       	add	r25, r0
    206a:	11 24       	eor	r1, r1
}
    206c:	80 55       	subi	r24, 0x50	; 80
    206e:	91 09       	sbc	r25, r1
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	08 95       	ret

0000207a <battery_status>:
    return low;
}

battery_status_t battery_status(void)
{
    if (USBSTA&(1<<VBUS)) {
    207a:	80 91 d9 00 	lds	r24, 0x00D9
    207e:	80 fd       	sbrc	r24, 0
        /* powered */
        return battery_charging() ? CHARGING : FULL_CHARGED;
    2080:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <battery_charging>
    return (bat - BATTERY_ADC_OFFSET) * BATTERY_ADC_RESOLUTION;
}

static bool low_voltage(void) {
    static bool low = false;
    uint16_t v = battery_voltage();
    2084:	0e 94 06 10 	call	0x200c	; 0x200c <battery_voltage>
    if (v < BATTERY_VOLTAGE_LOW_LIMIT) {
    2088:	8c 3a       	cpi	r24, 0xAC	; 172
    208a:	2d e0       	ldi	r18, 0x0D	; 13
    208c:	92 07       	cpc	r25, r18
    208e:	20 f4       	brcc	.+8      	; 0x2098 <battery_status+0x1e>
        low = true;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	80 93 d6 02 	sts	0x02D6, r24
    2096:	05 c0       	rjmp	.+10     	; 0x20a2 <battery_status+0x28>
    } else if (v > BATTERY_VOLTAGE_LOW_RECOVERY) {
    2098:	85 37       	cpi	r24, 0x75	; 117
    209a:	9e 40       	sbci	r25, 0x0E	; 14
    209c:	10 f0       	brcs	.+4      	; 0x20a2 <battery_status+0x28>
        low = false;
    209e:	10 92 d6 02 	sts	0x02D6, r1
    if (USBSTA&(1<<VBUS)) {
        /* powered */
        return battery_charging() ? CHARGING : FULL_CHARGED;
    } else {
        /* not powered */
        return low_voltage() ? LOW_VOLTAGE : DISCHARGING;
    20a2:	80 91 d6 02 	lds	r24, 0x02D6
    20a6:	88 23       	and	r24, r24
    20a8:	11 f0       	breq	.+4      	; 0x20ae <battery_status+0x34>
    20aa:	83 e0       	ldi	r24, 0x03	; 3
    20ac:	08 95       	ret
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    }
}
    20b0:	08 95       	ret

000020b2 <sendchar_func>:
#include "wait.h"
#include "suart.h"
#include "suspend.h"

static int8_t sendchar_func(uint8_t c)
{
    20b2:	cf 93       	push	r28
    20b4:	c8 2f       	mov	r28, r24
    xmit(c);        // SUART
    20b6:	0e 94 b1 06 	call	0xd62	; 0xd62 <xmit>
    sendchar(c);    // LUFA
    20ba:	8c 2f       	mov	r24, r28
    20bc:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <sendchar>
    return 0;
}
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	cf 91       	pop	r28
    20c4:	08 95       	ret

000020c6 <main>:

static void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    20c6:	84 b7       	in	r24, 0x34	; 52
    20c8:	87 7f       	andi	r24, 0xF7	; 247
    20ca:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    20cc:	88 e1       	ldi	r24, 0x18	; 24
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	80 93 60 00 	sts	0x0060, r24
    20d6:	10 92 60 00 	sts	0x0060, r1
    20da:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	80 e8       	ldi	r24, 0x80	; 128
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	80 93 61 00 	sts	0x0061, r24
    20e8:	90 93 61 00 	sts	0x0061, r25
    20ec:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    20ee:	0e 94 39 15 	call	0x2a72	; 0x2a72 <USB_Disable>

    USB_Init();
    20f2:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    20f6:	80 91 e2 00 	lds	r24, 0x00E2
    20fa:	84 60       	ori	r24, 0x04	; 4
    20fc:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar_func);
    2100:	89 e5       	ldi	r24, 0x59	; 89
    2102:	90 e1       	ldi	r25, 0x10	; 16
    2104:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <print_set_sendchar>

    // SUART PD0:output, PD1:input
    DDRD |= (1<<0);
    2108:	50 9a       	sbi	0x0a, 0	; 10
    PORTD |= (1<<0);
    210a:	58 9a       	sbi	0x0b, 0	; 11
    DDRD &= ~(1<<1);
    210c:	51 98       	cbi	0x0a, 1	; 10
    PORTD |= (1<<1);
    210e:	59 9a       	sbi	0x0b, 1	; 11

int main(void)  __attribute__ ((weak));
int main(void)
{
    SetupHardware();
    sei();
    2110:	78 94       	sei
    2112:	8f ef       	ldi	r24, 0xFF	; 255

    /* wait for USB startup to get ready for debug output */
    uint8_t timeout = 255;  // timeout when USB is not available(Bluetooth)
    while (timeout-- && USB_DeviceState != DEVICE_STATE_Configured) {
    2114:	90 91 56 03 	lds	r25, 0x0356
    2118:	81 50       	subi	r24, 0x01	; 1
    211a:	94 30       	cpi	r25, 0x04	; 4
    211c:	41 f0       	breq	.+16     	; 0x212e <main+0x68>
    211e:	ef e7       	ldi	r30, 0x7F	; 127
    2120:	fe e3       	ldi	r31, 0x3E	; 62
    2122:	31 97       	sbiw	r30, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <main+0x5c>
    2126:	00 c0       	rjmp	.+0      	; 0x2128 <main+0x62>
    2128:	00 00       	nop
    212a:	81 11       	cpse	r24, r1
    212c:	f3 cf       	rjmp	.-26     	; 0x2114 <main+0x4e>
        ;
#else
        USB_USBTask();
#endif
    }
    print("\nUSB init\n");
    212e:	8e ec       	ldi	r24, 0xCE	; 206
    2130:	94 e0       	ldi	r25, 0x04	; 4
    2132:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>

    rn42_init();
    2136:	0e 94 21 0a 	call	0x1442	; 0x1442 <rn42_init>
    rn42_task_init();
    213a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <rn42_task_init>
    print("RN-42 init\n");
    213e:	82 ec       	ldi	r24, 0xC2	; 194
    2140:	94 e0       	ldi	r25, 0x04	; 4
    2142:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>

    /* init modules */
    keyboard_init();
    2146:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <keyboard_init>

    if (!rn42_rts()) {
    214a:	0e 94 34 0a 	call	0x1468	; 0x1468 <rn42_rts>
    214e:	81 11       	cpse	r24, r1
    2150:	03 c0       	rjmp	.+6      	; 0x2158 <main+0x92>
        host_set_driver(&rn42_driver);
    2152:	8a e0       	ldi	r24, 0x0A	; 10
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	02 c0       	rjmp	.+4      	; 0x215c <main+0x96>
    } else {
        host_set_driver(&lufa_driver);
    2158:	86 e1       	ldi	r24, 0x16	; 22
    215a:	91 e0       	ldi	r25, 0x01	; 1
    215c:	0e 94 10 18 	call	0x3020	; 0x3020 <host_set_driver>

#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start\n");
    2160:	82 eb       	ldi	r24, 0xB2	; 178
    2162:	94 e0       	ldi	r25, 0x04	; 4
    2164:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    while (1) {
        while (rn42_rts() && // RN42 is off
    2168:	0e 94 34 0a 	call	0x1468	; 0x1468 <rn42_rts>
    216c:	88 23       	and	r24, r24
    216e:	19 f1       	breq	.+70     	; 0x21b6 <main+0xf0>
                USB_DeviceState == DEVICE_STATE_Suspended) {
    2170:	80 91 56 03 	lds	r24, 0x0356
    sleep_led_init();
#endif

    print("Keyboard start\n");
    while (1) {
        while (rn42_rts() && // RN42 is off
    2174:	85 30       	cpi	r24, 0x05	; 5
    2176:	f9 f4       	brne	.+62     	; 0x21b6 <main+0xf0>
                USB_DeviceState == DEVICE_STATE_Suspended) {
            print("[s]");
    2178:	8e ea       	ldi	r24, 0xAE	; 174
    217a:	94 e0       	ldi	r25, 0x04	; 4
    217c:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            matrix_power_down();
    2180:	0e 94 b3 08 	call	0x1166	; 0x1166 <matrix_power_down>
            suspend_power_down();
    2184:	0e 94 87 24 	call	0x490e	; 0x490e <suspend_power_down>
            suspend_power_down();
    2188:	0e 94 87 24 	call	0x490e	; 0x490e <suspend_power_down>
            suspend_power_down();
    218c:	0e 94 87 24 	call	0x490e	; 0x490e <suspend_power_down>
            suspend_power_down();
    2190:	0e 94 87 24 	call	0x490e	; 0x490e <suspend_power_down>
            suspend_power_down();
    2194:	0e 94 87 24 	call	0x490e	; 0x490e <suspend_power_down>
            suspend_power_down();
    2198:	0e 94 87 24 	call	0x490e	; 0x490e <suspend_power_down>
            suspend_power_down();
    219c:	0e 94 87 24 	call	0x490e	; 0x490e <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    21a0:	80 91 54 03 	lds	r24, 0x0354
    21a4:	88 23       	and	r24, r24
    21a6:	01 f3       	breq	.-64     	; 0x2168 <main+0xa2>
    21a8:	0e 94 ad 24 	call	0x495a	; 0x495a <suspend_wakeup_condition>
    21ac:	88 23       	and	r24, r24
    21ae:	e1 f2       	breq	.-72     	; 0x2168 <main+0xa2>
                    USB_Device_SendRemoteWakeup();
    21b0:	0e 94 91 13 	call	0x2722	; 0x2722 <USB_Device_SendRemoteWakeup>
    21b4:	d9 cf       	rjmp	.-78     	; 0x2168 <main+0xa2>
            }
        }

        keyboard_task();
    21b6:	0e 94 d6 18 	call	0x31ac	; 0x31ac <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif

        rn42_task();
    21ba:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <rn42_task>
    }
    21be:	d4 cf       	rjmp	.-88     	; 0x2168 <main+0xa2>

000021c0 <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    21c0:	80 91 e3 02 	lds	r24, 0x02E3
    21c4:	08 95       	ret

000021c6 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    21c6:	9f b7       	in	r25, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	10 92 da 02 	sts	0x02DA, r1
    21ce:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    21d0:	90 91 56 03 	lds	r25, 0x0356
    21d4:	94 30       	cpi	r25, 0x04	; 4
    21d6:	09 f0       	breq	.+2      	; 0x21da <sendchar+0x14>
    21d8:	58 c0       	rjmp	.+176    	; 0x228a <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    21da:	90 91 e9 00 	lds	r25, 0x00E9
    21de:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    21e0:	20 91 ec 00 	lds	r18, 0x00EC
    21e4:	20 ff       	sbrs	r18, 0
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <sendchar+0x26>
    21e8:	20 e8       	ldi	r18, 0x80	; 128
    21ea:	01 c0       	rjmp	.+2      	; 0x21ee <sendchar+0x28>
    21ec:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    21ee:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21f0:	94 e0       	ldi	r25, 0x04	; 4
    21f2:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    21f6:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    21fa:	90 ff       	sbrs	r25, 0
    21fc:	43 c0       	rjmp	.+134    	; 0x2284 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    21fe:	90 91 ee 00 	lds	r25, 0x00EE
    2202:	97 ff       	sbrs	r25, 7
    2204:	3f c0       	rjmp	.+126    	; 0x2284 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    2206:	90 91 d7 02 	lds	r25, 0x02D7
    220a:	99 23       	and	r25, r25
    220c:	21 f0       	breq	.+8      	; 0x2216 <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    220e:	90 91 e8 00 	lds	r25, 0x00E8
    2212:	95 ff       	sbrs	r25, 5
    2214:	37 c0       	rjmp	.+110    	; 0x2284 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    2216:	10 92 d7 02 	sts	0x02D7, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    221a:	96 e0       	ldi	r25, 0x06	; 6
    221c:	30 91 e8 00 	lds	r19, 0x00E8
    2220:	35 fd       	sbrc	r19, 5
    2222:	15 c0       	rjmp	.+42     	; 0x224e <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    2224:	30 91 56 03 	lds	r19, 0x0356
    2228:	34 30       	cpi	r19, 0x04	; 4
    222a:	61 f5       	brne	.+88     	; 0x2284 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    222c:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    2230:	35 fd       	sbrc	r19, 5
    2232:	28 c0       	rjmp	.+80     	; 0x2284 <sendchar+0xbe>
    2234:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    2236:	21 f4       	brne	.+8      	; 0x2240 <sendchar+0x7a>
            timeouted = true;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	80 93 d7 02 	sts	0x02D7, r24
            goto ERROR_EXIT;
    223e:	22 c0       	rjmp	.+68     	; 0x2284 <sendchar+0xbe>
    2240:	ef e9       	ldi	r30, 0x9F	; 159
    2242:	ff e0       	ldi	r31, 0x0F	; 15
    2244:	31 97       	sbiw	r30, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <sendchar+0x7e>
    2248:	00 c0       	rjmp	.+0      	; 0x224a <sendchar+0x84>
    224a:	00 00       	nop
    224c:	e7 cf       	rjmp	.-50     	; 0x221c <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    224e:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2252:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    2256:	85 fd       	sbrc	r24, 5
    2258:	0a c0       	rjmp	.+20     	; 0x226e <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    225a:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    225e:	80 ff       	sbrs	r24, 0
    2260:	fc cf       	rjmp	.-8      	; 0x225a <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2262:	80 91 e8 00 	lds	r24, 0x00E8
    2266:	8e 77       	andi	r24, 0x7E	; 126
    2268:	80 93 e8 00 	sts	0x00E8, r24
    226c:	06 c0       	rjmp	.+12     	; 0x227a <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    226e:	8f b7       	in	r24, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	91 e0       	ldi	r25, 0x01	; 1
    2274:	90 93 da 02 	sts	0x02DA, r25
    2278:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    227a:	2f 70       	andi	r18, 0x0F	; 15
    227c:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	08 95       	ret
    2284:	2f 70       	andi	r18, 0x0F	; 15
    2286:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    228a:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    228c:	08 95       	ret

0000228e <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    228e:	cf 93       	push	r28
    2290:	df 93       	push	r29
    2292:	00 d0       	rcall	.+0      	; 0x2294 <send_consumer+0x6>
    2294:	1f 92       	push	r1
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    229a:	20 91 56 03 	lds	r18, 0x0356
    229e:	24 30       	cpi	r18, 0x04	; 4
    22a0:	19 f5       	brne	.+70     	; 0x22e8 <send_consumer+0x5a>
        return;

    report_extra_t r = {
    22a2:	23 e0       	ldi	r18, 0x03	; 3
    22a4:	29 83       	std	Y+1, r18	; 0x01
    22a6:	9b 83       	std	Y+3, r25	; 0x03
    22a8:	8a 83       	std	Y+2, r24	; 0x02
    22aa:	20 93 e9 00 	sts	0x00E9, r18
    22ae:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    22b0:	90 91 e8 00 	lds	r25, 0x00E8
    22b4:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    22b6:	95 fd       	sbrc	r25, 5
    22b8:	06 c0       	rjmp	.+12     	; 0x22c6 <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    22ba:	95 ed       	ldi	r25, 0xD5	; 213
    22bc:	9a 95       	dec	r25
    22be:	f1 f7       	brne	.-4      	; 0x22bc <send_consumer+0x2e>
    22c0:	00 00       	nop
    22c2:	81 11       	cpse	r24, r1
    22c4:	f5 cf       	rjmp	.-22     	; 0x22b0 <send_consumer+0x22>
    22c6:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    22ca:	85 ff       	sbrs	r24, 5
    22cc:	0d c0       	rjmp	.+26     	; 0x22e8 <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	63 e0       	ldi	r22, 0x03	; 3
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	ce 01       	movw	r24, r28
    22d8:	01 96       	adiw	r24, 0x01	; 1
    22da:	0e 94 a7 13 	call	0x274e	; 0x274e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22de:	80 91 e8 00 	lds	r24, 0x00E8
    22e2:	8e 77       	andi	r24, 0x7E	; 126
    22e4:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	08 95       	ret

000022f4 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <send_system+0x6>
    22fa:	1f 92       	push	r1
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    2300:	20 91 56 03 	lds	r18, 0x0356
    2304:	24 30       	cpi	r18, 0x04	; 4
    2306:	21 f5       	brne	.+72     	; 0x2350 <send_system+0x5c>
        return;

    report_extra_t r = {
    2308:	22 e0       	ldi	r18, 0x02	; 2
    230a:	29 83       	std	Y+1, r18	; 0x01
    230c:	9b 83       	std	Y+3, r25	; 0x03
    230e:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2310:	83 e0       	ldi	r24, 0x03	; 3
    2312:	80 93 e9 00 	sts	0x00E9, r24
    2316:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2318:	90 91 e8 00 	lds	r25, 0x00E8
    231c:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    231e:	95 fd       	sbrc	r25, 5
    2320:	06 c0       	rjmp	.+12     	; 0x232e <send_system+0x3a>
    2322:	95 ed       	ldi	r25, 0xD5	; 213
    2324:	9a 95       	dec	r25
    2326:	f1 f7       	brne	.-4      	; 0x2324 <send_system+0x30>
    2328:	00 00       	nop
    232a:	81 11       	cpse	r24, r1
    232c:	f5 cf       	rjmp	.-22     	; 0x2318 <send_system+0x24>
    232e:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    2332:	85 ff       	sbrs	r24, 5
    2334:	0d c0       	rjmp	.+26     	; 0x2350 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    2336:	40 e0       	ldi	r20, 0x00	; 0
    2338:	50 e0       	ldi	r21, 0x00	; 0
    233a:	63 e0       	ldi	r22, 0x03	; 3
    233c:	70 e0       	ldi	r23, 0x00	; 0
    233e:	ce 01       	movw	r24, r28
    2340:	01 96       	adiw	r24, 0x01	; 1
    2342:	0e 94 a7 13 	call	0x274e	; 0x274e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2346:	80 91 e8 00 	lds	r24, 0x00E8
    234a:	8e 77       	andi	r24, 0x7E	; 126
    234c:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	08 95       	ret

0000235c <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    235c:	20 91 56 03 	lds	r18, 0x0356
    2360:	24 30       	cpi	r18, 0x04	; 4
    2362:	f1 f4       	brne	.+60     	; 0x23a0 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2364:	22 e0       	ldi	r18, 0x02	; 2
    2366:	20 93 e9 00 	sts	0x00E9, r18
    236a:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    236c:	30 91 e8 00 	lds	r19, 0x00E8
    2370:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    2372:	35 fd       	sbrc	r19, 5
    2374:	06 c0       	rjmp	.+12     	; 0x2382 <send_mouse+0x26>
    2376:	35 ed       	ldi	r19, 0xD5	; 213
    2378:	3a 95       	dec	r19
    237a:	f1 f7       	brne	.-4      	; 0x2378 <send_mouse+0x1c>
    237c:	00 00       	nop
    237e:	21 11       	cpse	r18, r1
    2380:	f5 cf       	rjmp	.-22     	; 0x236c <send_mouse+0x10>
    2382:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    2386:	25 ff       	sbrs	r18, 5
    2388:	0b c0       	rjmp	.+22     	; 0x23a0 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	65 e0       	ldi	r22, 0x05	; 5
    2390:	70 e0       	ldi	r23, 0x00	; 0
    2392:	0e 94 a7 13 	call	0x274e	; 0x274e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2396:	80 91 e8 00 	lds	r24, 0x00E8
    239a:	8e 77       	andi	r24, 0x7E	; 126
    239c:	80 93 e8 00 	sts	0x00E8, r24
    23a0:	08 95       	ret

000023a2 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    23a8:	80 91 56 03 	lds	r24, 0x0356
    23ac:	84 30       	cpi	r24, 0x04	; 4
    23ae:	39 f5       	brne	.+78     	; 0x23fe <send_keyboard+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	80 93 e9 00 	sts	0x00E9, r24
    23b6:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    23b8:	90 91 e8 00 	lds	r25, 0x00E8
    23bc:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    23be:	95 fd       	sbrc	r25, 5
    23c0:	06 c0       	rjmp	.+12     	; 0x23ce <send_keyboard+0x2c>
    23c2:	95 ed       	ldi	r25, 0xD5	; 213
    23c4:	9a 95       	dec	r25
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <send_keyboard+0x22>
    23c8:	00 00       	nop
    23ca:	81 11       	cpse	r24, r1
    23cc:	f5 cf       	rjmp	.-22     	; 0x23b8 <send_keyboard+0x16>
    23ce:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    23d2:	85 ff       	sbrs	r24, 5
    23d4:	14 c0       	rjmp	.+40     	; 0x23fe <send_keyboard+0x5c>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	68 e0       	ldi	r22, 0x08	; 8
    23dc:	70 e0       	ldi	r23, 0x00	; 0
    23de:	ce 01       	movw	r24, r28
    23e0:	0e 94 a7 13 	call	0x274e	; 0x274e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    23e4:	80 91 e8 00 	lds	r24, 0x00E8
    23e8:	8e 77       	andi	r24, 0x7E	; 126
    23ea:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    23ee:	88 e0       	ldi	r24, 0x08	; 8
    23f0:	fe 01       	movw	r30, r28
    23f2:	ab ed       	ldi	r26, 0xDB	; 219
    23f4:	b2 e0       	ldi	r27, 0x02	; 2
    23f6:	01 90       	ld	r0, Z+
    23f8:	0d 92       	st	X+, r0
    23fa:	8a 95       	dec	r24
    23fc:	e1 f7       	brne	.-8      	; 0x23f6 <send_keyboard+0x54>
}
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	08 95       	ret

00002404 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    2404:	8d ed       	ldi	r24, 0xDD	; 221
    2406:	94 e0       	ldi	r25, 0x04	; 4
    2408:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    240c:	80 91 55 03 	lds	r24, 0x0355
    2410:	81 11       	cpse	r24, r1
    2412:	09 c0       	rjmp	.+18     	; 0x2426 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    2414:	0e 94 39 15 	call	0x2a72	; 0x2a72 <USB_Disable>
        USB_Init();
    2418:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <USB_Init>
    241c:	80 91 e2 00 	lds	r24, 0x00E2
    2420:	84 60       	ori	r24, 0x04	; 4
    2422:	80 93 e2 00 	sts	0x00E2, r24
    2426:	08 95       	ret

00002428 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    2428:	89 ed       	ldi	r24, 0xD9	; 217
    242a:	94 e0       	ldi	r25, 0x04	; 4
    242c:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    2430:	10 92 55 03 	sts	0x0355, r1
    2434:	08 95       	ret

00002436 <EVENT_USB_Device_Reset>:
    }
*/
}

void EVENT_USB_Device_Reset(void)
{
    2436:	08 95       	ret

00002438 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    2438:	80 91 d8 02 	lds	r24, 0x02D8
    243c:	8f 5f       	subi	r24, 0xFF	; 255
    243e:	80 93 d8 02 	sts	0x02D8, r24
    2442:	62 e3       	ldi	r22, 0x32	; 50
    2444:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <__udivmodqi4>
    2448:	91 11       	cpse	r25, r1
    244a:	35 c0       	rjmp	.+106    	; 0x24b6 <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    244c:	10 92 d8 02 	sts	0x02D8, r1

    if (!console_flush) return;
    2450:	80 91 da 02 	lds	r24, 0x02DA
    2454:	88 23       	and	r24, r24
    2456:	79 f1       	breq	.+94     	; 0x24b6 <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    2458:	80 91 56 03 	lds	r24, 0x0356
    245c:	84 30       	cpi	r24, 0x04	; 4
    245e:	49 f5       	brne	.+82     	; 0x24b2 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2460:	80 91 e9 00 	lds	r24, 0x00E9
    2464:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2466:	90 91 ec 00 	lds	r25, 0x00EC
    246a:	90 ff       	sbrs	r25, 0
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <EVENT_USB_Device_StartOfFrame+0x3a>
    246e:	90 e8       	ldi	r25, 0x80	; 128
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <EVENT_USB_Device_StartOfFrame+0x3c>
    2472:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2474:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2476:	84 e0       	ldi	r24, 0x04	; 4
    2478:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    247c:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    2480:	80 ff       	sbrs	r24, 0
    2482:	14 c0       	rjmp	.+40     	; 0x24ac <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    2484:	80 91 ee 00 	lds	r24, 0x00EE
    2488:	87 ff       	sbrs	r24, 7
    248a:	10 c0       	rjmp	.+32     	; 0x24ac <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    248c:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    2490:	85 ff       	sbrs	r24, 5
    2492:	03 c0       	rjmp	.+6      	; 0x249a <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2494:	10 92 f1 00 	sts	0x00F1, r1
    2498:	f9 cf       	rjmp	.-14     	; 0x248c <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    249a:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    249e:	80 ff       	sbrs	r24, 0
    24a0:	05 c0       	rjmp	.+10     	; 0x24ac <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    24a2:	80 91 e8 00 	lds	r24, 0x00E8
    24a6:	8e 77       	andi	r24, 0x7E	; 126
    24a8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    24ac:	9f 70       	andi	r25, 0x0F	; 15
    24ae:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    24b2:	10 92 da 02 	sts	0x02DA, r1
    24b6:	08 95       	ret

000024b8 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    24b8:	42 e0       	ldi	r20, 0x02	; 2
    24ba:	61 ec       	ldi	r22, 0xC1	; 193
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	0e 94 b3 14 	call	0x2966	; 0x2966 <Endpoint_ConfigureEndpoint_Prv>
    24c2:	42 e0       	ldi	r20, 0x02	; 2
    24c4:	61 ec       	ldi	r22, 0xC1	; 193
    24c6:	82 e0       	ldi	r24, 0x02	; 2
    24c8:	0e 94 b3 14 	call	0x2966	; 0x2966 <Endpoint_ConfigureEndpoint_Prv>
    24cc:	42 e0       	ldi	r20, 0x02	; 2
    24ce:	61 ec       	ldi	r22, 0xC1	; 193
    24d0:	83 e0       	ldi	r24, 0x03	; 3
    24d2:	0e 94 b3 14 	call	0x2966	; 0x2966 <Endpoint_ConfigureEndpoint_Prv>
    24d6:	42 e2       	ldi	r20, 0x22	; 34
    24d8:	61 ec       	ldi	r22, 0xC1	; 193
    24da:	84 e0       	ldi	r24, 0x04	; 4
    24dc:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <Endpoint_ConfigureEndpoint_Prv>

000024e0 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    24e0:	80 91 58 03 	lds	r24, 0x0358
    24e4:	83 30       	cpi	r24, 0x03	; 3
    24e6:	09 f4       	brne	.+2      	; 0x24ea <EVENT_USB_Device_ControlRequest+0xa>
    24e8:	53 c0       	rjmp	.+166    	; 0x2590 <EVENT_USB_Device_ControlRequest+0xb0>
    24ea:	30 f4       	brcc	.+12     	; 0x24f8 <EVENT_USB_Device_ControlRequest+0x18>
    24ec:	81 30       	cpi	r24, 0x01	; 1
    24ee:	71 f0       	breq	.+28     	; 0x250c <EVENT_USB_Device_ControlRequest+0x2c>
    24f0:	82 30       	cpi	r24, 0x02	; 2
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <EVENT_USB_Device_ControlRequest+0x16>
    24f4:	8c c0       	rjmp	.+280    	; 0x260e <EVENT_USB_Device_ControlRequest+0x12e>
    24f6:	08 95       	ret
    24f8:	8a 30       	cpi	r24, 0x0A	; 10
    24fa:	09 f4       	brne	.+2      	; 0x24fe <EVENT_USB_Device_ControlRequest+0x1e>
    24fc:	78 c0       	rjmp	.+240    	; 0x25ee <EVENT_USB_Device_ControlRequest+0x10e>
    24fe:	8b 30       	cpi	r24, 0x0B	; 11
    2500:	09 f4       	brne	.+2      	; 0x2504 <EVENT_USB_Device_ControlRequest+0x24>
    2502:	5e c0       	rjmp	.+188    	; 0x25c0 <EVENT_USB_Device_ControlRequest+0xe0>
    2504:	89 30       	cpi	r24, 0x09	; 9
    2506:	09 f0       	breq	.+2      	; 0x250a <EVENT_USB_Device_ControlRequest+0x2a>
    2508:	9a c0       	rjmp	.+308    	; 0x263e <EVENT_USB_Device_ControlRequest+0x15e>
    250a:	20 c0       	rjmp	.+64     	; 0x254c <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    250c:	80 91 57 03 	lds	r24, 0x0357
    2510:	81 3a       	cpi	r24, 0xA1	; 161
    2512:	09 f0       	breq	.+2      	; 0x2516 <EVENT_USB_Device_ControlRequest+0x36>
    2514:	94 c0       	rjmp	.+296    	; 0x263e <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2516:	80 91 e8 00 	lds	r24, 0x00E8
    251a:	87 7f       	andi	r24, 0xF7	; 247
    251c:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    2520:	80 91 5b 03 	lds	r24, 0x035B
    2524:	90 91 5c 03 	lds	r25, 0x035C
    2528:	89 2b       	or	r24, r25
    252a:	21 f0       	breq	.+8      	; 0x2534 <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    252c:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	03 c0       	rjmp	.+6      	; 0x253a <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    2534:	68 e0       	ldi	r22, 0x08	; 8

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    2536:	8b ed       	ldi	r24, 0xDB	; 219
    2538:	92 e0       	ldi	r25, 0x02	; 2
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2540:	80 91 e8 00 	lds	r24, 0x00E8
    2544:	8b 77       	andi	r24, 0x7B	; 123
    2546:	80 93 e8 00 	sts	0x00E8, r24
    254a:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    254c:	80 91 57 03 	lds	r24, 0x0357
    2550:	81 32       	cpi	r24, 0x21	; 33
    2552:	09 f0       	breq	.+2      	; 0x2556 <EVENT_USB_Device_ControlRequest+0x76>
    2554:	74 c0       	rjmp	.+232    	; 0x263e <EVENT_USB_Device_ControlRequest+0x15e>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    2556:	80 91 5b 03 	lds	r24, 0x035B
    255a:	90 91 5c 03 	lds	r25, 0x035C
    255e:	89 2b       	or	r24, r25
    2560:	09 f0       	breq	.+2      	; 0x2564 <EVENT_USB_Device_ControlRequest+0x84>
    2562:	6d c0       	rjmp	.+218    	; 0x263e <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2564:	80 91 e8 00 	lds	r24, 0x00E8
    2568:	87 7f       	andi	r24, 0xF7	; 247
    256a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    256e:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    2572:	82 fd       	sbrc	r24, 2
    2574:	05 c0       	rjmp	.+10     	; 0x2580 <EVENT_USB_Device_ControlRequest+0xa0>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    2576:	80 91 56 03 	lds	r24, 0x0356
    257a:	81 11       	cpse	r24, r1
    257c:	f8 cf       	rjmp	.-16     	; 0x256e <EVENT_USB_Device_ControlRequest+0x8e>
    257e:	5f c0       	rjmp	.+190    	; 0x263e <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2580:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    2584:	80 93 e3 02 	sts	0x02E3, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2588:	80 91 e8 00 	lds	r24, 0x00E8
    258c:	8b 77       	andi	r24, 0x7B	; 123
    258e:	53 c0       	rjmp	.+166    	; 0x2636 <EVENT_USB_Device_ControlRequest+0x156>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2590:	80 91 57 03 	lds	r24, 0x0357
    2594:	81 3a       	cpi	r24, 0xA1	; 161
    2596:	09 f0       	breq	.+2      	; 0x259a <EVENT_USB_Device_ControlRequest+0xba>
    2598:	52 c0       	rjmp	.+164    	; 0x263e <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    259a:	80 91 5b 03 	lds	r24, 0x035B
    259e:	90 91 5c 03 	lds	r25, 0x035C
    25a2:	89 2b       	or	r24, r25
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <EVENT_USB_Device_ControlRequest+0xc8>
    25a6:	4b c0       	rjmp	.+150    	; 0x263e <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    25a8:	80 91 e8 00 	lds	r24, 0x00E8
    25ac:	87 7f       	andi	r24, 0xF7	; 247
    25ae:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    25b2:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    25b6:	80 ff       	sbrs	r24, 0
    25b8:	fc cf       	rjmp	.-8      	; 0x25b2 <EVENT_USB_Device_ControlRequest+0xd2>
                    Endpoint_Write_8(keyboard_protocol);
    25ba:	80 91 20 01 	lds	r24, 0x0120
    25be:	36 c0       	rjmp	.+108    	; 0x262c <EVENT_USB_Device_ControlRequest+0x14c>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    25c0:	80 91 57 03 	lds	r24, 0x0357
    25c4:	81 32       	cpi	r24, 0x21	; 33
    25c6:	d9 f5       	brne	.+118    	; 0x263e <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    25c8:	80 91 5b 03 	lds	r24, 0x035B
    25cc:	90 91 5c 03 	lds	r25, 0x035C
    25d0:	89 2b       	or	r24, r25
    25d2:	a9 f5       	brne	.+106    	; 0x263e <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    25d4:	80 91 e8 00 	lds	r24, 0x00E8
    25d8:	87 7f       	andi	r24, 0xF7	; 247
    25da:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    25de:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    25e2:	80 91 59 03 	lds	r24, 0x0359
    25e6:	80 93 20 01 	sts	0x0120, r24
                    clear_keyboard();
    25ea:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    25ee:	80 91 57 03 	lds	r24, 0x0357
    25f2:	81 32       	cpi	r24, 0x21	; 33
    25f4:	21 f5       	brne	.+72     	; 0x263e <EVENT_USB_Device_ControlRequest+0x15e>
    25f6:	80 91 e8 00 	lds	r24, 0x00E8
    25fa:	87 7f       	andi	r24, 0xF7	; 247
    25fc:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    2600:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    2604:	80 91 5a 03 	lds	r24, 0x035A
    2608:	80 93 e4 02 	sts	0x02E4, r24
    260c:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    260e:	80 91 57 03 	lds	r24, 0x0357
    2612:	81 3a       	cpi	r24, 0xA1	; 161
    2614:	a1 f4       	brne	.+40     	; 0x263e <EVENT_USB_Device_ControlRequest+0x15e>
    2616:	80 91 e8 00 	lds	r24, 0x00E8
    261a:	87 7f       	andi	r24, 0xF7	; 247
    261c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2620:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    2624:	80 ff       	sbrs	r24, 0
    2626:	fc cf       	rjmp	.-8      	; 0x2620 <EVENT_USB_Device_ControlRequest+0x140>
                Endpoint_Write_8(keyboard_idle);
    2628:	80 91 e4 02 	lds	r24, 0x02E4
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    262c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2630:	80 91 e8 00 	lds	r24, 0x00E8
    2634:	8e 77       	andi	r24, 0x7E	; 126
    2636:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    263a:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <Endpoint_ClearStatusStage>
    263e:	08 95       	ret

00002640 <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
    2640:	80 91 e3 02 	lds	r24, 0x02E3
    2644:	80 93 d9 02 	sts	0x02D9, r24
    keyboard_led_stats = 0;
    2648:	10 92 e3 02 	sts	0x02E3, r1
    led_set(keyboard_led_stats);
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	0e 94 b5 08 	call	0x116a	; 0x116a <led_set>

    matrix_clear();
    2652:	0e 94 95 19 	call	0x332a	; 0x332a <matrix_clear>
    clear_keyboard();
    2656:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <clear_keyboard>

0000265a <EVENT_USB_Device_Suspend>:
void EVENT_USB_Device_Suspend()
{
#ifdef LUFA_DEBUG
    print("[S]");
#endif
    hook_usb_suspend_entry();
    265a:	0c 94 20 13 	jmp	0x2640	; 0x2640 <hook_usb_suspend_entry>

0000265e <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    265e:	0e 94 c2 24 	call	0x4984	; 0x4984 <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    2662:	80 91 d9 02 	lds	r24, 0x02D9
    2666:	80 93 e3 02 	sts	0x02E3, r24
    266a:	08 95       	ret

0000266c <EVENT_USB_Device_WakeUp>:
void EVENT_USB_Device_WakeUp()
{
#ifdef LUFA_DEBUG
    print("[W]");
#endif
    hook_usb_wakeup();
    266c:	0c 94 2f 13 	jmp	0x265e	; 0x265e <hook_usb_wakeup>

00002670 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    2670:	29 2f       	mov	r18, r25
    2672:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    2674:	23 30       	cpi	r18, 0x03	; 3
    2676:	31 05       	cpc	r19, r1
    2678:	a9 f0       	breq	.+42     	; 0x26a4 <CALLBACK_USB_GetDescriptor+0x34>
    267a:	6c f4       	brge	.+26     	; 0x2696 <CALLBACK_USB_GetDescriptor+0x26>
    267c:	21 30       	cpi	r18, 0x01	; 1
    267e:	31 05       	cpc	r19, r1
    2680:	09 f4       	brne	.+2      	; 0x2684 <CALLBACK_USB_GetDescriptor+0x14>
    2682:	42 c0       	rjmp	.+132    	; 0x2708 <CALLBACK_USB_GetDescriptor+0x98>
    2684:	22 30       	cpi	r18, 0x02	; 2
    2686:	31 05       	cpc	r19, r1
    2688:	09 f0       	breq	.+2      	; 0x268c <CALLBACK_USB_GetDescriptor+0x1c>
    268a:	43 c0       	rjmp	.+134    	; 0x2712 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    268c:	84 e7       	ldi	r24, 0x74	; 116
    268e:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    2690:	29 e0       	ldi	r18, 0x09	; 9
    2692:	35 e0       	ldi	r19, 0x05	; 5
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    2694:	42 c0       	rjmp	.+132    	; 0x271a <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    2696:	21 32       	cpi	r18, 0x21	; 33
    2698:	31 05       	cpc	r19, r1
    269a:	c9 f0       	breq	.+50     	; 0x26ce <CALLBACK_USB_GetDescriptor+0x5e>
    269c:	22 32       	cpi	r18, 0x22	; 34
    269e:	31 05       	cpc	r19, r1
    26a0:	19 f1       	breq	.+70     	; 0x26e8 <CALLBACK_USB_GetDescriptor+0x78>
    26a2:	37 c0       	rjmp	.+110    	; 0x2712 <CALLBACK_USB_GetDescriptor+0xa2>
    26a4:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    26a6:	81 30       	cpi	r24, 0x01	; 1
    26a8:	91 05       	cpc	r25, r1
    26aa:	41 f0       	breq	.+16     	; 0x26bc <CALLBACK_USB_GetDescriptor+0x4c>
    26ac:	82 30       	cpi	r24, 0x02	; 2
    26ae:	91 05       	cpc	r25, r1
    26b0:	41 f0       	breq	.+16     	; 0x26c2 <CALLBACK_USB_GetDescriptor+0x52>
    26b2:	89 2b       	or	r24, r25
    26b4:	71 f5       	brne	.+92     	; 0x2712 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    26b6:	e5 e0       	ldi	r30, 0x05	; 5
    26b8:	f5 e0       	ldi	r31, 0x05	; 5
    26ba:	05 c0       	rjmp	.+10     	; 0x26c6 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    26bc:	e5 ef       	ldi	r30, 0xF5	; 245
    26be:	f4 e0       	ldi	r31, 0x04	; 4
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    26c2:	e1 ee       	ldi	r30, 0xE1	; 225
    26c4:	f4 e0       	ldi	r31, 0x04	; 4
    26c6:	84 91       	lpm	r24, Z
    26c8:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    26ca:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    26cc:	26 c0       	rjmp	.+76     	; 0x271a <CALLBACK_USB_GetDescriptor+0xaa>
    26ce:	64 30       	cpi	r22, 0x04	; 4
    26d0:	00 f5       	brcc	.+64     	; 0x2712 <CALLBACK_USB_GetDescriptor+0xa2>
    26d2:	e6 2f       	mov	r30, r22
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	ee 0f       	add	r30, r30
    26d8:	ff 1f       	adc	r31, r31
    26da:	e8 57       	subi	r30, 0x78	; 120
    26dc:	fe 4f       	sbci	r31, 0xFE	; 254
    26de:	20 81       	ld	r18, Z
    26e0:	31 81       	ldd	r19, Z+1	; 0x01
    26e2:	89 e0       	ldi	r24, 0x09	; 9
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	19 c0       	rjmp	.+50     	; 0x271a <CALLBACK_USB_GetDescriptor+0xaa>
    26e8:	64 30       	cpi	r22, 0x04	; 4
    26ea:	98 f4       	brcc	.+38     	; 0x2712 <CALLBACK_USB_GetDescriptor+0xa2>
    26ec:	e6 2f       	mov	r30, r22
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	df 01       	movw	r26, r30
    26f2:	aa 0f       	add	r26, r26
    26f4:	bb 1f       	adc	r27, r27
    26f6:	a0 58       	subi	r26, 0x80	; 128
    26f8:	be 4f       	sbci	r27, 0xFE	; 254
    26fa:	2d 91       	ld	r18, X+
    26fc:	3c 91       	ld	r19, X
    26fe:	e4 58       	subi	r30, 0x84	; 132
    2700:	fe 4f       	sbci	r31, 0xFE	; 254
    2702:	80 81       	ld	r24, Z
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	09 c0       	rjmp	.+18     	; 0x271a <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    2708:	82 e1       	ldi	r24, 0x12	; 18
    270a:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    270c:	2d e7       	ldi	r18, 0x7D	; 125
    270e:	35 e0       	ldi	r19, 0x05	; 5
    2710:	04 c0       	rjmp	.+8      	; 0x271a <CALLBACK_USB_GetDescriptor+0xaa>
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    271a:	fa 01       	movw	r30, r20
    271c:	31 83       	std	Z+1, r19	; 0x01
    271e:	20 83       	st	Z, r18
    return Size;
}
    2720:	08 95       	ret

00002722 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2722:	80 e1       	ldi	r24, 0x10	; 16
    2724:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2726:	82 e1       	ldi	r24, 0x12	; 18
    2728:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    272a:	09 b4       	in	r0, 0x29	; 41
    272c:	00 fe       	sbrs	r0, 0
    272e:	fd cf       	rjmp	.-6      	; 0x272a <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2730:	80 91 d8 00 	lds	r24, 0x00D8
    2734:	8f 7d       	andi	r24, 0xDF	; 223
    2736:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    273a:	80 91 e0 00 	lds	r24, 0x00E0
    273e:	82 60       	ori	r24, 0x02	; 2
    2740:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    2744:	80 91 e0 00 	lds	r24, 0x00E0
    2748:	81 fd       	sbrc	r24, 1
    274a:	fc cf       	rjmp	.-8      	; 0x2744 <USB_Device_SendRemoteWakeup+0x22>
}
    274c:	08 95       	ret

0000274e <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    274e:	cf 92       	push	r12
    2750:	df 92       	push	r13
    2752:	ef 92       	push	r14
    2754:	ff 92       	push	r15
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	7c 01       	movw	r14, r24
    2760:	8b 01       	movw	r16, r22
    2762:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    2764:	0e 94 09 15 	call	0x2a12	; 0x2a12 <Endpoint_WaitUntilReady>
    2768:	81 11       	cpse	r24, r1
    276a:	31 c0       	rjmp	.+98     	; 0x27ce <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    276c:	20 97       	sbiw	r28, 0x00	; 0
    276e:	31 f0       	breq	.+12     	; 0x277c <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    2770:	88 81       	ld	r24, Y
    2772:	99 81       	ldd	r25, Y+1	; 0x01
    2774:	08 1b       	sub	r16, r24
    2776:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    2778:	e8 0e       	add	r14, r24
    277a:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    277c:	c1 2c       	mov	r12, r1
    277e:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    2780:	01 15       	cp	r16, r1
    2782:	11 05       	cpc	r17, r1
    2784:	19 f1       	breq	.+70     	; 0x27cc <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2786:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    278a:	85 fd       	sbrc	r24, 5
    278c:	14 c0       	rjmp	.+40     	; 0x27b6 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    278e:	80 91 e8 00 	lds	r24, 0x00E8
    2792:	8e 77       	andi	r24, 0x7E	; 126
    2794:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    2798:	20 97       	sbiw	r28, 0x00	; 0
    279a:	41 f0       	breq	.+16     	; 0x27ac <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    279c:	88 81       	ld	r24, Y
    279e:	99 81       	ldd	r25, Y+1	; 0x01
    27a0:	8c 0d       	add	r24, r12
    27a2:	9d 1d       	adc	r25, r13
    27a4:	99 83       	std	Y+1, r25	; 0x01
    27a6:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    27a8:	85 e0       	ldi	r24, 0x05	; 5
    27aa:	11 c0       	rjmp	.+34     	; 0x27ce <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    27ac:	0e 94 09 15 	call	0x2a12	; 0x2a12 <Endpoint_WaitUntilReady>
    27b0:	88 23       	and	r24, r24
    27b2:	31 f3       	breq	.-52     	; 0x2780 <Endpoint_Write_Stream_LE+0x32>
    27b4:	0c c0       	rjmp	.+24     	; 0x27ce <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    27b6:	f7 01       	movw	r30, r14
    27b8:	81 91       	ld	r24, Z+
    27ba:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    27bc:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    27c0:	01 50       	subi	r16, 0x01	; 1
    27c2:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    27c4:	ff ef       	ldi	r31, 0xFF	; 255
    27c6:	cf 1a       	sub	r12, r31
    27c8:	df 0a       	sbc	r13, r31
    27ca:	da cf       	rjmp	.-76     	; 0x2780 <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    27cc:	80 e0       	ldi	r24, 0x00	; 0
}
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	1f 91       	pop	r17
    27d4:	0f 91       	pop	r16
    27d6:	ff 90       	pop	r15
    27d8:	ef 90       	pop	r14
    27da:	df 90       	pop	r13
    27dc:	cf 90       	pop	r12
    27de:	08 95       	ret

000027e0 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    27e0:	20 91 5d 03 	lds	r18, 0x035D
    27e4:	30 91 5e 03 	lds	r19, 0x035E
    27e8:	26 17       	cp	r18, r22
    27ea:	37 07       	cpc	r19, r23
    27ec:	48 f0       	brcs	.+18     	; 0x2800 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    27ee:	61 15       	cp	r22, r1
    27f0:	71 05       	cpc	r23, r1
    27f2:	39 f4       	brne	.+14     	; 0x2802 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    27f4:	20 91 e8 00 	lds	r18, 0x00E8
    27f8:	2e 77       	andi	r18, 0x7E	; 126
    27fa:	20 93 e8 00 	sts	0x00E8, r18
    27fe:	01 c0       	rjmp	.+2      	; 0x2802 <Endpoint_Write_Control_Stream_LE+0x22>
    2800:	b9 01       	movw	r22, r18
    2802:	fc 01       	movw	r30, r24
    2804:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2806:	61 15       	cp	r22, r1
    2808:	71 05       	cpc	r23, r1
    280a:	b9 f1       	breq	.+110    	; 0x287a <Endpoint_Write_Control_Stream_LE+0x9a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    280c:	80 91 56 03 	lds	r24, 0x0356

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2810:	88 23       	and	r24, r24
    2812:	09 f4       	brne	.+2      	; 0x2816 <Endpoint_Write_Control_Stream_LE+0x36>
    2814:	40 c0       	rjmp	.+128    	; 0x2896 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2816:	85 30       	cpi	r24, 0x05	; 5
    2818:	09 f4       	brne	.+2      	; 0x281c <Endpoint_Write_Control_Stream_LE+0x3c>
    281a:	3f c0       	rjmp	.+126    	; 0x289a <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    281c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2820:	83 fd       	sbrc	r24, 3
    2822:	3d c0       	rjmp	.+122    	; 0x289e <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2824:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2828:	82 ff       	sbrs	r24, 2
    282a:	06 c0       	rjmp	.+12     	; 0x2838 <Endpoint_Write_Control_Stream_LE+0x58>
    282c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2830:	82 ff       	sbrs	r24, 2
    2832:	26 c0       	rjmp	.+76     	; 0x2880 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2838:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    283c:	80 ff       	sbrs	r24, 0
    283e:	e3 cf       	rjmp	.-58     	; 0x2806 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2840:	20 91 f3 00 	lds	r18, 0x00F3
    2844:	80 91 f2 00 	lds	r24, 0x00F2
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    284c:	61 15       	cp	r22, r1
    284e:	71 05       	cpc	r23, r1
    2850:	51 f0       	breq	.+20     	; 0x2866 <Endpoint_Write_Control_Stream_LE+0x86>
    2852:	88 30       	cpi	r24, 0x08	; 8
    2854:	91 05       	cpc	r25, r1
    2856:	38 f4       	brcc	.+14     	; 0x2866 <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2858:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    285a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    285e:	61 50       	subi	r22, 0x01	; 1
    2860:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	f3 cf       	rjmp	.-26     	; 0x284c <Endpoint_Write_Control_Stream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2866:	21 e0       	ldi	r18, 0x01	; 1
    2868:	08 97       	sbiw	r24, 0x08	; 8
    286a:	09 f0       	breq	.+2      	; 0x286e <Endpoint_Write_Control_Stream_LE+0x8e>
    286c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    286e:	80 91 e8 00 	lds	r24, 0x00E8
    2872:	8e 77       	andi	r24, 0x7E	; 126
    2874:	80 93 e8 00 	sts	0x00E8, r24
    2878:	c6 cf       	rjmp	.-116    	; 0x2806 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    287a:	21 11       	cpse	r18, r1
    287c:	c7 cf       	rjmp	.-114    	; 0x280c <Endpoint_Write_Control_Stream_LE+0x2c>
    287e:	d6 cf       	rjmp	.-84     	; 0x282c <Endpoint_Write_Control_Stream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2880:	80 91 56 03 	lds	r24, 0x0356

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2884:	88 23       	and	r24, r24
    2886:	39 f0       	breq	.+14     	; 0x2896 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2888:	85 30       	cpi	r24, 0x05	; 5
    288a:	39 f0       	breq	.+14     	; 0x289a <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    288c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2890:	83 ff       	sbrs	r24, 3
    2892:	cc cf       	rjmp	.-104    	; 0x282c <Endpoint_Write_Control_Stream_LE+0x4c>
    2894:	04 c0       	rjmp	.+8      	; 0x289e <Endpoint_Write_Control_Stream_LE+0xbe>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    289a:	83 e0       	ldi	r24, 0x03	; 3
    289c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    289e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    28a0:	08 95       	ret

000028a2 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    28a2:	20 91 5d 03 	lds	r18, 0x035D
    28a6:	30 91 5e 03 	lds	r19, 0x035E
    28aa:	26 17       	cp	r18, r22
    28ac:	37 07       	cpc	r19, r23
    28ae:	48 f0       	brcs	.+18     	; 0x28c2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    28b0:	61 15       	cp	r22, r1
    28b2:	71 05       	cpc	r23, r1
    28b4:	39 f4       	brne	.+14     	; 0x28c4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    28b6:	20 91 e8 00 	lds	r18, 0x00E8
    28ba:	2e 77       	andi	r18, 0x7E	; 126
    28bc:	20 93 e8 00 	sts	0x00E8, r18
    28c0:	01 c0       	rjmp	.+2      	; 0x28c4 <Endpoint_Write_Control_PStream_LE+0x22>
    28c2:	b9 01       	movw	r22, r18
    28c4:	fc 01       	movw	r30, r24
    28c6:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    28c8:	61 15       	cp	r22, r1
    28ca:	71 05       	cpc	r23, r1
    28cc:	c1 f1       	breq	.+112    	; 0x293e <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    28ce:	80 91 56 03 	lds	r24, 0x0356

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    28d2:	88 23       	and	r24, r24
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <Endpoint_Write_Control_PStream_LE+0x36>
    28d6:	41 c0       	rjmp	.+130    	; 0x295a <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    28d8:	85 30       	cpi	r24, 0x05	; 5
    28da:	09 f4       	brne	.+2      	; 0x28de <Endpoint_Write_Control_PStream_LE+0x3c>
    28dc:	40 c0       	rjmp	.+128    	; 0x295e <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    28de:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    28e2:	83 fd       	sbrc	r24, 3
    28e4:	3e c0       	rjmp	.+124    	; 0x2962 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    28e6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    28ea:	82 ff       	sbrs	r24, 2
    28ec:	06 c0       	rjmp	.+12     	; 0x28fa <Endpoint_Write_Control_PStream_LE+0x58>
    28ee:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    28f2:	82 ff       	sbrs	r24, 2
    28f4:	27 c0       	rjmp	.+78     	; 0x2944 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    28fa:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    28fe:	80 ff       	sbrs	r24, 0
    2900:	e3 cf       	rjmp	.-58     	; 0x28c8 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2902:	20 91 f3 00 	lds	r18, 0x00F3
    2906:	80 91 f2 00 	lds	r24, 0x00F2
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    290e:	61 15       	cp	r22, r1
    2910:	71 05       	cpc	r23, r1
    2912:	59 f0       	breq	.+22     	; 0x292a <Endpoint_Write_Control_PStream_LE+0x88>
    2914:	88 30       	cpi	r24, 0x08	; 8
    2916:	91 05       	cpc	r25, r1
    2918:	40 f4       	brcc	.+16     	; 0x292a <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    291a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    291c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2920:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2922:	61 50       	subi	r22, 0x01	; 1
    2924:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    2926:	01 96       	adiw	r24, 0x01	; 1
    2928:	f2 cf       	rjmp	.-28     	; 0x290e <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    292a:	21 e0       	ldi	r18, 0x01	; 1
    292c:	08 97       	sbiw	r24, 0x08	; 8
    292e:	09 f0       	breq	.+2      	; 0x2932 <Endpoint_Write_Control_PStream_LE+0x90>
    2930:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2932:	80 91 e8 00 	lds	r24, 0x00E8
    2936:	8e 77       	andi	r24, 0x7E	; 126
    2938:	80 93 e8 00 	sts	0x00E8, r24
    293c:	c5 cf       	rjmp	.-118    	; 0x28c8 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    293e:	21 11       	cpse	r18, r1
    2940:	c6 cf       	rjmp	.-116    	; 0x28ce <Endpoint_Write_Control_PStream_LE+0x2c>
    2942:	d5 cf       	rjmp	.-86     	; 0x28ee <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2944:	80 91 56 03 	lds	r24, 0x0356

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2948:	88 23       	and	r24, r24
    294a:	39 f0       	breq	.+14     	; 0x295a <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    294c:	85 30       	cpi	r24, 0x05	; 5
    294e:	39 f0       	breq	.+14     	; 0x295e <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2950:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2954:	83 ff       	sbrs	r24, 3
    2956:	cb cf       	rjmp	.-106    	; 0x28ee <Endpoint_Write_Control_PStream_LE+0x4c>
    2958:	04 c0       	rjmp	.+8      	; 0x2962 <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    295a:	82 e0       	ldi	r24, 0x02	; 2
    295c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    295e:	83 e0       	ldi	r24, 0x03	; 3
    2960:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2962:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2964:	08 95       	ret

00002966 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    2966:	98 2f       	mov	r25, r24
    2968:	97 30       	cpi	r25, 0x07	; 7
    296a:	58 f5       	brcc	.+86     	; 0x29c2 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    296c:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    2970:	98 17       	cp	r25, r24
    2972:	39 f0       	breq	.+14     	; 0x2982 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    2974:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    2978:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    297c:	50 91 f0 00 	lds	r21, 0x00F0
    2980:	03 c0       	rjmp	.+6      	; 0x2988 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    2982:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    2984:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    2986:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    2988:	21 ff       	sbrs	r18, 1
    298a:	19 c0       	rjmp	.+50     	; 0x29be <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    298c:	30 91 eb 00 	lds	r19, 0x00EB
    2990:	3e 7f       	andi	r19, 0xFE	; 254
    2992:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    2996:	30 91 ed 00 	lds	r19, 0x00ED
    299a:	3d 7f       	andi	r19, 0xFD	; 253
    299c:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    29a0:	30 91 eb 00 	lds	r19, 0x00EB
    29a4:	31 60       	ori	r19, 0x01	; 1
    29a6:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    29aa:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    29ae:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    29b2:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    29b6:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    29ba:	27 ff       	sbrs	r18, 7
    29bc:	07 c0       	rjmp	.+14     	; 0x29cc <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    29be:	9f 5f       	subi	r25, 0xFF	; 255
    29c0:	d3 cf       	rjmp	.-90     	; 0x2968 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    29c2:	8f 70       	andi	r24, 0x0F	; 15
    29c4:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    29cc:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    29ce:	08 95       	ret

000029d0 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    29d0:	80 91 57 03 	lds	r24, 0x0357
    29d4:	87 fd       	sbrc	r24, 7
    29d6:	05 c0       	rjmp	.+10     	; 0x29e2 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    29d8:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    29dc:	80 ff       	sbrs	r24, 0
    29de:	0e c0       	rjmp	.+28     	; 0x29fc <Endpoint_ClearStatusStage+0x2c>
    29e0:	12 c0       	rjmp	.+36     	; 0x2a06 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    29e2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    29e6:	82 fd       	sbrc	r24, 2
    29e8:	05 c0       	rjmp	.+10     	; 0x29f4 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    29ea:	80 91 56 03 	lds	r24, 0x0356
    29ee:	81 11       	cpse	r24, r1
    29f0:	f8 cf       	rjmp	.-16     	; 0x29e2 <Endpoint_ClearStatusStage+0x12>
    29f2:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    29f4:	80 91 e8 00 	lds	r24, 0x00E8
    29f8:	8b 77       	andi	r24, 0x7B	; 123
    29fa:	08 c0       	rjmp	.+16     	; 0x2a0c <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    29fc:	80 91 56 03 	lds	r24, 0x0356
    2a00:	81 11       	cpse	r24, r1
    2a02:	ea cf       	rjmp	.-44     	; 0x29d8 <Endpoint_ClearStatusStage+0x8>
    2a04:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2a06:	80 91 e8 00 	lds	r24, 0x00E8
    2a0a:	8e 77       	andi	r24, 0x7E	; 126
    2a0c:	80 93 e8 00 	sts	0x00E8, r24
    2a10:	08 95       	ret

00002a12 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2a12:	80 91 e4 00 	lds	r24, 0x00E4
    2a16:	90 91 e5 00 	lds	r25, 0x00E5
    2a1a:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2a1c:	20 91 ec 00 	lds	r18, 0x00EC
    2a20:	20 ff       	sbrs	r18, 0
    2a22:	21 c0       	rjmp	.+66     	; 0x2a66 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2a24:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    2a28:	20 fd       	sbrc	r18, 0
    2a2a:	21 c0       	rjmp	.+66     	; 0x2a6e <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2a2c:	20 91 56 03 	lds	r18, 0x0356

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2a30:	22 23       	and	r18, r18
    2a32:	89 f0       	breq	.+34     	; 0x2a56 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2a34:	25 30       	cpi	r18, 0x05	; 5
    2a36:	89 f0       	breq	.+34     	; 0x2a5a <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2a38:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2a3c:	25 fd       	sbrc	r18, 5
    2a3e:	0f c0       	rjmp	.+30     	; 0x2a5e <Endpoint_WaitUntilReady+0x4c>
    2a40:	20 91 e4 00 	lds	r18, 0x00E4
    2a44:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2a48:	28 17       	cp	r18, r24
    2a4a:	39 07       	cpc	r19, r25
    2a4c:	39 f3       	breq	.-50     	; 0x2a1c <Endpoint_WaitUntilReady+0xa>
    2a4e:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2a50:	41 f0       	breq	.+16     	; 0x2a62 <Endpoint_WaitUntilReady+0x50>
    2a52:	c9 01       	movw	r24, r18
    2a54:	e3 cf       	rjmp	.-58     	; 0x2a1c <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    2a56:	82 e0       	ldi	r24, 0x02	; 2
    2a58:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    2a5a:	83 e0       	ldi	r24, 0x03	; 3
    2a5c:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    2a62:	84 e0       	ldi	r24, 0x04	; 4
    2a64:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2a66:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2a6a:	22 ff       	sbrs	r18, 2
    2a6c:	df cf       	rjmp	.-66     	; 0x2a2c <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	08 95       	ret

00002a72 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    2a72:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2a76:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    2a7a:	e0 ee       	ldi	r30, 0xE0	; 224
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	81 60       	ori	r24, 0x01	; 1
    2a82:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    2a84:	e8 ed       	ldi	r30, 0xD8	; 216
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	8f 77       	andi	r24, 0x7F	; 127
    2a8c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2a8e:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    2a90:	a7 ed       	ldi	r26, 0xD7	; 215
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	8c 91       	ld	r24, X
    2a96:	8e 7f       	andi	r24, 0xFE	; 254
    2a98:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2a9a:	80 81       	ld	r24, Z
    2a9c:	8f 7e       	andi	r24, 0xEF	; 239
    2a9e:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    2aa0:	10 92 55 03 	sts	0x0355, r1
    2aa4:	08 95       	ret

00002aa6 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    2aa6:	0f 93       	push	r16
    2aa8:	1f 93       	push	r17
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2aae:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2ab2:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2ab6:	c8 ed       	ldi	r28, 0xD8	; 216
    2ab8:	d0 e0       	ldi	r29, 0x00	; 0
    2aba:	88 81       	ld	r24, Y
    2abc:	8f 77       	andi	r24, 0x7F	; 127
    2abe:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    2ac0:	88 81       	ld	r24, Y
    2ac2:	80 68       	ori	r24, 0x80	; 128
    2ac4:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2ac6:	88 81       	ld	r24, Y
    2ac8:	8f 7d       	andi	r24, 0xDF	; 223
    2aca:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2acc:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2ace:	10 92 56 03 	sts	0x0356, r1
	USB_Device_ConfigurationNumber  = 0;
    2ad2:	10 92 52 03 	sts	0x0352, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2ad6:	10 92 54 03 	sts	0x0354, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    2ada:	10 92 53 03 	sts	0x0353, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2ade:	00 ee       	ldi	r16, 0xE0	; 224
    2ae0:	10 e0       	ldi	r17, 0x00	; 0
    2ae2:	f8 01       	movw	r30, r16
    2ae4:	80 81       	ld	r24, Z
    2ae6:	8b 7f       	andi	r24, 0xFB	; 251
    2ae8:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    2aea:	88 81       	ld	r24, Y
    2aec:	81 60       	ori	r24, 0x01	; 1
    2aee:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2af0:	42 e0       	ldi	r20, 0x02	; 2
    2af2:	60 e0       	ldi	r22, 0x00	; 0
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	0e 94 b3 14 	call	0x2966	; 0x2966 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2afa:	e1 ee       	ldi	r30, 0xE1	; 225
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	8e 7f       	andi	r24, 0xFE	; 254
    2b02:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2b04:	e2 ee       	ldi	r30, 0xE2	; 226
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	81 60       	ori	r24, 0x01	; 1
    2b0c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2b0e:	80 81       	ld	r24, Z
    2b10:	88 60       	ori	r24, 0x08	; 8
    2b12:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2b14:	f8 01       	movw	r30, r16
    2b16:	80 81       	ld	r24, Z
    2b18:	8e 7f       	andi	r24, 0xFE	; 254
    2b1a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2b1c:	88 81       	ld	r24, Y
    2b1e:	80 61       	ori	r24, 0x10	; 16
    2b20:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	08 95       	ret

00002b2c <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2b2c:	e8 ed       	ldi	r30, 0xD8	; 216
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	8f 7e       	andi	r24, 0xEF	; 239
    2b34:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    2b36:	e7 ed       	ldi	r30, 0xD7	; 215
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	81 60       	ori	r24, 0x01	; 1
    2b3e:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    2b40:	84 e0       	ldi	r24, 0x04	; 4
    2b42:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	80 93 55 03 	sts	0x0355, r24

	USB_ResetInterface();
    2b4a:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <USB_ResetInterface>

00002b4e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    2b4e:	e8 ed       	ldi	r30, 0xD8	; 216
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	8e 7f       	andi	r24, 0xFE	; 254
    2b56:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2b58:	10 92 e2 00 	sts	0x00E2, r1
    2b5c:	08 95       	ret

00002b5e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    2b5e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2b62:	10 92 e1 00 	sts	0x00E1, r1
    2b66:	08 95       	ret

00002b68 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    2b68:	1f 92       	push	r1
    2b6a:	0f 92       	push	r0
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	0f 92       	push	r0
    2b70:	11 24       	eor	r1, r1
    2b72:	2f 93       	push	r18
    2b74:	3f 93       	push	r19
    2b76:	4f 93       	push	r20
    2b78:	5f 93       	push	r21
    2b7a:	6f 93       	push	r22
    2b7c:	7f 93       	push	r23
    2b7e:	8f 93       	push	r24
    2b80:	9f 93       	push	r25
    2b82:	af 93       	push	r26
    2b84:	bf 93       	push	r27
    2b86:	ef 93       	push	r30
    2b88:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    2b8a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2b8e:	82 ff       	sbrs	r24, 2
    2b90:	0b c0       	rjmp	.+22     	; 0x2ba8 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2b92:	80 91 e2 00 	lds	r24, 0x00E2
    2b96:	82 ff       	sbrs	r24, 2
    2b98:	07 c0       	rjmp	.+14     	; 0x2ba8 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    2b9a:	80 91 e1 00 	lds	r24, 0x00E1
    2b9e:	8b 7f       	andi	r24, 0xFB	; 251
    2ba0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2ba4:	0e 94 1c 12 	call	0x2438	; 0x2438 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    2ba8:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2bac:	80 ff       	sbrs	r24, 0
    2bae:	1f c0       	rjmp	.+62     	; 0x2bee <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2bb0:	80 91 d8 00 	lds	r24, 0x00D8
    2bb4:	80 ff       	sbrs	r24, 0
    2bb6:	1b c0       	rjmp	.+54     	; 0x2bee <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    2bb8:	80 91 da 00 	lds	r24, 0x00DA
    2bbc:	8e 7f       	andi	r24, 0xFE	; 254
    2bbe:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2bc2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2bc6:	80 ff       	sbrs	r24, 0
    2bc8:	0d c0       	rjmp	.+26     	; 0x2be4 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2bca:	80 e1       	ldi	r24, 0x10	; 16
    2bcc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2bce:	82 e1       	ldi	r24, 0x12	; 18
    2bd0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2bd2:	09 b4       	in	r0, 0x29	; 41
    2bd4:	00 fe       	sbrs	r0, 0
    2bd6:	fd cf       	rjmp	.-6      	; 0x2bd2 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	80 93 56 03 	sts	0x0356, r24
			EVENT_USB_Device_Connect();
    2bde:	0e 94 02 12 	call	0x2404	; 0x2404 <EVENT_USB_Device_Connect>
    2be2:	05 c0       	rjmp	.+10     	; 0x2bee <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2be4:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2be6:	10 92 56 03 	sts	0x0356, r1
			EVENT_USB_Device_Disconnect();
    2bea:	0e 94 14 12 	call	0x2428	; 0x2428 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2bee:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2bf2:	80 ff       	sbrs	r24, 0
    2bf4:	19 c0       	rjmp	.+50     	; 0x2c28 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2bf6:	80 91 e2 00 	lds	r24, 0x00E2
    2bfa:	80 ff       	sbrs	r24, 0
    2bfc:	15 c0       	rjmp	.+42     	; 0x2c28 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2bfe:	80 91 e2 00 	lds	r24, 0x00E2
    2c02:	8e 7f       	andi	r24, 0xFE	; 254
    2c04:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2c08:	80 91 e2 00 	lds	r24, 0x00E2
    2c0c:	80 61       	ori	r24, 0x10	; 16
    2c0e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2c12:	80 91 d8 00 	lds	r24, 0x00D8
    2c16:	80 62       	ori	r24, 0x20	; 32
    2c18:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2c1c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2c1e:	85 e0       	ldi	r24, 0x05	; 5
    2c20:	80 93 56 03 	sts	0x0356, r24
		EVENT_USB_Device_Suspend();
    2c24:	0e 94 2d 13 	call	0x265a	; 0x265a <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2c28:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2c2c:	84 ff       	sbrs	r24, 4
    2c2e:	30 c0       	rjmp	.+96     	; 0x2c90 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2c30:	80 91 e2 00 	lds	r24, 0x00E2
    2c34:	84 ff       	sbrs	r24, 4
    2c36:	2c c0       	rjmp	.+88     	; 0x2c90 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2c38:	80 e1       	ldi	r24, 0x10	; 16
    2c3a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2c3c:	82 e1       	ldi	r24, 0x12	; 18
    2c3e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2c40:	09 b4       	in	r0, 0x29	; 41
    2c42:	00 fe       	sbrs	r0, 0
    2c44:	fd cf       	rjmp	.-6      	; 0x2c40 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2c46:	80 91 d8 00 	lds	r24, 0x00D8
    2c4a:	8f 7d       	andi	r24, 0xDF	; 223
    2c4c:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2c50:	80 91 e1 00 	lds	r24, 0x00E1
    2c54:	8f 7e       	andi	r24, 0xEF	; 239
    2c56:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2c5a:	80 91 e2 00 	lds	r24, 0x00E2
    2c5e:	8f 7e       	andi	r24, 0xEF	; 239
    2c60:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2c64:	80 91 e2 00 	lds	r24, 0x00E2
    2c68:	81 60       	ori	r24, 0x01	; 1
    2c6a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2c6e:	80 91 52 03 	lds	r24, 0x0352
    2c72:	88 23       	and	r24, r24
    2c74:	11 f0       	breq	.+4      	; 0x2c7a <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2c76:	84 e0       	ldi	r24, 0x04	; 4
    2c78:	07 c0       	rjmp	.+14     	; 0x2c88 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2c7a:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2c7e:	87 ff       	sbrs	r24, 7
    2c80:	02 c0       	rjmp	.+4      	; 0x2c86 <__vector_10+0x11e>
    2c82:	83 e0       	ldi	r24, 0x03	; 3
    2c84:	01 c0       	rjmp	.+2      	; 0x2c88 <__vector_10+0x120>
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	80 93 56 03 	sts	0x0356, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2c8c:	0e 94 36 13 	call	0x266c	; 0x266c <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2c90:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2c94:	83 ff       	sbrs	r24, 3
    2c96:	29 c0       	rjmp	.+82     	; 0x2cea <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2c98:	80 91 e2 00 	lds	r24, 0x00E2
    2c9c:	83 ff       	sbrs	r24, 3
    2c9e:	25 c0       	rjmp	.+74     	; 0x2cea <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2ca0:	80 91 e1 00 	lds	r24, 0x00E1
    2ca4:	87 7f       	andi	r24, 0xF7	; 247
    2ca6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2caa:	82 e0       	ldi	r24, 0x02	; 2
    2cac:	80 93 56 03 	sts	0x0356, r24
		USB_Device_ConfigurationNumber = 0;
    2cb0:	10 92 52 03 	sts	0x0352, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2cb4:	80 91 e1 00 	lds	r24, 0x00E1
    2cb8:	8e 7f       	andi	r24, 0xFE	; 254
    2cba:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2cbe:	80 91 e2 00 	lds	r24, 0x00E2
    2cc2:	8e 7f       	andi	r24, 0xFE	; 254
    2cc4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2cc8:	80 91 e2 00 	lds	r24, 0x00E2
    2ccc:	80 61       	ori	r24, 0x10	; 16
    2cce:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2cd2:	42 e0       	ldi	r20, 0x02	; 2
    2cd4:	60 e0       	ldi	r22, 0x00	; 0
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	0e 94 b3 14 	call	0x2966	; 0x2966 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2cdc:	80 91 f0 00 	lds	r24, 0x00F0
    2ce0:	88 60       	ori	r24, 0x08	; 8
    2ce2:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2ce6:	0e 94 1b 12 	call	0x2436	; 0x2436 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2cea:	ff 91       	pop	r31
    2cec:	ef 91       	pop	r30
    2cee:	bf 91       	pop	r27
    2cf0:	af 91       	pop	r26
    2cf2:	9f 91       	pop	r25
    2cf4:	8f 91       	pop	r24
    2cf6:	7f 91       	pop	r23
    2cf8:	6f 91       	pop	r22
    2cfa:	5f 91       	pop	r21
    2cfc:	4f 91       	pop	r20
    2cfe:	3f 91       	pop	r19
    2d00:	2f 91       	pop	r18
    2d02:	0f 90       	pop	r0
    2d04:	0f be       	out	0x3f, r0	; 63
    2d06:	0f 90       	pop	r0
    2d08:	1f 90       	pop	r1
    2d0a:	18 95       	reti

00002d0c <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2d0c:	1f 92       	push	r1
    2d0e:	0f 92       	push	r0
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	0f 92       	push	r0
    2d14:	11 24       	eor	r1, r1
    2d16:	2f 93       	push	r18
    2d18:	3f 93       	push	r19
    2d1a:	4f 93       	push	r20
    2d1c:	5f 93       	push	r21
    2d1e:	6f 93       	push	r22
    2d20:	7f 93       	push	r23
    2d22:	8f 93       	push	r24
    2d24:	9f 93       	push	r25
    2d26:	af 93       	push	r26
    2d28:	bf 93       	push	r27
    2d2a:	cf 93       	push	r28
    2d2c:	ef 93       	push	r30
    2d2e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2d30:	c0 91 e9 00 	lds	r28, 0x00E9
    2d34:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2d36:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2d3a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2d3e:	80 91 f0 00 	lds	r24, 0x00F0
    2d42:	87 7f       	andi	r24, 0xF7	; 247
    2d44:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    2d48:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    2d4a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <USB_Device_ProcessControlRequest>
    2d4e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2d52:	80 91 f0 00 	lds	r24, 0x00F0
    2d56:	88 60       	ori	r24, 0x08	; 8
    2d58:	80 93 f0 00 	sts	0x00F0, r24
    2d5c:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    2d60:	ff 91       	pop	r31
    2d62:	ef 91       	pop	r30
    2d64:	cf 91       	pop	r28
    2d66:	bf 91       	pop	r27
    2d68:	af 91       	pop	r26
    2d6a:	9f 91       	pop	r25
    2d6c:	8f 91       	pop	r24
    2d6e:	7f 91       	pop	r23
    2d70:	6f 91       	pop	r22
    2d72:	5f 91       	pop	r21
    2d74:	4f 91       	pop	r20
    2d76:	3f 91       	pop	r19
    2d78:	2f 91       	pop	r18
    2d7a:	0f 90       	pop	r0
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	0f 90       	pop	r0
    2d80:	1f 90       	pop	r1
    2d82:	18 95       	reti

00002d84 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2d84:	1f 93       	push	r17
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	aa 97       	sbiw	r28, 0x2a	; 42
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	e7 e5       	ldi	r30, 0x57	; 87
    2d9c:	f3 e0       	ldi	r31, 0x03	; 3
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2d9e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2da2:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2da4:	23 e0       	ldi	r18, 0x03	; 3
    2da6:	ef 35       	cpi	r30, 0x5F	; 95
    2da8:	f2 07       	cpc	r31, r18
    2daa:	c9 f7       	brne	.-14     	; 0x2d9e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2dac:	0e 94 70 12 	call	0x24e0	; 0x24e0 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2db0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2db4:	83 ff       	sbrs	r24, 3
    2db6:	1c c1       	rjmp	.+568    	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2db8:	20 91 57 03 	lds	r18, 0x0357

		switch (USB_ControlRequest.bRequest)
    2dbc:	30 91 58 03 	lds	r19, 0x0358
    2dc0:	83 2f       	mov	r24, r19
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	8a 30       	cpi	r24, 0x0A	; 10
    2dc6:	91 05       	cpc	r25, r1
    2dc8:	08 f0       	brcs	.+2      	; 0x2dcc <USB_Device_ProcessControlRequest+0x48>
    2dca:	12 c1       	rjmp	.+548    	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
    2dcc:	fc 01       	movw	r30, r24
    2dce:	e1 56       	subi	r30, 0x61	; 97
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2dd6:	20 38       	cpi	r18, 0x80	; 128
    2dd8:	81 f0       	breq	.+32     	; 0x2dfa <USB_Device_ProcessControlRequest+0x76>
    2dda:	22 38       	cpi	r18, 0x82	; 130
    2ddc:	09 f0       	breq	.+2      	; 0x2de0 <USB_Device_ProcessControlRequest+0x5c>
    2dde:	08 c1       	rjmp	.+528    	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2de0:	80 91 5b 03 	lds	r24, 0x035B
    2de4:	8f 70       	andi	r24, 0x0F	; 15
    2de6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2dea:	80 91 eb 00 	lds	r24, 0x00EB
    2dee:	85 fb       	bst	r24, 5
    2df0:	88 27       	eor	r24, r24
    2df2:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2df4:	10 92 e9 00 	sts	0x00E9, r1
    2df8:	06 c0       	rjmp	.+12     	; 0x2e06 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2dfa:	80 91 53 03 	lds	r24, 0x0353
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2dfe:	90 91 54 03 	lds	r25, 0x0354
    2e02:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2e04:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2e06:	90 91 e8 00 	lds	r25, 0x00E8
    2e0a:	97 7f       	andi	r25, 0xF7	; 247
    2e0c:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2e10:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    2e14:	10 92 f1 00 	sts	0x00F1, r1
    2e18:	c5 c0       	rjmp	.+394    	; 0x2fa4 <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2e1a:	82 2f       	mov	r24, r18
    2e1c:	8d 7f       	andi	r24, 0xFD	; 253
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <USB_Device_ProcessControlRequest+0x9e>
    2e20:	e7 c0       	rjmp	.+462    	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2e22:	22 23       	and	r18, r18
    2e24:	19 f0       	breq	.+6      	; 0x2e2c <USB_Device_ProcessControlRequest+0xa8>
    2e26:	22 30       	cpi	r18, 0x02	; 2
    2e28:	61 f0       	breq	.+24     	; 0x2e42 <USB_Device_ProcessControlRequest+0xbe>
    2e2a:	e2 c0       	rjmp	.+452    	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    2e2c:	80 91 59 03 	lds	r24, 0x0359
    2e30:	81 30       	cpi	r24, 0x01	; 1
    2e32:	09 f0       	breq	.+2      	; 0x2e36 <USB_Device_ProcessControlRequest+0xb2>
    2e34:	dd c0       	rjmp	.+442    	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2e36:	33 30       	cpi	r19, 0x03	; 3
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <USB_Device_ProcessControlRequest+0xb8>
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	80 93 54 03 	sts	0x0354, r24
    2e40:	28 c0       	rjmp	.+80     	; 0x2e92 <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2e42:	80 91 59 03 	lds	r24, 0x0359
    2e46:	81 11       	cpse	r24, r1
    2e48:	24 c0       	rjmp	.+72     	; 0x2e92 <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2e4a:	20 91 5b 03 	lds	r18, 0x035B
    2e4e:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <USB_Device_ProcessControlRequest+0xd0>
    2e52:	ce c0       	rjmp	.+412    	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2e54:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2e58:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2e5c:	80 ff       	sbrs	r24, 0
    2e5e:	19 c0       	rjmp	.+50     	; 0x2e92 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2e60:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2e64:	33 30       	cpi	r19, 0x03	; 3
    2e66:	11 f4       	brne	.+4      	; 0x2e6c <USB_Device_ProcessControlRequest+0xe8>
    2e68:	80 62       	ori	r24, 0x20	; 32
    2e6a:	11 c0       	rjmp	.+34     	; 0x2e8e <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2e6c:	80 61       	ori	r24, 0x10	; 16
    2e6e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	02 2e       	mov	r0, r18
    2e78:	01 c0       	rjmp	.+2      	; 0x2e7c <USB_Device_ProcessControlRequest+0xf8>
    2e7a:	88 0f       	add	r24, r24
    2e7c:	0a 94       	dec	r0
    2e7e:	ea f7       	brpl	.-6      	; 0x2e7a <USB_Device_ProcessControlRequest+0xf6>
    2e80:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    2e84:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2e88:	80 91 eb 00 	lds	r24, 0x00EB
    2e8c:	88 60       	ori	r24, 0x08	; 8
    2e8e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2e92:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2e96:	80 91 e8 00 	lds	r24, 0x00E8
    2e9a:	87 7f       	andi	r24, 0xF7	; 247
    2e9c:	86 c0       	rjmp	.+268    	; 0x2faa <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2e9e:	21 11       	cpse	r18, r1
    2ea0:	a7 c0       	rjmp	.+334    	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2ea2:	10 91 59 03 	lds	r17, 0x0359
    2ea6:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2ea8:	80 91 e3 00 	lds	r24, 0x00E3
    2eac:	80 78       	andi	r24, 0x80	; 128
    2eae:	81 2b       	or	r24, r17
    2eb0:	80 93 e3 00 	sts	0x00E3, r24
    2eb4:	80 91 e8 00 	lds	r24, 0x00E8
    2eb8:	87 7f       	andi	r24, 0xF7	; 247
    2eba:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2ebe:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2ec2:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    2ec6:	80 ff       	sbrs	r24, 0
    2ec8:	fc cf       	rjmp	.-8      	; 0x2ec2 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2eca:	80 91 e3 00 	lds	r24, 0x00E3
    2ece:	80 68       	ori	r24, 0x80	; 128
    2ed0:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2ed4:	11 23       	and	r17, r17
    2ed6:	11 f0       	breq	.+4      	; 0x2edc <USB_Device_ProcessControlRequest+0x158>
    2ed8:	83 e0       	ldi	r24, 0x03	; 3
    2eda:	01 c0       	rjmp	.+2      	; 0x2ede <USB_Device_ProcessControlRequest+0x15a>
    2edc:	82 e0       	ldi	r24, 0x02	; 2
    2ede:	80 93 56 03 	sts	0x0356, r24
    2ee2:	86 c0       	rjmp	.+268    	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2ee4:	20 58       	subi	r18, 0x80	; 128
    2ee6:	22 30       	cpi	r18, 0x02	; 2
    2ee8:	08 f0       	brcs	.+2      	; 0x2eec <USB_Device_ProcessControlRequest+0x168>
    2eea:	82 c0       	rjmp	.+260    	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2eec:	80 91 59 03 	lds	r24, 0x0359
    2ef0:	90 91 5a 03 	lds	r25, 0x035A
    2ef4:	8c 3d       	cpi	r24, 0xDC	; 220
    2ef6:	23 e0       	ldi	r18, 0x03	; 3
    2ef8:	92 07       	cpc	r25, r18
    2efa:	79 f5       	brne	.+94     	; 0x2f5a <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2efc:	83 e0       	ldi	r24, 0x03	; 3
    2efe:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2f00:	8a e2       	ldi	r24, 0x2A	; 42
    2f02:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2f04:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2f06:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2f08:	de 01       	movw	r26, r28
    2f0a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2f0e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2f10:	51 e2       	ldi	r21, 0x21	; 33
    2f12:	e3 2f       	mov	r30, r19
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	50 93 57 00 	sts	0x0057, r21
    2f1a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    2f1c:	20 ff       	sbrs	r18, 0
    2f1e:	03 c0       	rjmp	.+6      	; 0x2f26 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    2f20:	e2 95       	swap	r30
    2f22:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2f24:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2f26:	ef 70       	andi	r30, 0x0F	; 15
    2f28:	8e 2f       	mov	r24, r30
    2f2a:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2f2c:	ea 30       	cpi	r30, 0x0A	; 10
    2f2e:	10 f0       	brcs	.+4      	; 0x2f34 <USB_Device_ProcessControlRequest+0x1b0>
    2f30:	c7 96       	adiw	r24, 0x37	; 55
    2f32:	01 c0       	rjmp	.+2      	; 0x2f36 <USB_Device_ProcessControlRequest+0x1b2>
    2f34:	c0 96       	adiw	r24, 0x30	; 48
    2f36:	8d 93       	st	X+, r24
    2f38:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2f3a:	2f 5f       	subi	r18, 0xFF	; 255
    2f3c:	24 31       	cpi	r18, 0x14	; 20
    2f3e:	49 f7       	brne	.-46     	; 0x2f12 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2f40:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2f42:	80 91 e8 00 	lds	r24, 0x00E8
    2f46:	87 7f       	andi	r24, 0xF7	; 247
    2f48:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2f4c:	6a e2       	ldi	r22, 0x2A	; 42
    2f4e:	70 e0       	ldi	r23, 0x00	; 0
    2f50:	ce 01       	movw	r24, r28
    2f52:	01 96       	adiw	r24, 0x01	; 1
    2f54:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Endpoint_Write_Control_Stream_LE>
    2f58:	14 c0       	rjmp	.+40     	; 0x2f82 <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2f5a:	ae 01       	movw	r20, r28
    2f5c:	4f 5f       	subi	r20, 0xFF	; 255
    2f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f60:	60 91 5b 03 	lds	r22, 0x035B
    2f64:	0e 94 38 13 	call	0x2670	; 0x2670 <CALLBACK_USB_GetDescriptor>
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	09 f4       	brne	.+2      	; 0x2f6e <USB_Device_ProcessControlRequest+0x1ea>
    2f6c:	41 c0       	rjmp	.+130    	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
    2f6e:	20 91 e8 00 	lds	r18, 0x00E8
    2f72:	27 7f       	andi	r18, 0xF7	; 247
    2f74:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2f78:	bc 01       	movw	r22, r24
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7e:	0e 94 51 14 	call	0x28a2	; 0x28a2 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2f82:	80 91 e8 00 	lds	r24, 0x00E8
    2f86:	8b 77       	andi	r24, 0x7B	; 123
    2f88:	80 93 e8 00 	sts	0x00E8, r24
    2f8c:	31 c0       	rjmp	.+98     	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2f8e:	20 38       	cpi	r18, 0x80	; 128
    2f90:	79 f5       	brne	.+94     	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2f92:	80 91 e8 00 	lds	r24, 0x00E8
    2f96:	87 7f       	andi	r24, 0xF7	; 247
    2f98:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2f9c:	80 91 52 03 	lds	r24, 0x0352
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2fa0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2fa4:	80 91 e8 00 	lds	r24, 0x00E8
    2fa8:	8e 77       	andi	r24, 0x7E	; 126
    2faa:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2fae:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Endpoint_ClearStatusStage>
    2fb2:	1e c0       	rjmp	.+60     	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2fb4:	21 11       	cpse	r18, r1
    2fb6:	1c c0       	rjmp	.+56     	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2fb8:	90 91 59 03 	lds	r25, 0x0359
    2fbc:	92 30       	cpi	r25, 0x02	; 2
    2fbe:	c0 f4       	brcc	.+48     	; 0x2ff0 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2fc0:	80 91 e8 00 	lds	r24, 0x00E8
    2fc4:	87 7f       	andi	r24, 0xF7	; 247
    2fc6:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2fca:	90 93 52 03 	sts	0x0352, r25

	Endpoint_ClearStatusStage();
    2fce:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2fd2:	80 91 52 03 	lds	r24, 0x0352
    2fd6:	81 11       	cpse	r24, r1
    2fd8:	04 c0       	rjmp	.+8      	; 0x2fe2 <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2fda:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2fde:	87 ff       	sbrs	r24, 7
    2fe0:	02 c0       	rjmp	.+4      	; 0x2fe6 <USB_Device_ProcessControlRequest+0x262>
    2fe2:	84 e0       	ldi	r24, 0x04	; 4
    2fe4:	01 c0       	rjmp	.+2      	; 0x2fe8 <USB_Device_ProcessControlRequest+0x264>
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	80 93 56 03 	sts	0x0356, r24

	EVENT_USB_Device_ConfigurationChanged();
    2fec:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2ff0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2ff4:	83 ff       	sbrs	r24, 3
    2ff6:	0a c0       	rjmp	.+20     	; 0x300c <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2ff8:	80 91 e8 00 	lds	r24, 0x00E8
    2ffc:	87 7f       	andi	r24, 0xF7	; 247
    2ffe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3002:	80 91 eb 00 	lds	r24, 0x00EB
    3006:	80 62       	ori	r24, 0x20	; 32
    3008:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    300c:	aa 96       	adiw	r28, 0x2a	; 42
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	df 91       	pop	r29
    301a:	cf 91       	pop	r28
    301c:	1f 91       	pop	r17
    301e:	08 95       	ret

00003020 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    3020:	90 93 ea 02 	sts	0x02EA, r25
    3024:	80 93 e9 02 	sts	0x02E9, r24
    3028:	08 95       	ret

0000302a <host_get_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    302a:	80 91 e9 02 	lds	r24, 0x02E9
    302e:	90 91 ea 02 	lds	r25, 0x02EA
    3032:	08 95       	ret

00003034 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    3034:	e0 91 e9 02 	lds	r30, 0x02E9
    3038:	f0 91 ea 02 	lds	r31, 0x02EA
    303c:	30 97       	sbiw	r30, 0x00	; 0
    303e:	21 f0       	breq	.+8      	; 0x3048 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    3040:	01 90       	ld	r0, Z+
    3042:	f0 81       	ld	r31, Z
    3044:	e0 2d       	mov	r30, r0
    3046:	09 94       	ijmp
}
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	08 95       	ret

0000304c <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    304c:	ff 92       	push	r15
    304e:	0f 93       	push	r16
    3050:	1f 93       	push	r17
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	8c 01       	movw	r16, r24
    if (!driver) return;
    3058:	e0 91 e9 02 	lds	r30, 0x02E9
    305c:	f0 91 ea 02 	lds	r31, 0x02EA
    3060:	30 97       	sbiw	r30, 0x00	; 0
    3062:	99 f1       	breq	.+102    	; 0x30ca <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    3064:	02 80       	ldd	r0, Z+2	; 0x02
    3066:	f3 81       	ldd	r31, Z+3	; 0x03
    3068:	e0 2d       	mov	r30, r0
    306a:	09 95       	icall

    if (debug_keyboard) {
    306c:	80 91 41 03 	lds	r24, 0x0341
    3070:	82 ff       	sbrs	r24, 2
    3072:	2b c0       	rjmp	.+86     	; 0x30ca <host_keyboard_send+0x7e>
        dprint("keyboard: ");
    3074:	80 ff       	sbrs	r24, 0
    3076:	04 c0       	rjmp	.+8      	; 0x3080 <host_keyboard_send+0x34>
    3078:	8a e9       	ldi	r24, 0x9A	; 154
    307a:	96 e0       	ldi	r25, 0x06	; 6
    307c:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    3080:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    3082:	88 e0       	ldi	r24, 0x08	; 8
    3084:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    3086:	04 e9       	ldi	r16, 0x94	; 148
    3088:	16 e0       	ldi	r17, 0x06	; 6
    308a:	80 91 41 03 	lds	r24, 0x0341
    308e:	80 ff       	sbrs	r24, 0
    3090:	0b c0       	rjmp	.+22     	; 0x30a8 <host_keyboard_send+0x5c>
    3092:	88 81       	ld	r24, Y
    3094:	1f 92       	push	r1
    3096:	8f 93       	push	r24
    3098:	1f 93       	push	r17
    309a:	0f 93       	push	r16
    309c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    30a0:	0f 90       	pop	r0
    30a2:	0f 90       	pop	r0
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	fa 94       	dec	r15
    30aa:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    30ac:	f1 10       	cpse	r15, r1
    30ae:	ed cf       	rjmp	.-38     	; 0x308a <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    30b0:	80 91 41 03 	lds	r24, 0x0341
    30b4:	80 ff       	sbrs	r24, 0
    30b6:	09 c0       	rjmp	.+18     	; 0x30ca <host_keyboard_send+0x7e>
    30b8:	82 e9       	ldi	r24, 0x92	; 146
    30ba:	96 e0       	ldi	r25, 0x06	; 6
    }
}
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	1f 91       	pop	r17
    30c2:	0f 91       	pop	r16
    30c4:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    30c6:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <xputs>
    }
}
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	ff 90       	pop	r15
    30d4:	08 95       	ret

000030d6 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    30d6:	e0 91 e9 02 	lds	r30, 0x02E9
    30da:	f0 91 ea 02 	lds	r31, 0x02EA
    30de:	30 97       	sbiw	r30, 0x00	; 0
    30e0:	21 f0       	breq	.+8      	; 0x30ea <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    30e2:	04 80       	ldd	r0, Z+4	; 0x04
    30e4:	f5 81       	ldd	r31, Z+5	; 0x05
    30e6:	e0 2d       	mov	r30, r0
    30e8:	09 94       	ijmp
    30ea:	08 95       	ret

000030ec <host_system_send>:
}

void host_system_send(uint16_t report)
{
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
    30f0:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    30f2:	80 91 e7 02 	lds	r24, 0x02E7
    30f6:	90 91 e8 02 	lds	r25, 0x02E8
    30fa:	c8 17       	cp	r28, r24
    30fc:	d9 07       	cpc	r29, r25
    30fe:	09 f1       	breq	.+66     	; 0x3142 <host_system_send+0x56>
    last_system_report = report;
    3100:	d0 93 e8 02 	sts	0x02E8, r29
    3104:	c0 93 e7 02 	sts	0x02E7, r28

    if (!driver) return;
    3108:	e0 91 e9 02 	lds	r30, 0x02E9
    310c:	f0 91 ea 02 	lds	r31, 0x02EA
    3110:	30 97       	sbiw	r30, 0x00	; 0
    3112:	b9 f0       	breq	.+46     	; 0x3142 <host_system_send+0x56>
    (*driver->send_system)(report);
    3114:	06 80       	ldd	r0, Z+6	; 0x06
    3116:	f7 81       	ldd	r31, Z+7	; 0x07
    3118:	e0 2d       	mov	r30, r0
    311a:	ce 01       	movw	r24, r28
    311c:	09 95       	icall

    if (debug_keyboard) {
    311e:	80 91 41 03 	lds	r24, 0x0341
    3122:	82 ff       	sbrs	r24, 2
    3124:	0e c0       	rjmp	.+28     	; 0x3142 <host_system_send+0x56>
        dprintf("system: %04X\n", report);
    3126:	80 ff       	sbrs	r24, 0
    3128:	0c c0       	rjmp	.+24     	; 0x3142 <host_system_send+0x56>
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	84 e8       	ldi	r24, 0x84	; 132
    3130:	96 e0       	ldi	r25, 0x06	; 6
    3132:	9f 93       	push	r25
    3134:	8f 93       	push	r24
    3136:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    313a:	0f 90       	pop	r0
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    }
}
    3142:	df 91       	pop	r29
    3144:	cf 91       	pop	r28
    3146:	08 95       	ret

00003148 <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
    314c:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    314e:	80 91 e5 02 	lds	r24, 0x02E5
    3152:	90 91 e6 02 	lds	r25, 0x02E6
    3156:	c8 17       	cp	r28, r24
    3158:	d9 07       	cpc	r29, r25
    315a:	09 f1       	breq	.+66     	; 0x319e <host_consumer_send+0x56>
    last_consumer_report = report;
    315c:	d0 93 e6 02 	sts	0x02E6, r29
    3160:	c0 93 e5 02 	sts	0x02E5, r28

    if (!driver) return;
    3164:	e0 91 e9 02 	lds	r30, 0x02E9
    3168:	f0 91 ea 02 	lds	r31, 0x02EA
    316c:	30 97       	sbiw	r30, 0x00	; 0
    316e:	b9 f0       	breq	.+46     	; 0x319e <host_consumer_send+0x56>
    (*driver->send_consumer)(report);
    3170:	00 84       	ldd	r0, Z+8	; 0x08
    3172:	f1 85       	ldd	r31, Z+9	; 0x09
    3174:	e0 2d       	mov	r30, r0
    3176:	ce 01       	movw	r24, r28
    3178:	09 95       	icall

    if (debug_keyboard) {
    317a:	80 91 41 03 	lds	r24, 0x0341
    317e:	82 ff       	sbrs	r24, 2
    3180:	0e c0       	rjmp	.+28     	; 0x319e <host_consumer_send+0x56>
        dprintf("consumer: %04X\n", report);
    3182:	80 ff       	sbrs	r24, 0
    3184:	0c c0       	rjmp	.+24     	; 0x319e <host_consumer_send+0x56>
    3186:	df 93       	push	r29
    3188:	cf 93       	push	r28
    318a:	84 e7       	ldi	r24, 0x74	; 116
    318c:	96 e0       	ldi	r25, 0x06	; 6
    318e:	9f 93       	push	r25
    3190:	8f 93       	push	r24
    3192:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    }
}
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	08 95       	ret

000031a4 <keyboard_init>:
    matrix_setup();
}

void keyboard_init(void)
{
    timer_init();
    31a4:	0e 94 ef 24 	call	0x49de	; 0x49de <timer_init>
    matrix_init();
    31a8:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <matrix_init>

000031ac <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    31ac:	cf 92       	push	r12
    31ae:	df 92       	push	r13
    31b0:	ef 92       	push	r14
    31b2:	ff 92       	push	r15
    31b4:	0f 93       	push	r16
    31b6:	1f 93       	push	r17
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
    31bc:	00 d0       	rcall	.+0      	; 0x31be <keyboard_task+0x12>
    31be:	00 d0       	rcall	.+0      	; 0x31c0 <keyboard_task+0x14>
    31c0:	00 d0       	rcall	.+0      	; 0x31c2 <keyboard_task+0x16>
    31c2:	cd b7       	in	r28, 0x3d	; 61
    31c4:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    31c6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <matrix_scan>
    31ca:	3c ee       	ldi	r19, 0xEC	; 236
    31cc:	e3 2e       	mov	r14, r19
    31ce:	32 e0       	ldi	r19, 0x02	; 2
    31d0:	f3 2e       	mov	r15, r19
    31d2:	00 e0       	ldi	r16, 0x00	; 0
    31d4:	10 e0       	ldi	r17, 0x00	; 0
    31d6:	c0 2e       	mov	r12, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    31d8:	80 2f       	mov	r24, r16
    31da:	0e 94 a9 08 	call	0x1152	; 0x1152 <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    31de:	f7 01       	movw	r30, r14
    31e0:	d1 90       	ld	r13, Z+
    31e2:	7f 01       	movw	r14, r30
    31e4:	d8 26       	eor	r13, r24
        if (matrix_change) {
    31e6:	b1 f4       	brne	.+44     	; 0x3214 <keyboard_task+0x68>
    31e8:	0f 5f       	subi	r16, 0xFF	; 255
    31ea:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    31ec:	08 30       	cpi	r16, 0x08	; 8
    31ee:	11 05       	cpc	r17, r1
    31f0:	91 f7       	brne	.-28     	; 0x31d6 <keyboard_task+0x2a>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    31f2:	8f ef       	ldi	r24, 0xFF	; 255
    31f4:	89 83       	std	Y+1, r24	; 0x01
    31f6:	8a 83       	std	Y+2, r24	; 0x02
    31f8:	1b 82       	std	Y+3, r1	; 0x03
    31fa:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <timer_read>
    31fe:	81 60       	ori	r24, 0x01	; 1
    3200:	78 2f       	mov	r23, r24
    3202:	9d 83       	std	Y+5, r25	; 0x05
    3204:	8c 83       	std	Y+4, r24	; 0x04
    3206:	49 81       	ldd	r20, Y+1	; 0x01
    3208:	5a 81       	ldd	r21, Y+2	; 0x02
    320a:	6b 81       	ldd	r22, Y+3	; 0x03
    320c:	8d 81       	ldd	r24, Y+5	; 0x05
    320e:	0e 94 ca 19 	call	0x3394	; 0x3394 <action_exec>
    3212:	48 c0       	rjmp	.+144    	; 0x32a4 <keyboard_task+0xf8>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    3214:	90 91 41 03 	lds	r25, 0x0341
    3218:	91 ff       	sbrs	r25, 1
    321a:	04 c0       	rjmp	.+8      	; 0x3224 <keyboard_task+0x78>
    321c:	8e 83       	std	Y+6, r24	; 0x06
    321e:	0e 94 96 19 	call	0x332c	; 0x332c <matrix_print>
    3222:	8e 81       	ldd	r24, Y+6	; 0x06
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    3228:	4d 2d       	mov	r20, r13
    322a:	50 e0       	ldi	r21, 0x00	; 0
    322c:	92 2f       	mov	r25, r18
    322e:	ba 01       	movw	r22, r20
    3230:	02 2e       	mov	r0, r18
    3232:	02 c0       	rjmp	.+4      	; 0x3238 <keyboard_task+0x8c>
    3234:	75 95       	asr	r23
    3236:	67 95       	ror	r22
    3238:	0a 94       	dec	r0
    323a:	e2 f7       	brpl	.-8      	; 0x3234 <keyboard_task+0x88>
    323c:	60 ff       	sbrs	r22, 0
    323e:	2c c0       	rjmp	.+88     	; 0x3298 <keyboard_task+0xec>
                    keyevent_t e = (keyevent_t){
    3240:	29 83       	std	Y+1, r18	; 0x01
    3242:	ca 82       	std	Y+2, r12	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    3244:	ee 24       	eor	r14, r14
    3246:	e3 94       	inc	r14
    3248:	f1 2c       	mov	r15, r1
    324a:	02 c0       	rjmp	.+4      	; 0x3250 <keyboard_task+0xa4>
    324c:	ee 0c       	add	r14, r14
    324e:	ff 1c       	adc	r15, r15
    3250:	9a 95       	dec	r25
    3252:	e2 f7       	brpl	.-8      	; 0x324c <keyboard_task+0xa0>
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	8e 21       	and	r24, r14
    3258:	9f 21       	and	r25, r15
    325a:	21 e0       	ldi	r18, 0x01	; 1
    325c:	89 2b       	or	r24, r25
    325e:	09 f4       	brne	.+2      	; 0x3262 <keyboard_task+0xb6>
    3260:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    3262:	2b 83       	std	Y+3, r18	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    3264:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <timer_read>
    3268:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    326a:	78 2f       	mov	r23, r24
    326c:	9d 83       	std	Y+5, r25	; 0x05
    326e:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    3270:	49 81       	ldd	r20, Y+1	; 0x01
    3272:	5a 81       	ldd	r21, Y+2	; 0x02
    3274:	6b 81       	ldd	r22, Y+3	; 0x03
    3276:	8d 81       	ldd	r24, Y+5	; 0x05
    3278:	0e 94 ca 19 	call	0x3394	; 0x3394 <action_exec>
                    hook_matrix_change(e);
    327c:	49 81       	ldd	r20, Y+1	; 0x01
    327e:	5a 81       	ldd	r21, Y+2	; 0x02
    3280:	6b 81       	ldd	r22, Y+3	; 0x03
    3282:	7c 81       	ldd	r23, Y+4	; 0x04
    3284:	8d 81       	ldd	r24, Y+5	; 0x05
    3286:	0e 94 74 24 	call	0x48e8	; 0x48e8 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    328a:	f8 01       	movw	r30, r16
    328c:	e4 51       	subi	r30, 0x14	; 20
    328e:	fd 4f       	sbci	r31, 0xFD	; 253
    3290:	80 81       	ld	r24, Z
    3292:	8e 25       	eor	r24, r14
    3294:	80 83       	st	Z, r24
    3296:	06 c0       	rjmp	.+12     	; 0x32a4 <keyboard_task+0xf8>
    3298:	2f 5f       	subi	r18, 0xFF	; 255
    329a:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    329c:	28 30       	cpi	r18, 0x08	; 8
    329e:	31 05       	cpc	r19, r1
    32a0:	29 f6       	brne	.-118    	; 0x322c <keyboard_task+0x80>
    32a2:	a2 cf       	rjmp	.-188    	; 0x31e8 <keyboard_task+0x3c>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    32a4:	0e 94 73 24 	call	0x48e6	; 0x48e6 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    32a8:	0e 94 67 28 	call	0x50ce	; 0x50ce <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    32ac:	10 91 eb 02 	lds	r17, 0x02EB
    32b0:	0e 94 1a 18 	call	0x3034	; 0x3034 <host_keyboard_leds>
    32b4:	18 17       	cp	r17, r24
    32b6:	41 f1       	breq	.+80     	; 0x3308 <keyboard_task+0x15c>
        led_status = host_keyboard_leds();
    32b8:	0e 94 1a 18 	call	0x3034	; 0x3034 <host_keyboard_leds>
    32bc:	80 93 eb 02 	sts	0x02EB, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    32c0:	90 91 41 03 	lds	r25, 0x0341
    32c4:	92 ff       	sbrs	r25, 2
    32c6:	0e c0       	rjmp	.+28     	; 0x32e4 <keyboard_task+0x138>
    32c8:	90 ff       	sbrs	r25, 0
    32ca:	0c c0       	rjmp	.+24     	; 0x32e4 <keyboard_task+0x138>
    32cc:	1f 92       	push	r1
    32ce:	8f 93       	push	r24
    32d0:	85 ea       	ldi	r24, 0xA5	; 165
    32d2:	96 e0       	ldi	r25, 0x06	; 6
    32d4:	9f 93       	push	r25
    32d6:	8f 93       	push	r24
    32d8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    32e4:	80 91 eb 02 	lds	r24, 0x02EB
    }
}
    32e8:	26 96       	adiw	r28, 0x06	; 6
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	de bf       	out	0x3e, r29	; 62
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	cd bf       	out	0x3d, r28	; 61
    32f4:	df 91       	pop	r29
    32f6:	cf 91       	pop	r28
    32f8:	1f 91       	pop	r17
    32fa:	0f 91       	pop	r16
    32fc:	ff 90       	pop	r15
    32fe:	ef 90       	pop	r14
    3300:	df 90       	pop	r13
    3302:	cf 90       	pop	r12

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    3304:	0c 94 85 24 	jmp	0x490a	; 0x490a <hook_keyboard_leds_change>
    }
}
    3308:	26 96       	adiw	r28, 0x06	; 6
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	1f 91       	pop	r17
    331a:	0f 91       	pop	r16
    331c:	ff 90       	pop	r15
    331e:	ef 90       	pop	r14
    3320:	df 90       	pop	r13
    3322:	cf 90       	pop	r12
    3324:	08 95       	ret

00003326 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    3326:	0c 94 b5 08 	jmp	0x116a	; 0x116a <led_set>

0000332a <matrix_clear>:
    return MATRIX_COLS;
}

__attribute__ ((weak))
void matrix_clear(void)
{
    332a:	08 95       	ret

0000332c <matrix_print>:
    return (matrix_get_row(row) & (1<<col));
}

__attribute__ ((weak))
void matrix_print(void)
{
    332c:	ef 92       	push	r14
    332e:	ff 92       	push	r15
    3330:	0f 93       	push	r16
    3332:	1f 93       	push	r17
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
    3338:	8e eb       	ldi	r24, 0xBE	; 190
    333a:	96 e0       	ldi	r25, 0x06	; 6
    333c:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    3340:	c0 e0       	ldi	r28, 0x00	; 0
    3342:	d0 e0       	ldi	r29, 0x00	; 0
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
    3344:	8e e2       	ldi	r24, 0x2E	; 46
    3346:	e8 2e       	mov	r14, r24
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	f8 2e       	mov	r15, r24
    334c:	00 eb       	ldi	r16, 0xB0	; 176
    334e:	16 e0       	ldi	r17, 0x06	; 6
    3350:	8c 2f       	mov	r24, r28
    3352:	0e 94 a9 08 	call	0x1152	; 0x1152 <matrix_get_row>
    3356:	0e 94 61 24 	call	0x48c2	; 0x48c2 <bitrev>
    335a:	ff 92       	push	r15
    335c:	ef 92       	push	r14
    335e:	1f 92       	push	r1
    3360:	8f 93       	push	r24
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	1f 93       	push	r17
    3368:	0f 93       	push	r16
    336a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    336e:	21 96       	adiw	r28, 0x01	; 1
    print("r/c 0123456789ABCDEF\n");
#elif (MATRIX_COLS <= 32)
    print("r/c 0123456789ABCDEF0123456789ABCDEF\n");
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    3370:	8d b7       	in	r24, 0x3d	; 61
    3372:	9e b7       	in	r25, 0x3e	; 62
    3374:	08 96       	adiw	r24, 0x08	; 8
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	9e bf       	out	0x3e, r25	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	8d bf       	out	0x3d, r24	; 61
    3380:	c8 30       	cpi	r28, 0x08	; 8
    3382:	d1 05       	cpc	r29, r1
    3384:	29 f7       	brne	.-54     	; 0x3350 <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    3386:	df 91       	pop	r29
    3388:	cf 91       	pop	r28
    338a:	1f 91       	pop	r17
    338c:	0f 91       	pop	r16
    338e:	ff 90       	pop	r15
    3390:	ef 90       	pop	r14
    3392:	08 95       	ret

00003394 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    3394:	cf 93       	push	r28
    3396:	df 93       	push	r29
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	2b 97       	sbiw	r28, 0x0b	; 11
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	f8 94       	cli
    33a2:	de bf       	out	0x3e, r29	; 62
    33a4:	0f be       	out	0x3f, r0	; 63
    33a6:	cd bf       	out	0x3d, r28	; 61
    33a8:	4f 83       	std	Y+7, r20	; 0x07
    33aa:	58 87       	std	Y+8, r21	; 0x08
    33ac:	69 87       	std	Y+9, r22	; 0x09
    33ae:	7a 87       	std	Y+10, r23	; 0x0a
    33b0:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    33b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    33b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    33b6:	89 2b       	or	r24, r25
    33b8:	31 f0       	breq	.+12     	; 0x33c6 <action_exec+0x32>
    33ba:	5f 3f       	cpi	r21, 0xFF	; 255
    33bc:	11 f0       	breq	.+4      	; 0x33c2 <action_exec+0x2e>
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	03 c0       	rjmp	.+6      	; 0x33c8 <action_exec+0x34>
    33c2:	4f 3f       	cpi	r20, 0xFF	; 255
    33c4:	e1 f7       	brne	.-8      	; 0x33be <action_exec+0x2a>
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    if (!IS_NOEVENT(event)) {
    33c8:	81 11       	cpse	r24, r1
    33ca:	07 c0       	rjmp	.+14     	; 0x33da <action_exec+0x46>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    33cc:	4f 81       	ldd	r20, Y+7	; 0x07
    33ce:	58 85       	ldd	r21, Y+8	; 0x08
    33d0:	69 85       	ldd	r22, Y+9	; 0x09
    33d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    33d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    33d6:	0e 94 74 24 	call	0x48e8	; 0x48e8 <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    33da:	de 01       	movw	r26, r28
    33dc:	11 96       	adiw	r26, 0x01	; 1
    33de:	86 e0       	ldi	r24, 0x06	; 6
    33e0:	fd 01       	movw	r30, r26
    33e2:	11 92       	st	Z+, r1
    33e4:	8a 95       	dec	r24
    33e6:	e9 f7       	brne	.-6      	; 0x33e2 <action_exec+0x4e>
    33e8:	85 e0       	ldi	r24, 0x05	; 5
    33ea:	fe 01       	movw	r30, r28
    33ec:	37 96       	adiw	r30, 0x07	; 7
    33ee:	01 90       	ld	r0, Z+
    33f0:	0d 92       	st	X+, r0
    33f2:	8a 95       	dec	r24
    33f4:	e1 f7       	brne	.-8      	; 0x33ee <action_exec+0x5a>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    33f6:	49 81       	ldd	r20, Y+1	; 0x01
    33f8:	5a 81       	ldd	r21, Y+2	; 0x02
    33fa:	6b 81       	ldd	r22, Y+3	; 0x03
    33fc:	7c 81       	ldd	r23, Y+4	; 0x04
    33fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3400:	9e 81       	ldd	r25, Y+6	; 0x06
    3402:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    3406:	2b 96       	adiw	r28, 0x0b	; 11
    3408:	0f b6       	in	r0, 0x3f	; 63
    340a:	f8 94       	cli
    340c:	de bf       	out	0x3e, r29	; 62
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	cd bf       	out	0x3d, r28	; 61
    3412:	df 91       	pop	r29
    3414:	cf 91       	pop	r28
    3416:	08 95       	ret

00003418 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    3418:	cf 93       	push	r28
    341a:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    341c:	88 23       	and	r24, r24
    341e:	09 f4       	brne	.+2      	; 0x3422 <register_code+0xa>
    3420:	a3 c0       	rjmp	.+326    	; 0x3568 <register_code+0x150>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    3422:	8c ef       	ldi	r24, 0xFC	; 252
    3424:	8c 0f       	add	r24, r28
    3426:	81 3a       	cpi	r24, 0xA1	; 161
    3428:	48 f4       	brcc	.+18     	; 0x343c <register_code+0x24>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    342a:	8c 2f       	mov	r24, r28
    342c:	0e 94 84 2b 	call	0x5708	; 0x5708 <command_proc>
    3430:	81 11       	cpse	r24, r1
    3432:	9a c0       	rjmp	.+308    	; 0x3568 <register_code+0x150>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    3434:	8c 2f       	mov	r24, r28
    3436:	0e 94 78 23 	call	0x46f0	; 0x46f0 <add_key>
    343a:	0c c0       	rjmp	.+24     	; 0x3454 <register_code+0x3c>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    343c:	80 e2       	ldi	r24, 0x20	; 32
    343e:	8c 0f       	add	r24, r28
    3440:	88 30       	cpi	r24, 0x08	; 8
    3442:	58 f4       	brcc	.+22     	; 0x345a <register_code+0x42>
        add_mods(MOD_BIT(code));
    3444:	c7 70       	andi	r28, 0x07	; 7
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	01 c0       	rjmp	.+2      	; 0x344c <register_code+0x34>
    344a:	88 0f       	add	r24, r24
    344c:	ca 95       	dec	r28
    344e:	ea f7       	brpl	.-6      	; 0x344a <register_code+0x32>
    3450:	0e 94 bd 23 	call	0x477a	; 0x477a <add_mods>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    3454:	cf 91       	pop	r28
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    3456:	0c 94 03 24 	jmp	0x4806	; 0x4806 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    345a:	8b e5       	ldi	r24, 0x5B	; 91
    345c:	8c 0f       	add	r24, r28
    345e:	83 30       	cpi	r24, 0x03	; 3
    3460:	78 f4       	brcc	.+30     	; 0x3480 <register_code+0x68>
        host_system_send(KEYCODE2SYSTEM(code));
    3462:	c5 3a       	cpi	r28, 0xA5	; 165
    3464:	29 f0       	breq	.+10     	; 0x3470 <register_code+0x58>
    3466:	c6 3a       	cpi	r28, 0xA6	; 166
    3468:	31 f4       	brne	.+12     	; 0x3476 <register_code+0x5e>
    346a:	82 e8       	ldi	r24, 0x82	; 130
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	05 c0       	rjmp	.+10     	; 0x347a <register_code+0x62>
    3470:	81 e8       	ldi	r24, 0x81	; 129
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	02 c0       	rjmp	.+4      	; 0x347a <register_code+0x62>
    3476:	83 e8       	ldi	r24, 0x83	; 131
    3478:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    347a:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    347c:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <host_system_send>
    }
    else if IS_CONSUMER(code) {
    3480:	88 e5       	ldi	r24, 0x58	; 88
    3482:	8c 0f       	add	r24, r28
    3484:	85 31       	cpi	r24, 0x15	; 21
    3486:	08 f0       	brcs	.+2      	; 0x348a <register_code+0x72>
    3488:	6f c0       	rjmp	.+222    	; 0x3568 <register_code+0x150>
        host_consumer_send(KEYCODE2CONSUMER(code));
    348a:	c8 3a       	cpi	r28, 0xA8	; 168
    348c:	61 f1       	breq	.+88     	; 0x34e6 <register_code+0xce>
    348e:	c9 3a       	cpi	r28, 0xA9	; 169
    3490:	69 f1       	breq	.+90     	; 0x34ec <register_code+0xd4>
    3492:	ca 3a       	cpi	r28, 0xAA	; 170
    3494:	71 f1       	breq	.+92     	; 0x34f2 <register_code+0xda>
    3496:	cb 3a       	cpi	r28, 0xAB	; 171
    3498:	79 f1       	breq	.+94     	; 0x34f8 <register_code+0xe0>
    349a:	cc 3a       	cpi	r28, 0xAC	; 172
    349c:	81 f1       	breq	.+96     	; 0x34fe <register_code+0xe6>
    349e:	cd 3a       	cpi	r28, 0xAD	; 173
    34a0:	89 f1       	breq	.+98     	; 0x3504 <register_code+0xec>
    34a2:	ce 3a       	cpi	r28, 0xAE	; 174
    34a4:	91 f1       	breq	.+100    	; 0x350a <register_code+0xf2>
    34a6:	cf 3a       	cpi	r28, 0xAF	; 175
    34a8:	99 f1       	breq	.+102    	; 0x3510 <register_code+0xf8>
    34aa:	c1 3b       	cpi	r28, 0xB1	; 177
    34ac:	a1 f1       	breq	.+104    	; 0x3516 <register_code+0xfe>
    34ae:	c0 3b       	cpi	r28, 0xB0	; 176
    34b0:	a9 f1       	breq	.+106    	; 0x351c <register_code+0x104>
    34b2:	c2 3b       	cpi	r28, 0xB2	; 178
    34b4:	b1 f1       	breq	.+108    	; 0x3522 <register_code+0x10a>
    34b6:	c3 3b       	cpi	r28, 0xB3	; 179
    34b8:	b9 f1       	breq	.+110    	; 0x3528 <register_code+0x110>
    34ba:	c4 3b       	cpi	r28, 0xB4	; 180
    34bc:	c1 f1       	breq	.+112    	; 0x352e <register_code+0x116>
    34be:	c5 3b       	cpi	r28, 0xB5	; 181
    34c0:	c9 f1       	breq	.+114    	; 0x3534 <register_code+0x11c>
    34c2:	c6 3b       	cpi	r28, 0xB6	; 182
    34c4:	d1 f1       	breq	.+116    	; 0x353a <register_code+0x122>
    34c6:	c7 3b       	cpi	r28, 0xB7	; 183
    34c8:	d9 f1       	breq	.+118    	; 0x3540 <register_code+0x128>
    34ca:	c8 3b       	cpi	r28, 0xB8	; 184
    34cc:	e1 f1       	breq	.+120    	; 0x3546 <register_code+0x12e>
    34ce:	c9 3b       	cpi	r28, 0xB9	; 185
    34d0:	e9 f1       	breq	.+122    	; 0x354c <register_code+0x134>
    34d2:	ca 3b       	cpi	r28, 0xBA	; 186
    34d4:	f1 f1       	breq	.+124    	; 0x3552 <register_code+0x13a>
    34d6:	cb 3b       	cpi	r28, 0xBB	; 187
    34d8:	f9 f1       	breq	.+126    	; 0x3558 <register_code+0x140>
    34da:	cc 3b       	cpi	r28, 0xBC	; 188
    34dc:	09 f0       	breq	.+2      	; 0x34e0 <register_code+0xc8>
    34de:	3f c0       	rjmp	.+126    	; 0x355e <register_code+0x146>
    34e0:	8a e2       	ldi	r24, 0x2A	; 42
    34e2:	92 e0       	ldi	r25, 0x02	; 2
    34e4:	3e c0       	rjmp	.+124    	; 0x3562 <register_code+0x14a>
    34e6:	82 ee       	ldi	r24, 0xE2	; 226
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	3b c0       	rjmp	.+118    	; 0x3562 <register_code+0x14a>
    34ec:	89 ee       	ldi	r24, 0xE9	; 233
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	38 c0       	rjmp	.+112    	; 0x3562 <register_code+0x14a>
    34f2:	8a ee       	ldi	r24, 0xEA	; 234
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	35 c0       	rjmp	.+106    	; 0x3562 <register_code+0x14a>
    34f8:	85 eb       	ldi	r24, 0xB5	; 181
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	32 c0       	rjmp	.+100    	; 0x3562 <register_code+0x14a>
    34fe:	86 eb       	ldi	r24, 0xB6	; 182
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	2f c0       	rjmp	.+94     	; 0x3562 <register_code+0x14a>
    3504:	83 eb       	ldi	r24, 0xB3	; 179
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	2c c0       	rjmp	.+88     	; 0x3562 <register_code+0x14a>
    350a:	84 eb       	ldi	r24, 0xB4	; 180
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	29 c0       	rjmp	.+82     	; 0x3562 <register_code+0x14a>
    3510:	87 eb       	ldi	r24, 0xB7	; 183
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	26 c0       	rjmp	.+76     	; 0x3562 <register_code+0x14a>
    3516:	8c ec       	ldi	r24, 0xCC	; 204
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	23 c0       	rjmp	.+70     	; 0x3562 <register_code+0x14a>
    351c:	8d ec       	ldi	r24, 0xCD	; 205
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	20 c0       	rjmp	.+64     	; 0x3562 <register_code+0x14a>
    3522:	83 e8       	ldi	r24, 0x83	; 131
    3524:	91 e0       	ldi	r25, 0x01	; 1
    3526:	1d c0       	rjmp	.+58     	; 0x3562 <register_code+0x14a>
    3528:	8a e8       	ldi	r24, 0x8A	; 138
    352a:	91 e0       	ldi	r25, 0x01	; 1
    352c:	1a c0       	rjmp	.+52     	; 0x3562 <register_code+0x14a>
    352e:	82 e9       	ldi	r24, 0x92	; 146
    3530:	91 e0       	ldi	r25, 0x01	; 1
    3532:	17 c0       	rjmp	.+46     	; 0x3562 <register_code+0x14a>
    3534:	84 e9       	ldi	r24, 0x94	; 148
    3536:	91 e0       	ldi	r25, 0x01	; 1
    3538:	14 c0       	rjmp	.+40     	; 0x3562 <register_code+0x14a>
    353a:	81 e2       	ldi	r24, 0x21	; 33
    353c:	92 e0       	ldi	r25, 0x02	; 2
    353e:	11 c0       	rjmp	.+34     	; 0x3562 <register_code+0x14a>
    3540:	83 e2       	ldi	r24, 0x23	; 35
    3542:	92 e0       	ldi	r25, 0x02	; 2
    3544:	0e c0       	rjmp	.+28     	; 0x3562 <register_code+0x14a>
    3546:	84 e2       	ldi	r24, 0x24	; 36
    3548:	92 e0       	ldi	r25, 0x02	; 2
    354a:	0b c0       	rjmp	.+22     	; 0x3562 <register_code+0x14a>
    354c:	85 e2       	ldi	r24, 0x25	; 37
    354e:	92 e0       	ldi	r25, 0x02	; 2
    3550:	08 c0       	rjmp	.+16     	; 0x3562 <register_code+0x14a>
    3552:	86 e2       	ldi	r24, 0x26	; 38
    3554:	92 e0       	ldi	r25, 0x02	; 2
    3556:	05 c0       	rjmp	.+10     	; 0x3562 <register_code+0x14a>
    3558:	87 e2       	ldi	r24, 0x27	; 39
    355a:	92 e0       	ldi	r25, 0x02	; 2
    355c:	02 c0       	rjmp	.+4      	; 0x3562 <register_code+0x14a>
    355e:	80 e0       	ldi	r24, 0x00	; 0
    3560:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    3562:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    3564:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <host_consumer_send>
    }
}
    3568:	cf 91       	pop	r28
    356a:	08 95       	ret

0000356c <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    356c:	88 23       	and	r24, r24
    356e:	29 f1       	breq	.+74     	; 0x35ba <unregister_code+0x4e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    3570:	9c ef       	ldi	r25, 0xFC	; 252
    3572:	98 0f       	add	r25, r24
    3574:	91 3a       	cpi	r25, 0xA1	; 161
    3576:	18 f4       	brcc	.+6      	; 0x357e <unregister_code+0x12>
        del_key(code);
    3578:	0e 94 99 23 	call	0x4732	; 0x4732 <del_key>
    357c:	0d c0       	rjmp	.+26     	; 0x3598 <unregister_code+0x2c>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    357e:	90 e2       	ldi	r25, 0x20	; 32
    3580:	98 0f       	add	r25, r24
    3582:	98 30       	cpi	r25, 0x08	; 8
    3584:	58 f4       	brcc	.+22     	; 0x359c <unregister_code+0x30>
        del_mods(MOD_BIT(code));
    3586:	87 70       	andi	r24, 0x07	; 7
    3588:	91 e0       	ldi	r25, 0x01	; 1
    358a:	01 c0       	rjmp	.+2      	; 0x358e <unregister_code+0x22>
    358c:	99 0f       	add	r25, r25
    358e:	8a 95       	dec	r24
    3590:	ea f7       	brpl	.-6      	; 0x358c <unregister_code+0x20>
    3592:	89 2f       	mov	r24, r25
    3594:	0e 94 c3 23 	call	0x4786	; 0x4786 <del_mods>
        send_keyboard_report();
    3598:	0c 94 03 24 	jmp	0x4806	; 0x4806 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    359c:	9b e5       	ldi	r25, 0x5B	; 91
    359e:	98 0f       	add	r25, r24
    35a0:	93 30       	cpi	r25, 0x03	; 3
    35a2:	20 f4       	brcc	.+8      	; 0x35ac <unregister_code+0x40>
        host_system_send(0);
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <host_system_send>
    }
    else if IS_CONSUMER(code) {
    35ac:	88 5a       	subi	r24, 0xA8	; 168
    35ae:	85 31       	cpi	r24, 0x15	; 21
    35b0:	20 f4       	brcc	.+8      	; 0x35ba <unregister_code+0x4e>
        host_consumer_send(0);
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <host_consumer_send>
    35ba:	08 95       	ret

000035bc <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    35bc:	88 23       	and	r24, r24
    35be:	21 f0       	breq	.+8      	; 0x35c8 <register_mods+0xc>
        add_mods(mods);
    35c0:	0e 94 bd 23 	call	0x477a	; 0x477a <add_mods>
        send_keyboard_report();
    35c4:	0c 94 03 24 	jmp	0x4806	; 0x4806 <send_keyboard_report>
    35c8:	08 95       	ret

000035ca <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    35ca:	88 23       	and	r24, r24
    35cc:	21 f0       	breq	.+8      	; 0x35d6 <unregister_mods+0xc>
        del_mods(mods);
    35ce:	0e 94 c3 23 	call	0x4786	; 0x4786 <del_mods>
        send_keyboard_report();
    35d2:	0c 94 03 24 	jmp	0x4806	; 0x4806 <send_keyboard_report>
    35d6:	08 95       	ret

000035d8 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    35d8:	cf 92       	push	r12
    35da:	df 92       	push	r13
    35dc:	ef 92       	push	r14
    35de:	ff 92       	push	r15
    35e0:	0f 93       	push	r16
    35e2:	1f 93       	push	r17
    35e4:	cf 93       	push	r28
    35e6:	df 93       	push	r29
    35e8:	cd b7       	in	r28, 0x3d	; 61
    35ea:	de b7       	in	r29, 0x3e	; 62
    35ec:	28 97       	sbiw	r28, 0x08	; 8
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	f8 94       	cli
    35f2:	de bf       	out	0x3e, r29	; 62
    35f4:	0f be       	out	0x3f, r0	; 63
    35f6:	cd bf       	out	0x3d, r28	; 61
    35f8:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    35fa:	85 e0       	ldi	r24, 0x05	; 5
    35fc:	f8 01       	movw	r30, r16
    35fe:	de 01       	movw	r26, r28
    3600:	11 96       	adiw	r26, 0x01	; 1
    3602:	01 90       	ld	r0, Z+
    3604:	0d 92       	st	X+, r0
    3606:	8a 95       	dec	r24
    3608:	e1 f7       	brne	.-8      	; 0x3602 <process_action+0x2a>
    360a:	f8 01       	movw	r30, r16
    360c:	40 81       	ld	r20, Z
    360e:	31 81       	ldd	r19, Z+1	; 0x01
    3610:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    3612:	25 81       	ldd	r18, Z+5	; 0x05
    3614:	22 95       	swap	r18
    3616:	2f 70       	andi	r18, 0x0F	; 15
    3618:	83 81       	ldd	r24, Z+3	; 0x03
    361a:	94 81       	ldd	r25, Z+4	; 0x04
    361c:	89 2b       	or	r24, r25
    361e:	31 f0       	breq	.+12     	; 0x362c <process_action+0x54>
    3620:	3f 3f       	cpi	r19, 0xFF	; 255
    3622:	31 f4       	brne	.+12     	; 0x3630 <process_action+0x58>
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	4f 3f       	cpi	r20, 0xFF	; 255
    3628:	19 f4       	brne	.+6      	; 0x3630 <process_action+0x58>
    362a:	03 c0       	rjmp	.+6      	; 0x3632 <process_action+0x5a>
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	01 c0       	rjmp	.+2      	; 0x3632 <process_action+0x5a>
    3630:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    3632:	80 fd       	sbrc	r24, 0
    3634:	e1 c2       	rjmp	.+1474   	; 0x3bf8 <process_action+0x620>

    action_t action = layer_switch_get_action(event.key);
    3636:	49 83       	std	Y+1, r20	; 0x01
    3638:	3a 83       	std	Y+2, r19	; 0x02
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	9a 81       	ldd	r25, Y+2	; 0x02
    363e:	2f 83       	std	Y+7, r18	; 0x07
    3640:	0e 94 36 23 	call	0x466c	; 0x466c <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    3644:	9e 83       	std	Y+6, r25	; 0x06
    3646:	88 87       	std	Y+8, r24	; 0x08
    3648:	0e 94 35 23 	call	0x466a	; 0x466a <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    364c:	0e 94 5d 22 	call	0x44ba	; 0x44ba <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    3650:	4e 81       	ldd	r20, Y+6	; 0x06
    3652:	e4 2f       	mov	r30, r20
    3654:	e2 95       	swap	r30
    3656:	ef 70       	andi	r30, 0x0F	; 15
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	e7 55       	subi	r30, 0x57	; 87
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	2f 81       	ldd	r18, Y+7	; 0x07
    3660:	68 85       	ldd	r22, Y+8	; 0x08
    3662:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    3666:	84 2f       	mov	r24, r20
    3668:	80 7f       	andi	r24, 0xF0	; 240
    366a:	14 2f       	mov	r17, r20
    366c:	1f 70       	andi	r17, 0x0F	; 15
    366e:	88 23       	and	r24, r24
    3670:	11 f0       	breq	.+4      	; 0x3676 <process_action+0x9e>
    3672:	12 95       	swap	r17
    3674:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    3676:	ff 20       	and	r15, r15
    3678:	59 f0       	breq	.+22     	; 0x3690 <process_action+0xb8>
                    if (mods) {
    367a:	11 23       	and	r17, r17
    367c:	09 f4       	brne	.+2      	; 0x3680 <process_action+0xa8>
    367e:	71 c2       	rjmp	.+1250   	; 0x3b62 <process_action+0x58a>
                        add_weak_mods(mods);
    3680:	81 2f       	mov	r24, r17
    3682:	68 87       	std	Y+8, r22	; 0x08
    3684:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <add_weak_mods>
                        send_keyboard_report();
    3688:	0e 94 03 24 	call	0x4806	; 0x4806 <send_keyboard_report>
    368c:	68 85       	ldd	r22, Y+8	; 0x08
    368e:	69 c2       	rjmp	.+1234   	; 0x3b62 <process_action+0x58a>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    3690:	86 2f       	mov	r24, r22
    3692:	0e 94 b6 1a 	call	0x356c	; 0x356c <unregister_code>
                    if (mods) {
    3696:	11 23       	and	r17, r17
    3698:	09 f4       	brne	.+2      	; 0x369c <process_action+0xc4>
    369a:	ae c2       	rjmp	.+1372   	; 0x3bf8 <process_action+0x620>
                        del_weak_mods(mods);
    369c:	81 2f       	mov	r24, r17
    369e:	0e 94 d6 23 	call	0x47ac	; 0x47ac <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    36a2:	28 96       	adiw	r28, 0x08	; 8
    36a4:	0f b6       	in	r0, 0x3f	; 63
    36a6:	f8 94       	cli
    36a8:	de bf       	out	0x3e, r29	; 62
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	cd bf       	out	0x3d, r28	; 61
    36ae:	df 91       	pop	r29
    36b0:	cf 91       	pop	r28
    36b2:	1f 91       	pop	r17
    36b4:	0f 91       	pop	r16
    36b6:	ff 90       	pop	r15
    36b8:	ef 90       	pop	r14
    36ba:	df 90       	pop	r13
    36bc:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    36be:	0c 94 03 24 	jmp	0x4806	; 0x4806 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    36c2:	84 2f       	mov	r24, r20
    36c4:	80 7f       	andi	r24, 0xF0	; 240
    36c6:	94 2f       	mov	r25, r20
    36c8:	9f 70       	andi	r25, 0x0F	; 15
    36ca:	e9 2e       	mov	r14, r25
    36cc:	80 32       	cpi	r24, 0x20	; 32
    36ce:	19 f0       	breq	.+6      	; 0x36d6 <process_action+0xfe>
    36d0:	e2 94       	swap	r14
    36d2:	80 ef       	ldi	r24, 0xF0	; 240
    36d4:	e8 22       	and	r14, r24
                                                                    action.key.mods<<4;
                switch (action.key.code) {
    36d6:	66 23       	and	r22, r22
    36d8:	19 f0       	breq	.+6      	; 0x36e0 <process_action+0x108>
    36da:	61 30       	cpi	r22, 0x01	; 1
    36dc:	01 f1       	breq	.+64     	; 0x371e <process_action+0x146>
    36de:	29 c0       	rjmp	.+82     	; 0x3732 <process_action+0x15a>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    36e0:	ff 20       	and	r15, r15
    36e2:	a9 f0       	breq	.+42     	; 0x370e <process_action+0x136>
                            if (tap_count == 0) {
                                register_mods(mods);
    36e4:	8e 2d       	mov	r24, r14
                switch (action.key.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    36e6:	22 23       	and	r18, r18
    36e8:	49 f1       	breq	.+82     	; 0x373c <process_action+0x164>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    36ea:	21 30       	cpi	r18, 0x01	; 1
    36ec:	39 f5       	brne	.+78     	; 0x373c <process_action+0x164>
            break;
#endif
        default:
            break;
    }
}
    36ee:	28 96       	adiw	r28, 0x08	; 8
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	df 91       	pop	r29
    36fc:	cf 91       	pop	r28
    36fe:	1f 91       	pop	r17
    3700:	0f 91       	pop	r16
    3702:	ff 90       	pop	r15
    3704:	ef 90       	pop	r14
    3706:	df 90       	pop	r13
    3708:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    370a:	0c 94 e0 23 	jmp	0x47c0	; 0x47c0 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    370e:	22 23       	and	r18, r18
    3710:	19 f0       	breq	.+6      	; 0x3718 <process_action+0x140>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    3712:	21 30       	cpi	r18, 0x01	; 1
    3714:	09 f4       	brne	.+2      	; 0x3718 <process_action+0x140>
    3716:	70 c2       	rjmp	.+1248   	; 0x3bf8 <process_action+0x620>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    3718:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <clear_oneshot_mods>
    371c:	2c c0       	rjmp	.+88     	; 0x3776 <process_action+0x19e>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    371e:	ff 20       	and	r15, r15
    3720:	e9 f0       	breq	.+58     	; 0x375c <process_action+0x184>
                            if (tap_count <= TAPPING_TOGGLE) {
    3722:	26 30       	cpi	r18, 0x06	; 6
    3724:	08 f0       	brcs	.+2      	; 0x3728 <process_action+0x150>
    3726:	68 c2       	rjmp	.+1232   	; 0x3bf8 <process_action+0x620>
                                if (mods & get_mods()) {
    3728:	0e 94 ba 23 	call	0x4774	; 0x4774 <get_mods>
    372c:	8e 21       	and	r24, r14
    372e:	29 f0       	breq	.+10     	; 0x373a <process_action+0x162>
    3730:	22 c0       	rjmp	.+68     	; 0x3776 <process_action+0x19e>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    3732:	ff 20       	and	r15, r15
    3734:	f1 f0       	breq	.+60     	; 0x3772 <process_action+0x19a>
                            if (tap_count > 0) {
    3736:	21 11       	cpse	r18, r1
    3738:	15 c0       	rjmp	.+42     	; 0x3764 <process_action+0x18c>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    373a:	8e 2d       	mov	r24, r14
            break;
#endif
        default:
            break;
    }
}
    373c:	28 96       	adiw	r28, 0x08	; 8
    373e:	0f b6       	in	r0, 0x3f	; 63
    3740:	f8 94       	cli
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	0f be       	out	0x3f, r0	; 63
    3746:	cd bf       	out	0x3d, r28	; 61
    3748:	df 91       	pop	r29
    374a:	cf 91       	pop	r28
    374c:	1f 91       	pop	r17
    374e:	0f 91       	pop	r16
    3750:	ff 90       	pop	r15
    3752:	ef 90       	pop	r14
    3754:	df 90       	pop	r13
    3756:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    3758:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    375c:	25 30       	cpi	r18, 0x05	; 5
    375e:	08 f0       	brcs	.+2      	; 0x3762 <process_action+0x18a>
    3760:	4b c2       	rjmp	.+1174   	; 0x3bf8 <process_action+0x620>
    3762:	09 c0       	rjmp	.+18     	; 0x3776 <process_action+0x19e>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    3764:	f8 01       	movw	r30, r16
    3766:	85 81       	ldd	r24, Z+5	; 0x05
    3768:	80 ff       	sbrs	r24, 0
    376a:	fb c1       	rjmp	.+1014   	; 0x3b62 <process_action+0x58a>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    376c:	8f 70       	andi	r24, 0x0F	; 15
    376e:	85 83       	std	Z+5, r24	; 0x05
    3770:	e4 cf       	rjmp	.-56     	; 0x373a <process_action+0x162>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    3772:	21 11       	cpse	r18, r1
    3774:	0a c2       	rjmp	.+1044   	; 0x3b8a <process_action+0x5b2>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    3776:	8e 2d       	mov	r24, r14
    3778:	78 c1       	rjmp	.+752    	; 0x3a6a <process_action+0x492>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    377a:	24 2f       	mov	r18, r20
    377c:	26 95       	lsr	r18
    377e:	26 95       	lsr	r18
    3780:	23 70       	andi	r18, 0x03	; 3
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	21 15       	cp	r18, r1
    3786:	31 05       	cpc	r19, r1
    3788:	21 f0       	breq	.+8      	; 0x3792 <process_action+0x1ba>
    378a:	21 30       	cpi	r18, 0x01	; 1
    378c:	31 05       	cpc	r19, r1
    378e:	c9 f0       	breq	.+50     	; 0x37c2 <process_action+0x1ea>
    3790:	33 c2       	rjmp	.+1126   	; 0x3bf8 <process_action+0x620>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    3792:	ff 20       	and	r15, r15
    3794:	21 f0       	breq	.+8      	; 0x379e <process_action+0x1c6>
                        host_system_send(action.usage.code);
    3796:	86 2f       	mov	r24, r22
    3798:	94 2f       	mov	r25, r20
    379a:	93 70       	andi	r25, 0x03	; 3
    379c:	02 c0       	rjmp	.+4      	; 0x37a2 <process_action+0x1ca>
                    } else {
                        host_system_send(0);
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    37a2:	28 96       	adiw	r28, 0x08	; 8
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	ff 90       	pop	r15
    37b8:	ef 90       	pop	r14
    37ba:	df 90       	pop	r13
    37bc:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    37be:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    37c2:	ff 20       	and	r15, r15
    37c4:	21 f0       	breq	.+8      	; 0x37ce <process_action+0x1f6>
                        host_consumer_send(action.usage.code);
    37c6:	86 2f       	mov	r24, r22
    37c8:	94 2f       	mov	r25, r20
    37ca:	93 70       	andi	r25, 0x03	; 3
    37cc:	02 c0       	rjmp	.+4      	; 0x37d2 <process_action+0x1fa>
                    } else {
                        host_consumer_send(0);
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    37d2:	28 96       	adiw	r28, 0x08	; 8
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	f8 94       	cli
    37d8:	de bf       	out	0x3e, r29	; 62
    37da:	0f be       	out	0x3f, r0	; 63
    37dc:	cd bf       	out	0x3d, r28	; 61
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	1f 91       	pop	r17
    37e4:	0f 91       	pop	r16
    37e6:	ff 90       	pop	r15
    37e8:	ef 90       	pop	r14
    37ea:	df 90       	pop	r13
    37ec:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    37ee:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    37f2:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    37f4:	ff 20       	and	r15, r15
    37f6:	19 f0       	breq	.+6      	; 0x37fe <process_action+0x226>
                mousekey_on(action.key.code);
    37f8:	0e 94 ed 26 	call	0x4dda	; 0x4dda <mousekey_on>
    37fc:	02 c0       	rjmp	.+4      	; 0x3802 <process_action+0x22a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    37fe:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    3802:	28 96       	adiw	r28, 0x08	; 8
    3804:	0f b6       	in	r0, 0x3f	; 63
    3806:	f8 94       	cli
    3808:	de bf       	out	0x3e, r29	; 62
    380a:	0f be       	out	0x3f, r0	; 63
    380c:	cd bf       	out	0x3d, r28	; 61
    380e:	df 91       	pop	r29
    3810:	cf 91       	pop	r28
    3812:	1f 91       	pop	r17
    3814:	0f 91       	pop	r16
    3816:	ff 90       	pop	r15
    3818:	ef 90       	pop	r14
    381a:	df 90       	pop	r13
    381c:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    381e:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    3822:	84 2f       	mov	r24, r20
    3824:	83 70       	andi	r24, 0x03	; 3
    3826:	09 f0       	breq	.+2      	; 0x382a <process_action+0x252>
    3828:	76 c0       	rjmp	.+236    	; 0x3916 <process_action+0x33e>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    382a:	f1 10       	cpse	r15, r1
    382c:	e5 c1       	rjmp	.+970    	; 0x3bf8 <process_action+0x620>
                    uint8_t shift = action.layer_bitop.part*4;
    382e:	26 2f       	mov	r18, r22
    3830:	22 95       	swap	r18
    3832:	26 95       	lsr	r18
    3834:	27 70       	andi	r18, 0x07	; 7
    3836:	22 0f       	add	r18, r18
    3838:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    383a:	86 2f       	mov	r24, r22
    383c:	8f 70       	andi	r24, 0x0F	; 15
    383e:	c8 2e       	mov	r12, r24
    3840:	d1 2c       	mov	r13, r1
    3842:	e1 2c       	mov	r14, r1
    3844:	f1 2c       	mov	r15, r1
    3846:	02 2e       	mov	r0, r18
    3848:	04 c0       	rjmp	.+8      	; 0x3852 <process_action+0x27a>
    384a:	cc 0c       	add	r12, r12
    384c:	dd 1c       	adc	r13, r13
    384e:	ee 1c       	adc	r14, r14
    3850:	ff 1c       	adc	r15, r15
    3852:	0a 94       	dec	r0
    3854:	d2 f7       	brpl	.-12     	; 0x384a <process_action+0x272>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    3856:	64 ff       	sbrs	r22, 4
    3858:	10 c0       	rjmp	.+32     	; 0x387a <process_action+0x2a2>
    385a:	6f e0       	ldi	r22, 0x0F	; 15
    385c:	70 e0       	ldi	r23, 0x00	; 0
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	04 c0       	rjmp	.+8      	; 0x386c <process_action+0x294>
    3864:	66 0f       	add	r22, r22
    3866:	77 1f       	adc	r23, r23
    3868:	88 1f       	adc	r24, r24
    386a:	99 1f       	adc	r25, r25
    386c:	2a 95       	dec	r18
    386e:	d2 f7       	brpl	.-12     	; 0x3864 <process_action+0x28c>
    3870:	60 95       	com	r22
    3872:	70 95       	com	r23
    3874:	80 95       	com	r24
    3876:	90 95       	com	r25
    3878:	03 c0       	rjmp	.+6      	; 0x3880 <process_action+0x2a8>
    387a:	60 e0       	ldi	r22, 0x00	; 0
    387c:	70 e0       	ldi	r23, 0x00	; 0
    387e:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    3880:	24 2f       	mov	r18, r20
    3882:	26 95       	lsr	r18
    3884:	26 95       	lsr	r18
    3886:	23 70       	andi	r18, 0x03	; 3
    3888:	42 2f       	mov	r20, r18
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	42 30       	cpi	r20, 0x02	; 2
    388e:	51 05       	cpc	r21, r1
    3890:	d1 f0       	breq	.+52     	; 0x38c6 <process_action+0x2ee>
    3892:	43 30       	cpi	r20, 0x03	; 3
    3894:	51 05       	cpc	r21, r1
    3896:	59 f1       	breq	.+86     	; 0x38ee <process_action+0x316>
    3898:	6c 29       	or	r22, r12
    389a:	7d 29       	or	r23, r13
    389c:	8e 29       	or	r24, r14
    389e:	9f 29       	or	r25, r15
    38a0:	41 30       	cpi	r20, 0x01	; 1
    38a2:	51 05       	cpc	r21, r1
    38a4:	41 f1       	breq	.+80     	; 0x38f6 <process_action+0x31e>
            break;
#endif
        default:
            break;
    }
}
    38a6:	28 96       	adiw	r28, 0x08	; 8
    38a8:	0f b6       	in	r0, 0x3f	; 63
    38aa:	f8 94       	cli
    38ac:	de bf       	out	0x3e, r29	; 62
    38ae:	0f be       	out	0x3f, r0	; 63
    38b0:	cd bf       	out	0x3d, r28	; 61
    38b2:	df 91       	pop	r29
    38b4:	cf 91       	pop	r28
    38b6:	1f 91       	pop	r17
    38b8:	0f 91       	pop	r16
    38ba:	ff 90       	pop	r15
    38bc:	ef 90       	pop	r14
    38be:	df 90       	pop	r13
    38c0:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    38c2:	0c 94 72 22 	jmp	0x44e4	; 0x44e4 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    38c6:	6c 29       	or	r22, r12
    38c8:	7d 29       	or	r23, r13
    38ca:	8e 29       	or	r24, r14
    38cc:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    38ce:	28 96       	adiw	r28, 0x08	; 8
    38d0:	0f b6       	in	r0, 0x3f	; 63
    38d2:	f8 94       	cli
    38d4:	de bf       	out	0x3e, r29	; 62
    38d6:	0f be       	out	0x3f, r0	; 63
    38d8:	cd bf       	out	0x3d, r28	; 61
    38da:	df 91       	pop	r29
    38dc:	cf 91       	pop	r28
    38de:	1f 91       	pop	r17
    38e0:	0f 91       	pop	r16
    38e2:	ff 90       	pop	r15
    38e4:	ef 90       	pop	r14
    38e6:	df 90       	pop	r13
    38e8:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    38ea:	0c 94 84 22 	jmp	0x4508	; 0x4508 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    38ee:	0e 94 72 22 	call	0x44e4	; 0x44e4 <default_layer_and>
    38f2:	c7 01       	movw	r24, r14
    38f4:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    38f6:	28 96       	adiw	r28, 0x08	; 8
    38f8:	0f b6       	in	r0, 0x3f	; 63
    38fa:	f8 94       	cli
    38fc:	de bf       	out	0x3e, r29	; 62
    38fe:	0f be       	out	0x3f, r0	; 63
    3900:	cd bf       	out	0x3d, r28	; 61
    3902:	df 91       	pop	r29
    3904:	cf 91       	pop	r28
    3906:	1f 91       	pop	r17
    3908:	0f 91       	pop	r16
    390a:	ff 90       	pop	r15
    390c:	ef 90       	pop	r14
    390e:	df 90       	pop	r13
    3910:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    3912:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    3916:	ff 20       	and	r15, r15
    3918:	19 f0       	breq	.+6      	; 0x3920 <process_action+0x348>
    391a:	84 2f       	mov	r24, r20
    391c:	81 70       	andi	r24, 0x01	; 1
    391e:	01 c0       	rjmp	.+2      	; 0x3922 <process_action+0x34a>
    3920:	86 95       	lsr	r24
    3922:	88 23       	and	r24, r24
    3924:	09 f4       	brne	.+2      	; 0x3928 <process_action+0x350>
    3926:	68 c1       	rjmp	.+720    	; 0x3bf8 <process_action+0x620>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    3928:	26 2f       	mov	r18, r22
    392a:	22 95       	swap	r18
    392c:	26 95       	lsr	r18
    392e:	27 70       	andi	r18, 0x07	; 7
    3930:	22 0f       	add	r18, r18
    3932:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    3934:	86 2f       	mov	r24, r22
    3936:	8f 70       	andi	r24, 0x0F	; 15
    3938:	c8 2e       	mov	r12, r24
    393a:	d1 2c       	mov	r13, r1
    393c:	e1 2c       	mov	r14, r1
    393e:	f1 2c       	mov	r15, r1
    3940:	02 2e       	mov	r0, r18
    3942:	04 c0       	rjmp	.+8      	; 0x394c <process_action+0x374>
    3944:	cc 0c       	add	r12, r12
    3946:	dd 1c       	adc	r13, r13
    3948:	ee 1c       	adc	r14, r14
    394a:	ff 1c       	adc	r15, r15
    394c:	0a 94       	dec	r0
    394e:	d2 f7       	brpl	.-12     	; 0x3944 <process_action+0x36c>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    3950:	64 ff       	sbrs	r22, 4
    3952:	10 c0       	rjmp	.+32     	; 0x3974 <process_action+0x39c>
    3954:	6f e0       	ldi	r22, 0x0F	; 15
    3956:	70 e0       	ldi	r23, 0x00	; 0
    3958:	80 e0       	ldi	r24, 0x00	; 0
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	04 c0       	rjmp	.+8      	; 0x3966 <process_action+0x38e>
    395e:	66 0f       	add	r22, r22
    3960:	77 1f       	adc	r23, r23
    3962:	88 1f       	adc	r24, r24
    3964:	99 1f       	adc	r25, r25
    3966:	2a 95       	dec	r18
    3968:	d2 f7       	brpl	.-12     	; 0x395e <process_action+0x386>
    396a:	60 95       	com	r22
    396c:	70 95       	com	r23
    396e:	80 95       	com	r24
    3970:	90 95       	com	r25
    3972:	03 c0       	rjmp	.+6      	; 0x397a <process_action+0x3a2>
    3974:	60 e0       	ldi	r22, 0x00	; 0
    3976:	70 e0       	ldi	r23, 0x00	; 0
    3978:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    397a:	24 2f       	mov	r18, r20
    397c:	26 95       	lsr	r18
    397e:	26 95       	lsr	r18
    3980:	23 70       	andi	r18, 0x03	; 3
    3982:	42 2f       	mov	r20, r18
    3984:	50 e0       	ldi	r21, 0x00	; 0
    3986:	42 30       	cpi	r20, 0x02	; 2
    3988:	51 05       	cpc	r21, r1
    398a:	d1 f0       	breq	.+52     	; 0x39c0 <process_action+0x3e8>
    398c:	43 30       	cpi	r20, 0x03	; 3
    398e:	51 05       	cpc	r21, r1
    3990:	59 f1       	breq	.+86     	; 0x39e8 <process_action+0x410>
    3992:	6c 29       	or	r22, r12
    3994:	7d 29       	or	r23, r13
    3996:	8e 29       	or	r24, r14
    3998:	9f 29       	or	r25, r15
    399a:	41 30       	cpi	r20, 0x01	; 1
    399c:	51 05       	cpc	r21, r1
    399e:	41 f1       	breq	.+80     	; 0x39f0 <process_action+0x418>
            break;
#endif
        default:
            break;
    }
}
    39a0:	28 96       	adiw	r28, 0x08	; 8
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	df 91       	pop	r29
    39ae:	cf 91       	pop	r28
    39b0:	1f 91       	pop	r17
    39b2:	0f 91       	pop	r16
    39b4:	ff 90       	pop	r15
    39b6:	ef 90       	pop	r14
    39b8:	df 90       	pop	r13
    39ba:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    39bc:	0c 94 11 23 	jmp	0x4622	; 0x4622 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    39c0:	6c 29       	or	r22, r12
    39c2:	7d 29       	or	r23, r13
    39c4:	8e 29       	or	r24, r14
    39c6:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    39c8:	28 96       	adiw	r28, 0x08	; 8
    39ca:	0f b6       	in	r0, 0x3f	; 63
    39cc:	f8 94       	cli
    39ce:	de bf       	out	0x3e, r29	; 62
    39d0:	0f be       	out	0x3f, r0	; 63
    39d2:	cd bf       	out	0x3d, r28	; 61
    39d4:	df 91       	pop	r29
    39d6:	cf 91       	pop	r28
    39d8:	1f 91       	pop	r17
    39da:	0f 91       	pop	r16
    39dc:	ff 90       	pop	r15
    39de:	ef 90       	pop	r14
    39e0:	df 90       	pop	r13
    39e2:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    39e4:	0c 94 23 23 	jmp	0x4646	; 0x4646 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    39e8:	0e 94 11 23 	call	0x4622	; 0x4622 <layer_and>
    39ec:	c7 01       	movw	r24, r14
    39ee:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    39f0:	28 96       	adiw	r28, 0x08	; 8
    39f2:	0f b6       	in	r0, 0x3f	; 63
    39f4:	f8 94       	cli
    39f6:	de bf       	out	0x3e, r29	; 62
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	cd bf       	out	0x3d, r28	; 61
    39fc:	df 91       	pop	r29
    39fe:	cf 91       	pop	r28
    3a00:	1f 91       	pop	r17
    3a02:	0f 91       	pop	r16
    3a04:	ff 90       	pop	r15
    3a06:	ef 90       	pop	r14
    3a08:	df 90       	pop	r13
    3a0a:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    3a0c:	0c 94 ff 22 	jmp	0x45fe	; 0x45fe <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    3a10:	60 3f       	cpi	r22, 0xF0	; 240
    3a12:	d9 f1       	breq	.+118    	; 0x3a8a <process_action+0x4b2>
    3a14:	28 f4       	brcc	.+10     	; 0x3a20 <process_action+0x448>
    3a16:	80 e4       	ldi	r24, 0x40	; 64
    3a18:	86 0f       	add	r24, r22
    3a1a:	80 32       	cpi	r24, 0x20	; 32
    3a1c:	50 f0       	brcs	.+20     	; 0x3a32 <process_action+0x45a>
    3a1e:	9c c0       	rjmp	.+312    	; 0x3b58 <process_action+0x580>
    3a20:	62 3f       	cpi	r22, 0xF2	; 242
    3a22:	09 f4       	brne	.+2      	; 0x3a26 <process_action+0x44e>
    3a24:	61 c0       	rjmp	.+194    	; 0x3ae8 <process_action+0x510>
    3a26:	08 f4       	brcc	.+2      	; 0x3a2a <process_action+0x452>
    3a28:	4b c0       	rjmp	.+150    	; 0x3ac0 <process_action+0x4e8>
    3a2a:	63 3f       	cpi	r22, 0xF3	; 243
    3a2c:	09 f4       	brne	.+2      	; 0x3a30 <process_action+0x458>
    3a2e:	70 c0       	rjmp	.+224    	; 0x3b10 <process_action+0x538>
    3a30:	93 c0       	rjmp	.+294    	; 0x3b58 <process_action+0x580>
    3a32:	16 2f       	mov	r17, r22
    3a34:	10 71       	andi	r17, 0x10	; 16
    3a36:	84 2f       	mov	r24, r20
    3a38:	8f 71       	andi	r24, 0x1F	; 31
                case 0xc0 ... 0xdf:
                    /* layer On/Off with modifiers */
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
    3a3a:	68 87       	std	Y+8, r22	; 0x08
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0xc0 ... 0xdf:
                    /* layer On/Off with modifiers */
                    if (event.pressed) {
    3a3c:	ff 20       	and	r15, r15
    3a3e:	59 f0       	breq	.+22     	; 0x3a56 <process_action+0x47e>
                        layer_on(action.layer_tap.val);
    3a40:	0e 94 aa 22 	call	0x4554	; 0x4554 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    3a44:	68 85       	ldd	r22, Y+8	; 0x08
    3a46:	86 2f       	mov	r24, r22
    3a48:	11 23       	and	r17, r17
    3a4a:	19 f0       	breq	.+6      	; 0x3a52 <process_action+0x47a>
    3a4c:	82 95       	swap	r24
    3a4e:	80 7f       	andi	r24, 0xF0	; 240
    3a50:	75 ce       	rjmp	.-790    	; 0x373c <process_action+0x164>
    3a52:	8f 70       	andi	r24, 0x0F	; 15
    3a54:	73 ce       	rjmp	.-794    	; 0x373c <process_action+0x164>
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
    3a56:	0e 94 c5 22 	call	0x458a	; 0x458a <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    3a5a:	68 85       	ldd	r22, Y+8	; 0x08
    3a5c:	86 2f       	mov	r24, r22
    3a5e:	11 23       	and	r17, r17
    3a60:	19 f0       	breq	.+6      	; 0x3a68 <process_action+0x490>
    3a62:	82 95       	swap	r24
    3a64:	80 7f       	andi	r24, 0xF0	; 240
    3a66:	01 c0       	rjmp	.+2      	; 0x3a6a <process_action+0x492>
    3a68:	8f 70       	andi	r24, 0x0F	; 15
            break;
#endif
        default:
            break;
    }
}
    3a6a:	28 96       	adiw	r28, 0x08	; 8
    3a6c:	0f b6       	in	r0, 0x3f	; 63
    3a6e:	f8 94       	cli
    3a70:	de bf       	out	0x3e, r29	; 62
    3a72:	0f be       	out	0x3f, r0	; 63
    3a74:	cd bf       	out	0x3d, r28	; 61
    3a76:	df 91       	pop	r29
    3a78:	cf 91       	pop	r28
    3a7a:	1f 91       	pop	r17
    3a7c:	0f 91       	pop	r16
    3a7e:	ff 90       	pop	r15
    3a80:	ef 90       	pop	r14
    3a82:	df 90       	pop	r13
    3a84:	cf 90       	pop	r12
                        register_mods((action.layer_tap.code & 0x10) ?
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods((action.layer_tap.code & 0x10) ?
    3a86:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <unregister_mods>
                                (action.layer_tap.code & 0x0f));
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    3a8a:	ff 20       	and	r15, r15
    3a8c:	a9 f0       	breq	.+42     	; 0x3ab8 <process_action+0x4e0>
                        if (tap_count < TAPPING_TOGGLE) {
    3a8e:	25 30       	cpi	r18, 0x05	; 5
    3a90:	08 f0       	brcs	.+2      	; 0x3a94 <process_action+0x4bc>
    3a92:	b2 c0       	rjmp	.+356    	; 0x3bf8 <process_action+0x620>
                            layer_invert(action.layer_tap.val);
    3a94:	84 2f       	mov	r24, r20
    3a96:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    3a98:	28 96       	adiw	r28, 0x08	; 8
    3a9a:	0f b6       	in	r0, 0x3f	; 63
    3a9c:	f8 94       	cli
    3a9e:	de bf       	out	0x3e, r29	; 62
    3aa0:	0f be       	out	0x3f, r0	; 63
    3aa2:	cd bf       	out	0x3d, r28	; 61
    3aa4:	df 91       	pop	r29
    3aa6:	cf 91       	pop	r28
    3aa8:	1f 91       	pop	r17
    3aaa:	0f 91       	pop	r16
    3aac:	ff 90       	pop	r15
    3aae:	ef 90       	pop	r14
    3ab0:	df 90       	pop	r13
    3ab2:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    3ab4:	0c 94 e4 22 	jmp	0x45c8	; 0x45c8 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    3ab8:	26 30       	cpi	r18, 0x06	; 6
    3aba:	08 f0       	brcs	.+2      	; 0x3abe <process_action+0x4e6>
    3abc:	9d c0       	rjmp	.+314    	; 0x3bf8 <process_action+0x620>
    3abe:	ea cf       	rjmp	.-44     	; 0x3a94 <process_action+0x4bc>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    3ac0:	ff 20       	and	r15, r15
    3ac2:	a1 f0       	breq	.+40     	; 0x3aec <process_action+0x514>
    3ac4:	84 2f       	mov	r24, r20
    3ac6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    3ac8:	28 96       	adiw	r28, 0x08	; 8
    3aca:	0f b6       	in	r0, 0x3f	; 63
    3acc:	f8 94       	cli
    3ace:	de bf       	out	0x3e, r29	; 62
    3ad0:	0f be       	out	0x3f, r0	; 63
    3ad2:	cd bf       	out	0x3d, r28	; 61
    3ad4:	df 91       	pop	r29
    3ad6:	cf 91       	pop	r28
    3ad8:	1f 91       	pop	r17
    3ada:	0f 91       	pop	r16
    3adc:	ff 90       	pop	r15
    3ade:	ef 90       	pop	r14
    3ae0:	df 90       	pop	r13
    3ae2:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    3ae4:	0c 94 aa 22 	jmp	0x4554	; 0x4554 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    3ae8:	ff 20       	and	r15, r15
    3aea:	61 f3       	breq	.-40     	; 0x3ac4 <process_action+0x4ec>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    3aec:	84 2f       	mov	r24, r20
    3aee:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    3af0:	28 96       	adiw	r28, 0x08	; 8
    3af2:	0f b6       	in	r0, 0x3f	; 63
    3af4:	f8 94       	cli
    3af6:	de bf       	out	0x3e, r29	; 62
    3af8:	0f be       	out	0x3f, r0	; 63
    3afa:	cd bf       	out	0x3d, r28	; 61
    3afc:	df 91       	pop	r29
    3afe:	cf 91       	pop	r28
    3b00:	1f 91       	pop	r17
    3b02:	0f 91       	pop	r16
    3b04:	ff 90       	pop	r15
    3b06:	ef 90       	pop	r14
    3b08:	df 90       	pop	r13
    3b0a:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    3b0c:	0c 94 c5 22 	jmp	0x458a	; 0x458a <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    3b10:	ff 20       	and	r15, r15
    3b12:	91 f0       	breq	.+36     	; 0x3b38 <process_action+0x560>
    3b14:	84 2f       	mov	r24, r20
    3b16:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    3b18:	28 96       	adiw	r28, 0x08	; 8
    3b1a:	0f b6       	in	r0, 0x3f	; 63
    3b1c:	f8 94       	cli
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	0f be       	out	0x3f, r0	; 63
    3b22:	cd bf       	out	0x3d, r28	; 61
    3b24:	df 91       	pop	r29
    3b26:	cf 91       	pop	r28
    3b28:	1f 91       	pop	r17
    3b2a:	0f 91       	pop	r16
    3b2c:	ff 90       	pop	r15
    3b2e:	ef 90       	pop	r14
    3b30:	df 90       	pop	r13
    3b32:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    3b34:	0c 94 9b 22 	jmp	0x4536	; 0x4536 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    3b38:	28 96       	adiw	r28, 0x08	; 8
    3b3a:	0f b6       	in	r0, 0x3f	; 63
    3b3c:	f8 94       	cli
    3b3e:	de bf       	out	0x3e, r29	; 62
    3b40:	0f be       	out	0x3f, r0	; 63
    3b42:	cd bf       	out	0x3d, r28	; 61
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	ff 90       	pop	r15
    3b4e:	ef 90       	pop	r14
    3b50:	df 90       	pop	r13
    3b52:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    3b54:	0c 94 96 22 	jmp	0x452c	; 0x452c <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    3b58:	ff 20       	and	r15, r15
    3b5a:	a1 f0       	breq	.+40     	; 0x3b84 <process_action+0x5ac>
                        if (tap_count > 0) {
    3b5c:	22 23       	and	r18, r18
    3b5e:	09 f4       	brne	.+2      	; 0x3b62 <process_action+0x58a>
    3b60:	b1 cf       	rjmp	.-158    	; 0x3ac4 <process_action+0x4ec>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    3b62:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    3b64:	28 96       	adiw	r28, 0x08	; 8
    3b66:	0f b6       	in	r0, 0x3f	; 63
    3b68:	f8 94       	cli
    3b6a:	de bf       	out	0x3e, r29	; 62
    3b6c:	0f be       	out	0x3f, r0	; 63
    3b6e:	cd bf       	out	0x3d, r28	; 61
    3b70:	df 91       	pop	r29
    3b72:	cf 91       	pop	r28
    3b74:	1f 91       	pop	r17
    3b76:	0f 91       	pop	r16
    3b78:	ff 90       	pop	r15
    3b7a:	ef 90       	pop	r14
    3b7c:	df 90       	pop	r13
    3b7e:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    3b80:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    3b84:	22 23       	and	r18, r18
    3b86:	09 f4       	brne	.+2      	; 0x3b8a <process_action+0x5b2>
    3b88:	b1 cf       	rjmp	.-158    	; 0x3aec <process_action+0x514>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    3b8a:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    3b8c:	28 96       	adiw	r28, 0x08	; 8
    3b8e:	0f b6       	in	r0, 0x3f	; 63
    3b90:	f8 94       	cli
    3b92:	de bf       	out	0x3e, r29	; 62
    3b94:	0f be       	out	0x3f, r0	; 63
    3b96:	cd bf       	out	0x3d, r28	; 61
    3b98:	df 91       	pop	r29
    3b9a:	cf 91       	pop	r28
    3b9c:	1f 91       	pop	r17
    3b9e:	0f 91       	pop	r16
    3ba0:	ff 90       	pop	r15
    3ba2:	ef 90       	pop	r14
    3ba4:	df 90       	pop	r13
    3ba6:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    3ba8:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    3bac:	4f 70       	andi	r20, 0x0F	; 15
    3bae:	c8 01       	movw	r24, r16
    3bb0:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    3bb4:	28 96       	adiw	r28, 0x08	; 8
    3bb6:	0f b6       	in	r0, 0x3f	; 63
    3bb8:	f8 94       	cli
    3bba:	de bf       	out	0x3e, r29	; 62
    3bbc:	0f be       	out	0x3f, r0	; 63
    3bbe:	cd bf       	out	0x3d, r28	; 61
    3bc0:	df 91       	pop	r29
    3bc2:	cf 91       	pop	r28
    3bc4:	1f 91       	pop	r17
    3bc6:	0f 91       	pop	r16
    3bc8:	ff 90       	pop	r15
    3bca:	ef 90       	pop	r14
    3bcc:	df 90       	pop	r13
    3bce:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    3bd0:	0c 94 a8 21 	jmp	0x4350	; 0x4350 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    3bd4:	4f 70       	andi	r20, 0x0F	; 15
    3bd6:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    3bd8:	28 96       	adiw	r28, 0x08	; 8
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	f8 94       	cli
    3bde:	de bf       	out	0x3e, r29	; 62
    3be0:	0f be       	out	0x3f, r0	; 63
    3be2:	cd bf       	out	0x3d, r28	; 61
    3be4:	df 91       	pop	r29
    3be6:	cf 91       	pop	r28
    3be8:	1f 91       	pop	r17
    3bea:	0f 91       	pop	r16
    3bec:	ff 90       	pop	r15
    3bee:	ef 90       	pop	r14
    3bf0:	df 90       	pop	r13
    3bf2:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    3bf4:	0c 94 b0 25 	jmp	0x4b60	; 0x4b60 <action_function>
            break;
#endif
        default:
            break;
    }
}
    3bf8:	28 96       	adiw	r28, 0x08	; 8
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	f8 94       	cli
    3bfe:	de bf       	out	0x3e, r29	; 62
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	cd bf       	out	0x3d, r28	; 61
    3c04:	df 91       	pop	r29
    3c06:	cf 91       	pop	r28
    3c08:	1f 91       	pop	r17
    3c0a:	0f 91       	pop	r16
    3c0c:	ff 90       	pop	r15
    3c0e:	ef 90       	pop	r14
    3c10:	df 90       	pop	r13
    3c12:	cf 90       	pop	r12
    3c14:	08 95       	ret

00003c16 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    3c16:	0e 94 dd 23 	call	0x47ba	; 0x47ba <clear_weak_mods>
    clear_keys();
    3c1a:	0e 94 ac 23 	call	0x4758	; 0x4758 <clear_keys>
    send_keyboard_report();
    3c1e:	0e 94 03 24 	call	0x4806	; 0x4806 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    3c22:	0e 94 08 29 	call	0x5210	; 0x5210 <mousekey_clear>
    mousekey_send();
    3c26:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	0e 94 76 18 	call	0x30ec	; 0x30ec <host_system_send>
    host_consumer_send(0);
    3c32:	80 e0       	ldi	r24, 0x00	; 0
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <host_consumer_send>

00003c3a <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    3c3a:	0e 94 cd 23 	call	0x479a	; 0x479a <clear_mods>
    clear_keyboard_but_mods();
    3c3e:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <clear_keyboard_but_mods>

00003c42 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    3c42:	0e 94 36 23 	call	0x466c	; 0x466c <layer_switch_get_action>

    switch (action.kind.id) {
    3c46:	29 2f       	mov	r18, r25
    3c48:	22 95       	swap	r18
    3c4a:	2f 70       	andi	r18, 0x0F	; 15
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	2c 30       	cpi	r18, 0x0C	; 12
    3c50:	31 05       	cpc	r19, r1
    3c52:	4c f4       	brge	.+18     	; 0x3c66 <is_tap_key+0x24>
    3c54:	2a 30       	cpi	r18, 0x0A	; 10
    3c56:	31 05       	cpc	r19, r1
    3c58:	c4 f4       	brge	.+48     	; 0x3c8a <is_tap_key+0x48>
    3c5a:	22 50       	subi	r18, 0x02	; 2
    3c5c:	31 09       	sbc	r19, r1
    3c5e:	22 30       	cpi	r18, 0x02	; 2
    3c60:	31 05       	cpc	r19, r1
    3c62:	40 f0       	brcs	.+16     	; 0x3c74 <is_tap_key+0x32>
    3c64:	21 c0       	rjmp	.+66     	; 0x3ca8 <is_tap_key+0x66>
    3c66:	2c 30       	cpi	r18, 0x0C	; 12
    3c68:	31 05       	cpc	r19, r1
    3c6a:	d1 f0       	breq	.+52     	; 0x3ca0 <is_tap_key+0x5e>
    3c6c:	2f 30       	cpi	r18, 0x0F	; 15
    3c6e:	31 05       	cpc	r19, r1
    3c70:	b9 f0       	breq	.+46     	; 0x3ca0 <is_tap_key+0x5e>
    3c72:	1a c0       	rjmp	.+52     	; 0x3ca8 <is_tap_key+0x66>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            switch (action.key.code) {
    3c74:	85 3a       	cpi	r24, 0xA5	; 165
    3c76:	28 f4       	brcc	.+10     	; 0x3c82 <is_tap_key+0x40>
    3c78:	84 30       	cpi	r24, 0x04	; 4
    3c7a:	c0 f4       	brcc	.+48     	; 0x3cac <is_tap_key+0x6a>
    3c7c:	82 30       	cpi	r24, 0x02	; 2
    3c7e:	28 f4       	brcc	.+10     	; 0x3c8a <is_tap_key+0x48>
    3c80:	15 c0       	rjmp	.+42     	; 0x3cac <is_tap_key+0x6a>
    3c82:	90 e2       	ldi	r25, 0x20	; 32
    3c84:	98 0f       	add	r25, r24
    3c86:	98 30       	cpi	r25, 0x08	; 8
    3c88:	88 f0       	brcs	.+34     	; 0x3cac <is_tap_key+0x6a>
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    3c8a:	88 3e       	cpi	r24, 0xE8	; 232
    3c8c:	30 f4       	brcc	.+12     	; 0x3c9a <is_tap_key+0x58>
    3c8e:	80 3e       	cpi	r24, 0xE0	; 224
    3c90:	68 f4       	brcc	.+26     	; 0x3cac <is_tap_key+0x6a>
    3c92:	84 50       	subi	r24, 0x04	; 4
    3c94:	81 3a       	cpi	r24, 0xA1	; 161
    3c96:	40 f4       	brcc	.+16     	; 0x3ca8 <is_tap_key+0x66>
    3c98:	09 c0       	rjmp	.+18     	; 0x3cac <is_tap_key+0x6a>
    3c9a:	80 3f       	cpi	r24, 0xF0	; 240
    3c9c:	29 f4       	brne	.+10     	; 0x3ca8 <is_tap_key+0x66>
    3c9e:	06 c0       	rjmp	.+12     	; 0x3cac <is_tap_key+0x6a>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    3ca0:	93 fb       	bst	r25, 3
    3ca2:	88 27       	eor	r24, r24
    3ca4:	80 f9       	bld	r24, 0
    3ca6:	08 95       	ret
            return false;
    }
    return false;
    3ca8:	80 e0       	ldi	r24, 0x00	; 0
    3caa:	08 95       	ret
                case 0xc0 ... 0xdf:         // with modifiers
                    return false;
                case KC_A ... KC_EXSEL:     // tap key
                case KC_LCTRL ... KC_RGUI:  // tap key
                case OP_TAP_TOGGLE:
                    return true;
    3cac:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    3cae:	08 95       	ret

00003cb0 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	00 d0       	rcall	.+0      	; 0x3cb6 <debug_event+0x6>
    3cb6:	00 d0       	rcall	.+0      	; 0x3cb8 <debug_event+0x8>
    3cb8:	1f 92       	push	r1
    3cba:	cd b7       	in	r28, 0x3d	; 61
    3cbc:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	df 91       	pop	r29
    3cca:	cf 91       	pop	r28
    3ccc:	08 95       	ret

00003cce <debug_record>:

void debug_record(keyrecord_t record)
{
    3cce:	cf 93       	push	r28
    3cd0:	df 93       	push	r29
    3cd2:	00 d0       	rcall	.+0      	; 0x3cd4 <debug_record+0x6>
    3cd4:	00 d0       	rcall	.+0      	; 0x3cd6 <debug_record+0x8>
    3cd6:	00 d0       	rcall	.+0      	; 0x3cd8 <debug_record+0xa>
    3cd8:	cd b7       	in	r28, 0x3d	; 61
    3cda:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    3cdc:	26 96       	adiw	r28, 0x06	; 6
    3cde:	0f b6       	in	r0, 0x3f	; 63
    3ce0:	f8 94       	cli
    3ce2:	de bf       	out	0x3e, r29	; 62
    3ce4:	0f be       	out	0x3f, r0	; 63
    3ce6:	cd bf       	out	0x3d, r28	; 61
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	08 95       	ret

00003cee <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    3cee:	1f 93       	push	r17
    3cf0:	cf 93       	push	r28
    3cf2:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3cf4:	c0 91 f4 02 	lds	r28, 0x02F4
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    3cf8:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3cfa:	80 91 f5 02 	lds	r24, 0x02F5
    3cfe:	c8 17       	cp	r28, r24
    3d00:	99 f0       	breq	.+38     	; 0x3d28 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    3d02:	d0 e0       	ldi	r29, 0x00	; 0
    3d04:	1c 9f       	mul	r17, r28
    3d06:	f0 01       	movw	r30, r0
    3d08:	1d 9f       	mul	r17, r29
    3d0a:	f0 0d       	add	r31, r0
    3d0c:	11 24       	eor	r1, r1
    3d0e:	ea 50       	subi	r30, 0x0A	; 10
    3d10:	fd 4f       	sbci	r31, 0xFD	; 253
    3d12:	40 81       	ld	r20, Z
    3d14:	51 81       	ldd	r21, Z+1	; 0x01
    3d16:	62 81       	ldd	r22, Z+2	; 0x02
    3d18:	73 81       	ldd	r23, Z+3	; 0x03
    3d1a:	84 81       	ldd	r24, Z+4	; 0x04
    3d1c:	95 81       	ldd	r25, Z+5	; 0x05
    3d1e:	0e 94 67 1e 	call	0x3cce	; 0x3cce <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3d22:	21 96       	adiw	r28, 0x01	; 1
    3d24:	c7 70       	andi	r28, 0x07	; 7
    3d26:	e9 cf       	rjmp	.-46     	; 0x3cfa <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    3d28:	df 91       	pop	r29
    3d2a:	cf 91       	pop	r28
    3d2c:	1f 91       	pop	r17
    3d2e:	08 95       	ret

00003d30 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    3d30:	40 91 26 03 	lds	r20, 0x0326
    3d34:	50 91 27 03 	lds	r21, 0x0327
    3d38:	60 91 28 03 	lds	r22, 0x0328
    3d3c:	70 91 29 03 	lds	r23, 0x0329
    3d40:	80 91 2a 03 	lds	r24, 0x032A
    3d44:	90 91 2b 03 	lds	r25, 0x032B
    3d48:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <debug_record>

00003d4c <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    3d4c:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    3d4e:	80 91 2b 03 	lds	r24, 0x032B
    3d52:	82 95       	swap	r24
    3d54:	8f 70       	andi	r24, 0x0F	; 15
    3d56:	09 f0       	breq	.+2      	; 0x3d5a <waiting_buffer_scan_tap+0xe>
    3d58:	5f c0       	rjmp	.+190    	; 0x3e18 <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    3d5a:	80 91 28 03 	lds	r24, 0x0328
    3d5e:	88 23       	and	r24, r24
    3d60:	09 f4       	brne	.+2      	; 0x3d64 <waiting_buffer_scan_tap+0x18>
    3d62:	5a c0       	rjmp	.+180    	; 0x3e18 <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3d64:	20 91 f4 02 	lds	r18, 0x02F4
    3d68:	a0 91 f5 02 	lds	r26, 0x02F5
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3d6c:	60 91 26 03 	lds	r22, 0x0326
    3d70:	70 91 27 03 	lds	r23, 0x0327
    3d74:	80 91 29 03 	lds	r24, 0x0329
    3d78:	90 91 2a 03 	lds	r25, 0x032A
    3d7c:	31 e0       	ldi	r19, 0x01	; 1
    3d7e:	6f 3f       	cpi	r22, 0xFF	; 255
    3d80:	09 f0       	breq	.+2      	; 0x3d84 <waiting_buffer_scan_tap+0x38>
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	b3 2f       	mov	r27, r19
    3d86:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3d88:	2a 17       	cp	r18, r26
    3d8a:	09 f4       	brne	.+2      	; 0x3d8e <waiting_buffer_scan_tap+0x42>
    3d8c:	45 c0       	rjmp	.+138    	; 0x3e18 <waiting_buffer_scan_tap+0xcc>
    3d8e:	00 97       	sbiw	r24, 0x00	; 0
    3d90:	21 f0       	breq	.+8      	; 0x3d9a <waiting_buffer_scan_tap+0x4e>
    3d92:	7f 3f       	cpi	r23, 0xFF	; 255
    3d94:	21 f4       	brne	.+8      	; 0x3d9e <waiting_buffer_scan_tap+0x52>
    3d96:	4b 2f       	mov	r20, r27
    3d98:	03 c0       	rjmp	.+6      	; 0x3da0 <waiting_buffer_scan_tap+0x54>
    3d9a:	41 e0       	ldi	r20, 0x01	; 1
    3d9c:	01 c0       	rjmp	.+2      	; 0x3da0 <waiting_buffer_scan_tap+0x54>
    3d9e:	40 e0       	ldi	r20, 0x00	; 0
    3da0:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3da2:	40 fd       	sbrc	r20, 0
    3da4:	35 c0       	rjmp	.+106    	; 0x3e10 <waiting_buffer_scan_tap+0xc4>
    3da6:	c2 9f       	mul	r28, r18
    3da8:	f0 01       	movw	r30, r0
    3daa:	c3 9f       	mul	r28, r19
    3dac:	f0 0d       	add	r31, r0
    3dae:	11 24       	eor	r1, r1
    3db0:	ea 50       	subi	r30, 0x0A	; 10
    3db2:	fd 4f       	sbci	r31, 0xFD	; 253
    3db4:	41 81       	ldd	r20, Z+1	; 0x01
    3db6:	74 13       	cpse	r23, r20
    3db8:	2b c0       	rjmp	.+86     	; 0x3e10 <waiting_buffer_scan_tap+0xc4>
    3dba:	40 81       	ld	r20, Z
    3dbc:	64 13       	cpse	r22, r20
    3dbe:	28 c0       	rjmp	.+80     	; 0x3e10 <waiting_buffer_scan_tap+0xc4>
    3dc0:	42 81       	ldd	r20, Z+2	; 0x02
    3dc2:	41 11       	cpse	r20, r1
    3dc4:	25 c0       	rjmp	.+74     	; 0x3e10 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    3dc6:	43 81       	ldd	r20, Z+3	; 0x03
    3dc8:	54 81       	ldd	r21, Z+4	; 0x04
    3dca:	48 17       	cp	r20, r24
    3dcc:	59 07       	cpc	r21, r25
    3dce:	10 f4       	brcc	.+4      	; 0x3dd4 <waiting_buffer_scan_tap+0x88>
    3dd0:	41 50       	subi	r20, 0x01	; 1
    3dd2:	51 09       	sbc	r21, r1
    3dd4:	48 1b       	sub	r20, r24
    3dd6:	59 0b       	sbc	r21, r25
    3dd8:	4c 32       	cpi	r20, 0x2C	; 44
    3dda:	51 40       	sbci	r21, 0x01	; 1
    3ddc:	c8 f4       	brcc	.+50     	; 0x3e10 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    3dde:	80 91 2b 03 	lds	r24, 0x032B
    3de2:	8f 70       	andi	r24, 0x0F	; 15
    3de4:	80 61       	ori	r24, 0x10	; 16
    3de6:	80 93 2b 03 	sts	0x032B, r24
            waiting_buffer[i].tap.count = 1;
    3dea:	86 e0       	ldi	r24, 0x06	; 6
    3dec:	82 9f       	mul	r24, r18
    3dee:	f0 01       	movw	r30, r0
    3df0:	83 9f       	mul	r24, r19
    3df2:	f0 0d       	add	r31, r0
    3df4:	11 24       	eor	r1, r1
    3df6:	e5 50       	subi	r30, 0x05	; 5
    3df8:	fd 4f       	sbci	r31, 0xFD	; 253
    3dfa:	80 81       	ld	r24, Z
    3dfc:	8f 70       	andi	r24, 0x0F	; 15
    3dfe:	80 61       	ori	r24, 0x10	; 16
    3e00:	80 83       	st	Z, r24
            process_action(&tapping_key);
    3e02:	86 e2       	ldi	r24, 0x26	; 38
    3e04:	93 e0       	ldi	r25, 0x03	; 3
    3e06:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    3e0a:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    3e0c:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3e10:	2f 5f       	subi	r18, 0xFF	; 255
    3e12:	3f 4f       	sbci	r19, 0xFF	; 255
    3e14:	27 70       	andi	r18, 0x07	; 7
    3e16:	b8 cf       	rjmp	.-144    	; 0x3d88 <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    3e18:	cf 91       	pop	r28
    3e1a:	08 95       	ret

00003e1c <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    3e1c:	cf 92       	push	r12
    3e1e:	df 92       	push	r13
    3e20:	ef 92       	push	r14
    3e22:	ff 92       	push	r15
    3e24:	0f 93       	push	r16
    3e26:	1f 93       	push	r17
    3e28:	cf 93       	push	r28
    3e2a:	df 93       	push	r29
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    3e30:	62 97       	sbiw	r28, 0x12	; 18
    3e32:	0f b6       	in	r0, 0x3f	; 63
    3e34:	f8 94       	cli
    3e36:	de bf       	out	0x3e, r29	; 62
    3e38:	0f be       	out	0x3f, r0	; 63
    3e3a:	cd bf       	out	0x3d, r28	; 61
    3e3c:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    3e3e:	85 e0       	ldi	r24, 0x05	; 5
    3e40:	f8 01       	movw	r30, r16
    3e42:	de 01       	movw	r26, r28
    3e44:	1d 96       	adiw	r26, 0x0d	; 13
    3e46:	01 90       	ld	r0, Z+
    3e48:	0d 92       	st	X+, r0
    3e4a:	8a 95       	dec	r24
    3e4c:	e1 f7       	brne	.-8      	; 0x3e46 <process_tapping+0x2a>
    3e4e:	d8 01       	movw	r26, r16
    3e50:	4c 91       	ld	r20, X
    3e52:	11 96       	adiw	r26, 0x01	; 1
    3e54:	5c 91       	ld	r21, X
    3e56:	11 97       	sbiw	r26, 0x01	; 1
    3e58:	12 96       	adiw	r26, 0x02	; 2
    3e5a:	6c 91       	ld	r22, X
    3e5c:	12 97       	sbiw	r26, 0x02	; 2
    3e5e:	13 96       	adiw	r26, 0x03	; 3
    3e60:	ed 90       	ld	r14, X+
    3e62:	fc 90       	ld	r15, X
    3e64:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    3e66:	70 91 26 03 	lds	r23, 0x0326
    3e6a:	e0 91 27 03 	lds	r30, 0x0327
    3e6e:	20 91 29 03 	lds	r18, 0x0329
    3e72:	30 91 2a 03 	lds	r19, 0x032A
    3e76:	21 15       	cp	r18, r1
    3e78:	31 05       	cpc	r19, r1
    3e7a:	31 f0       	breq	.+12     	; 0x3e88 <process_tapping+0x6c>
    3e7c:	ef 3f       	cpi	r30, 0xFF	; 255
    3e7e:	31 f4       	brne	.+12     	; 0x3e8c <process_tapping+0x70>
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	7f 3f       	cpi	r23, 0xFF	; 255
    3e84:	19 f4       	brne	.+6      	; 0x3e8c <process_tapping+0x70>
    3e86:	03 c0       	rjmp	.+6      	; 0x3e8e <process_tapping+0x72>
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	01 c0       	rjmp	.+2      	; 0x3e8e <process_tapping+0x72>
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	b8 2f       	mov	r27, r24
    3e90:	b1 70       	andi	r27, 0x01	; 1
    3e92:	cb 2e       	mov	r12, r27
    3e94:	80 fd       	sbrc	r24, 0
    3e96:	6d c1       	rjmp	.+730    	; 0x4172 <process_tapping+0x356>
    3e98:	d0 90 28 03 	lds	r13, 0x0328
    3e9c:	dd 20       	and	r13, r13
    3e9e:	09 f4       	brne	.+2      	; 0x3ea2 <process_tapping+0x86>
    3ea0:	f6 c0       	rjmp	.+492    	; 0x408e <process_tapping+0x272>
    3ea2:	f0 91 2b 03 	lds	r31, 0x032B
        if (WITHIN_TAPPING_TERM(event)) {
    3ea6:	e2 16       	cp	r14, r18
    3ea8:	f3 06       	cpc	r15, r19
    3eaa:	38 f0       	brcs	.+14     	; 0x3eba <process_tapping+0x9e>
    3eac:	c7 01       	movw	r24, r14
    3eae:	82 1b       	sub	r24, r18
    3eb0:	93 0b       	sbc	r25, r19
    3eb2:	8c 32       	cpi	r24, 0x2C	; 44
    3eb4:	91 40       	sbci	r25, 0x01	; 1
    3eb6:	48 f0       	brcs	.+18     	; 0x3eca <process_tapping+0xae>
    3eb8:	9c c0       	rjmp	.+312    	; 0x3ff2 <process_tapping+0x1d6>
    3eba:	20 95       	com	r18
    3ebc:	30 95       	com	r19
    3ebe:	2e 0d       	add	r18, r14
    3ec0:	3f 1d       	adc	r19, r15
    3ec2:	2c 32       	cpi	r18, 0x2C	; 44
    3ec4:	31 40       	sbci	r19, 0x01	; 1
    3ec6:	08 f0       	brcs	.+2      	; 0x3eca <process_tapping+0xae>
    3ec8:	94 c0       	rjmp	.+296    	; 0x3ff2 <process_tapping+0x1d6>
            if (tapping_key.tap.count == 0) {
    3eca:	8f 2f       	mov	r24, r31
    3ecc:	80 7f       	andi	r24, 0xF0	; 240
    3ece:	09 f0       	breq	.+2      	; 0x3ed2 <process_tapping+0xb6>
    3ed0:	53 c0       	rjmp	.+166    	; 0x3f78 <process_tapping+0x15c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3ed2:	e5 13       	cpse	r30, r21
    3ed4:	15 c0       	rjmp	.+42     	; 0x3f00 <process_tapping+0xe4>
    3ed6:	74 13       	cpse	r23, r20
    3ed8:	13 c0       	rjmp	.+38     	; 0x3f00 <process_tapping+0xe4>
    3eda:	d6 2e       	mov	r13, r22
    3edc:	61 11       	cpse	r22, r1
    3ede:	10 c0       	rjmp	.+32     	; 0x3f00 <process_tapping+0xe4>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    3ee0:	ff 70       	andi	r31, 0x0F	; 15
    3ee2:	f0 61       	ori	r31, 0x10	; 16
    3ee4:	f0 93 2b 03 	sts	0x032B, r31
                    debug_tapping_key();
    3ee8:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <debug_tapping_key>
                    process_action(&tapping_key);
    3eec:	86 e2       	ldi	r24, 0x26	; 38
    3eee:	93 e0       	ldi	r25, 0x03	; 3
    3ef0:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    3ef4:	80 91 2b 03 	lds	r24, 0x032B
    3ef8:	d8 01       	movw	r26, r16
    3efa:	15 96       	adiw	r26, 0x05	; 5
    3efc:	8c 93       	st	X, r24
                    // enqueue
                    return false;
    3efe:	6b c1       	rjmp	.+726    	; 0x41d6 <process_tapping+0x3ba>
    3f00:	ef 28       	or	r14, r15
    3f02:	31 f0       	breq	.+12     	; 0x3f10 <process_tapping+0xf4>
    3f04:	5f 3f       	cpi	r21, 0xFF	; 255
    3f06:	31 f4       	brne	.+12     	; 0x3f14 <process_tapping+0xf8>
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	4f 3f       	cpi	r20, 0xFF	; 255
    3f0c:	19 f4       	brne	.+6      	; 0x3f14 <process_tapping+0xf8>
    3f0e:	03 c0       	rjmp	.+6      	; 0x3f16 <process_tapping+0xfa>
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	01 c0       	rjmp	.+2      	; 0x3f16 <process_tapping+0xfa>
    3f14:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    3f16:	80 fd       	sbrc	r24, 0
    3f18:	03 c0       	rjmp	.+6      	; 0x3f20 <process_tapping+0x104>
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	86 27       	eor	r24, r22
    3f1e:	01 c0       	rjmp	.+2      	; 0x3f22 <process_tapping+0x106>
    3f20:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3f22:	b8 2f       	mov	r27, r24
    3f24:	b1 70       	andi	r27, 0x01	; 1
    3f26:	fb 2e       	mov	r15, r27
    3f28:	80 ff       	sbrs	r24, 0
    3f2a:	1c c0       	rjmp	.+56     	; 0x3f64 <process_tapping+0x148>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3f2c:	80 91 f4 02 	lds	r24, 0x02F4
    3f30:	20 91 f5 02 	lds	r18, 0x02F5
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3f34:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3f36:	82 17       	cp	r24, r18
    3f38:	09 f4       	brne	.+2      	; 0x3f3c <process_tapping+0x120>
    3f3a:	28 c1       	rjmp	.+592    	; 0x418c <process_tapping+0x370>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	38 9f       	mul	r19, r24
    3f40:	f0 01       	movw	r30, r0
    3f42:	39 9f       	mul	r19, r25
    3f44:	f0 0d       	add	r31, r0
    3f46:	11 24       	eor	r1, r1
    3f48:	ea 50       	subi	r30, 0x0A	; 10
    3f4a:	fd 4f       	sbci	r31, 0xFD	; 253
    3f4c:	71 81       	ldd	r23, Z+1	; 0x01
    3f4e:	57 13       	cpse	r21, r23
    3f50:	06 c0       	rjmp	.+12     	; 0x3f5e <process_tapping+0x142>
    3f52:	70 81       	ld	r23, Z
    3f54:	47 13       	cpse	r20, r23
    3f56:	03 c0       	rjmp	.+6      	; 0x3f5e <process_tapping+0x142>
    3f58:	72 81       	ldd	r23, Z+2	; 0x02
    3f5a:	67 13       	cpse	r22, r23
    3f5c:	03 c0       	rjmp	.+6      	; 0x3f64 <process_tapping+0x148>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3f5e:	01 96       	adiw	r24, 0x01	; 1
    3f60:	87 70       	andi	r24, 0x07	; 7
    3f62:	e9 cf       	rjmp	.-46     	; 0x3f36 <process_tapping+0x11a>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3f64:	d6 2e       	mov	r13, r22
    3f66:	66 23       	and	r22, r22
    3f68:	09 f4       	brne	.+2      	; 0x3f6c <process_tapping+0x150>
    3f6a:	35 c1       	rjmp	.+618    	; 0x41d6 <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    3f6c:	80 91 2b 03 	lds	r24, 0x032B
    3f70:	81 60       	ori	r24, 0x01	; 1
    3f72:	80 93 2b 03 	sts	0x032B, r24
    3f76:	53 c0       	rjmp	.+166    	; 0x401e <process_tapping+0x202>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3f78:	e5 13       	cpse	r30, r21
    3f7a:	08 c0       	rjmp	.+16     	; 0x3f8c <process_tapping+0x170>
    3f7c:	74 13       	cpse	r23, r20
    3f7e:	06 c0       	rjmp	.+12     	; 0x3f8c <process_tapping+0x170>
    3f80:	61 11       	cpse	r22, r1
    3f82:	04 c0       	rjmp	.+8      	; 0x3f8c <process_tapping+0x170>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3f84:	d8 01       	movw	r26, r16
    3f86:	15 96       	adiw	r26, 0x05	; 5
    3f88:	fc 93       	st	X, r31
    3f8a:	ae c0       	rjmp	.+348    	; 0x40e8 <process_tapping+0x2cc>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3f8c:	4d 87       	std	Y+13, r20	; 0x0d
    3f8e:	5e 87       	std	Y+14, r21	; 0x0e
    3f90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f94:	6a 8b       	std	Y+18, r22	; 0x12
    3f96:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <is_tap_key>
    3f9a:	6a 89       	ldd	r22, Y+18	; 0x12
    3f9c:	88 23       	and	r24, r24
    3f9e:	29 f1       	breq	.+74     	; 0x3fea <process_tapping+0x1ce>
    3fa0:	d6 2e       	mov	r13, r22
    3fa2:	66 23       	and	r22, r22
    3fa4:	11 f1       	breq	.+68     	; 0x3fea <process_tapping+0x1ce>
                    if (tapping_key.tap.count > 1) {
    3fa6:	20 91 2b 03 	lds	r18, 0x032B
    3faa:	82 2f       	mov	r24, r18
    3fac:	82 95       	swap	r24
    3fae:	8f 70       	andi	r24, 0x0F	; 15
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	02 97       	sbiw	r24, 0x02	; 2
    3fb4:	0c f4       	brge	.+2      	; 0x3fb8 <process_tapping+0x19c>
    3fb6:	60 c0       	rjmp	.+192    	; 0x4078 <process_tapping+0x25c>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3fb8:	80 91 26 03 	lds	r24, 0x0326
    3fbc:	90 91 27 03 	lds	r25, 0x0327
    3fc0:	98 87       	std	Y+8, r25	; 0x08
    3fc2:	8f 83       	std	Y+7, r24	; 0x07
    3fc4:	19 86       	std	Y+9, r1	; 0x09
    3fc6:	fb 86       	std	Y+11, r15	; 0x0b
    3fc8:	ea 86       	std	Y+10, r14	; 0x0a
    3fca:	2c 87       	std	Y+12, r18	; 0x0c
    3fcc:	ce 01       	movw	r24, r28
    3fce:	07 96       	adiw	r24, 0x07	; 7
    3fd0:	51 c0       	rjmp	.+162    	; 0x4074 <process_tapping+0x258>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3fd2:	e5 17       	cp	r30, r21
    3fd4:	31 f1       	breq	.+76     	; 0x4022 <process_tapping+0x206>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3fd6:	4d 87       	std	Y+13, r20	; 0x0d
    3fd8:	5e 87       	std	Y+14, r21	; 0x0e
    3fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fde:	6a 8b       	std	Y+18, r22	; 0x12
    3fe0:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <is_tap_key>
    3fe4:	6a 89       	ldd	r22, Y+18	; 0x12
    3fe6:	81 11       	cpse	r24, r1
    3fe8:	2e c0       	rjmp	.+92     	; 0x4046 <process_tapping+0x22a>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    3fea:	c8 01       	movw	r24, r16
    3fec:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <process_action>
    3ff0:	a4 c0       	rjmp	.+328    	; 0x413a <process_tapping+0x31e>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    3ff2:	8f 2f       	mov	r24, r31
    3ff4:	80 7f       	andi	r24, 0xF0	; 240
    3ff6:	69 f7       	brne	.-38     	; 0x3fd2 <process_tapping+0x1b6>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    3ff8:	7e 2d       	mov	r23, r14
    3ffa:	f9 8a       	std	Y+17, r15	; 0x11
    3ffc:	e8 8a       	std	Y+16, r14	; 0x10
    3ffe:	89 89       	ldd	r24, Y+17	; 0x11
    4000:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <debug_event>
                process_action(&tapping_key);
    4004:	86 e2       	ldi	r24, 0x26	; 38
    4006:	93 e0       	ldi	r25, 0x03	; 3
    4008:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <process_action>
                tapping_key = (keyrecord_t){};
    400c:	e6 e2       	ldi	r30, 0x26	; 38
    400e:	f3 e0       	ldi	r31, 0x03	; 3
    4010:	86 e0       	ldi	r24, 0x06	; 6
    4012:	df 01       	movw	r26, r30
    4014:	1d 92       	st	X+, r1
    4016:	8a 95       	dec	r24
    4018:	e9 f7       	brne	.-6      	; 0x4014 <process_tapping+0x1f8>
                debug_tapping_key();
    401a:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <debug_tapping_key>
                return false;
    401e:	d1 2c       	mov	r13, r1
    4020:	da c0       	rjmp	.+436    	; 0x41d6 <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    4022:	74 13       	cpse	r23, r20
    4024:	d8 cf       	rjmp	.-80     	; 0x3fd6 <process_tapping+0x1ba>
    4026:	61 11       	cpse	r22, r1
    4028:	d6 cf       	rjmp	.-84     	; 0x3fd6 <process_tapping+0x1ba>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    402a:	d8 01       	movw	r26, r16
    402c:	15 96       	adiw	r26, 0x05	; 5
    402e:	fc 93       	st	X, r31
                    process_action(keyp);
    4030:	c8 01       	movw	r24, r16
    4032:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <process_action>
                    tapping_key = (keyrecord_t){};
    4036:	e6 e2       	ldi	r30, 0x26	; 38
    4038:	f3 e0       	ldi	r31, 0x03	; 3
    403a:	86 e0       	ldi	r24, 0x06	; 6
    403c:	df 01       	movw	r26, r30
    403e:	1d 92       	st	X+, r1
    4040:	8a 95       	dec	r24
    4042:	e9 f7       	brne	.-6      	; 0x403e <process_tapping+0x222>
                    return true;
    4044:	c8 c0       	rjmp	.+400    	; 0x41d6 <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    4046:	d6 2e       	mov	r13, r22
    4048:	66 23       	and	r22, r22
    404a:	79 f2       	breq	.-98     	; 0x3fea <process_tapping+0x1ce>
                    if (tapping_key.tap.count > 1) {
    404c:	20 91 2b 03 	lds	r18, 0x032B
    4050:	82 2f       	mov	r24, r18
    4052:	82 95       	swap	r24
    4054:	8f 70       	andi	r24, 0x0F	; 15
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	02 97       	sbiw	r24, 0x02	; 2
    405a:	74 f0       	brlt	.+28     	; 0x4078 <process_tapping+0x25c>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    405c:	80 91 26 03 	lds	r24, 0x0326
    4060:	90 91 27 03 	lds	r25, 0x0327
    4064:	9a 83       	std	Y+2, r25	; 0x02
    4066:	89 83       	std	Y+1, r24	; 0x01
    4068:	1b 82       	std	Y+3, r1	; 0x03
    406a:	fd 82       	std	Y+5, r15	; 0x05
    406c:	ec 82       	std	Y+4, r14	; 0x04
    406e:	2e 83       	std	Y+6, r18	; 0x06
    4070:	ce 01       	movw	r24, r28
    4072:	01 96       	adiw	r24, 0x01	; 1
    4074:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    4078:	86 e0       	ldi	r24, 0x06	; 6
    407a:	f8 01       	movw	r30, r16
    407c:	a6 e2       	ldi	r26, 0x26	; 38
    407e:	b3 e0       	ldi	r27, 0x03	; 3
    4080:	01 90       	ld	r0, Z+
    4082:	0d 92       	st	X+, r0
    4084:	8a 95       	dec	r24
    4086:	e1 f7       	brne	.-8      	; 0x4080 <process_tapping+0x264>
                    waiting_buffer_scan_tap();
    4088:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <waiting_buffer_scan_tap>
    408c:	6f c0       	rjmp	.+222    	; 0x416c <process_tapping+0x350>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    408e:	e2 16       	cp	r14, r18
    4090:	f3 06       	cpc	r15, r19
    4092:	40 f0       	brcs	.+16     	; 0x40a4 <process_tapping+0x288>
    4094:	c7 01       	movw	r24, r14
    4096:	82 1b       	sub	r24, r18
    4098:	93 0b       	sbc	r25, r19
    409a:	9c 01       	movw	r18, r24
    409c:	2c 32       	cpi	r18, 0x2C	; 44
    409e:	31 40       	sbci	r19, 0x01	; 1
    40a0:	48 f0       	brcs	.+18     	; 0x40b4 <process_tapping+0x298>
    40a2:	57 c0       	rjmp	.+174    	; 0x4152 <process_tapping+0x336>
    40a4:	20 95       	com	r18
    40a6:	30 95       	com	r19
    40a8:	2e 0d       	add	r18, r14
    40aa:	3f 1d       	adc	r19, r15
    40ac:	2c 32       	cpi	r18, 0x2C	; 44
    40ae:	31 40       	sbci	r19, 0x01	; 1
    40b0:	08 f0       	brcs	.+2      	; 0x40b4 <process_tapping+0x298>
    40b2:	4f c0       	rjmp	.+158    	; 0x4152 <process_tapping+0x336>
            if (event.pressed) {
    40b4:	d6 2e       	mov	r13, r22
    40b6:	66 23       	and	r22, r22
    40b8:	09 f4       	brne	.+2      	; 0x40bc <process_tapping+0x2a0>
    40ba:	97 cf       	rjmp	.-210    	; 0x3fea <process_tapping+0x1ce>
                if (IS_TAPPING_KEY(event.key)) {
    40bc:	e5 13       	cpse	r30, r21
    40be:	29 c0       	rjmp	.+82     	; 0x4112 <process_tapping+0x2f6>
    40c0:	74 13       	cpse	r23, r20
    40c2:	27 c0       	rjmp	.+78     	; 0x4112 <process_tapping+0x2f6>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    40c4:	80 91 2b 03 	lds	r24, 0x032B
    40c8:	80 fd       	sbrc	r24, 0
    40ca:	1a c0       	rjmp	.+52     	; 0x4100 <process_tapping+0x2e4>
    40cc:	98 2f       	mov	r25, r24
    40ce:	92 95       	swap	r25
    40d0:	9f 70       	andi	r25, 0x0F	; 15
    40d2:	b1 f0       	breq	.+44     	; 0x4100 <process_tapping+0x2e4>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    40d4:	f8 01       	movw	r30, r16
    40d6:	85 83       	std	Z+5, r24	; 0x05
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    40d8:	9f 30       	cpi	r25, 0x0F	; 15
    40da:	31 f0       	breq	.+12     	; 0x40e8 <process_tapping+0x2cc>
    40dc:	9f 5f       	subi	r25, 0xFF	; 255
    40de:	92 95       	swap	r25
    40e0:	90 7f       	andi	r25, 0xF0	; 240
    40e2:	8f 70       	andi	r24, 0x0F	; 15
    40e4:	89 2b       	or	r24, r25
    40e6:	85 83       	std	Z+5, r24	; 0x05
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    40e8:	c8 01       	movw	r24, r16
    40ea:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <process_action>
                        tapping_key = *keyp;
    40ee:	86 e0       	ldi	r24, 0x06	; 6
    40f0:	f8 01       	movw	r30, r16
    40f2:	a6 e2       	ldi	r26, 0x26	; 38
    40f4:	b3 e0       	ldi	r27, 0x03	; 3
    40f6:	01 90       	ld	r0, Z+
    40f8:	0d 92       	st	X+, r0
    40fa:	8a 95       	dec	r24
    40fc:	e1 f7       	brne	.-8      	; 0x40f6 <process_tapping+0x2da>
    40fe:	36 c0       	rjmp	.+108    	; 0x416c <process_tapping+0x350>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    4100:	86 e0       	ldi	r24, 0x06	; 6
    4102:	f8 01       	movw	r30, r16
    4104:	a6 e2       	ldi	r26, 0x26	; 38
    4106:	b3 e0       	ldi	r27, 0x03	; 3
    4108:	01 90       	ld	r0, Z+
    410a:	0d 92       	st	X+, r0
    410c:	8a 95       	dec	r24
    410e:	e1 f7       	brne	.-8      	; 0x4108 <process_tapping+0x2ec>
                        return true;
    4110:	62 c0       	rjmp	.+196    	; 0x41d6 <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    4112:	4d 87       	std	Y+13, r20	; 0x0d
    4114:	5e 87       	std	Y+14, r21	; 0x0e
    4116:	8d 85       	ldd	r24, Y+13	; 0x0d
    4118:	9e 85       	ldd	r25, Y+14	; 0x0e
    411a:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <is_tap_key>
    411e:	88 23       	and	r24, r24
    4120:	79 f0       	breq	.+30     	; 0x4140 <process_tapping+0x324>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    4122:	86 e0       	ldi	r24, 0x06	; 6
    4124:	f8 01       	movw	r30, r16
    4126:	a6 e2       	ldi	r26, 0x26	; 38
    4128:	b3 e0       	ldi	r27, 0x03	; 3
    412a:	01 90       	ld	r0, Z+
    412c:	0d 92       	st	X+, r0
    412e:	8a 95       	dec	r24
    4130:	e1 f7       	brne	.-8      	; 0x412a <process_tapping+0x30e>
                    waiting_buffer_scan_tap();
    4132:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <waiting_buffer_scan_tap>
                    debug_tapping_key();
    4136:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <debug_tapping_key>
                    return true;
    413a:	dd 24       	eor	r13, r13
    413c:	d3 94       	inc	r13
    413e:	4b c0       	rjmp	.+150    	; 0x41d6 <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    4140:	80 91 2b 03 	lds	r24, 0x032B
    4144:	81 60       	ori	r24, 0x01	; 1
    4146:	80 93 2b 03 	sts	0x032B, r24
                    process_action(keyp);
    414a:	c8 01       	movw	r24, r16
    414c:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <process_action>
                    return true;
    4150:	42 c0       	rjmp	.+132    	; 0x41d6 <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    4152:	7e 2d       	mov	r23, r14
    4154:	f9 8a       	std	Y+17, r15	; 0x11
    4156:	e8 8a       	std	Y+16, r14	; 0x10
    4158:	89 89       	ldd	r24, Y+17	; 0x11
    415a:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <debug_event>
            tapping_key = (keyrecord_t){};
    415e:	e6 e2       	ldi	r30, 0x26	; 38
    4160:	f3 e0       	ldi	r31, 0x03	; 3
    4162:	86 e0       	ldi	r24, 0x06	; 6
    4164:	df 01       	movw	r26, r30
    4166:	1d 92       	st	X+, r1
    4168:	8a 95       	dec	r24
    416a:	e9 f7       	brne	.-6      	; 0x4166 <process_tapping+0x34a>
            debug_tapping_key();
    416c:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <debug_tapping_key>
            return false;
    4170:	32 c0       	rjmp	.+100    	; 0x41d6 <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    4172:	66 23       	and	r22, r22
    4174:	09 f4       	brne	.+2      	; 0x4178 <process_tapping+0x35c>
    4176:	39 cf       	rjmp	.-398    	; 0x3fea <process_tapping+0x1ce>
    4178:	4d 87       	std	Y+13, r20	; 0x0d
    417a:	5e 87       	std	Y+14, r21	; 0x0e
    417c:	8d 85       	ldd	r24, Y+13	; 0x0d
    417e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4180:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <is_tap_key>
    4184:	88 23       	and	r24, r24
    4186:	09 f4       	brne	.+2      	; 0x418a <process_tapping+0x36e>
    4188:	30 cf       	rjmp	.-416    	; 0x3fea <process_tapping+0x1ce>
    418a:	cb cf       	rjmp	.-106    	; 0x4122 <process_tapping+0x306>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    418c:	4d 87       	std	Y+13, r20	; 0x0d
    418e:	5e 87       	std	Y+14, r21	; 0x0e
    4190:	8d 85       	ldd	r24, Y+13	; 0x0d
    4192:	9e 85       	ldd	r25, Y+14	; 0x0e
    4194:	0e 94 36 23 	call	0x466c	; 0x466c <layer_switch_get_action>
                    switch (action.kind.id) {
    4198:	29 2f       	mov	r18, r25
    419a:	22 95       	swap	r18
    419c:	2f 70       	andi	r18, 0x0F	; 15
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	22 30       	cpi	r18, 0x02	; 2
    41a2:	31 05       	cpc	r19, r1
    41a4:	2c f4       	brge	.+10     	; 0x41b0 <process_tapping+0x394>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    41a6:	9f 70       	andi	r25, 0x0F	; 15
    41a8:	41 f0       	breq	.+16     	; 0x41ba <process_tapping+0x39e>
    41aa:	81 11       	cpse	r24, r1
    41ac:	06 c0       	rjmp	.+12     	; 0x41ba <process_tapping+0x39e>
    41ae:	0c c0       	rjmp	.+24     	; 0x41c8 <process_tapping+0x3ac>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    41b0:	24 30       	cpi	r18, 0x04	; 4
    41b2:	31 05       	cpc	r19, r1
    41b4:	2c f4       	brge	.+10     	; 0x41c0 <process_tapping+0x3a4>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    41b6:	9f 70       	andi	r25, 0x0F	; 15
    41b8:	49 f4       	brne	.+18     	; 0x41cc <process_tapping+0x3b0>
                            if (IS_MOD(action.key.code)) return false;
    41ba:	80 5e       	subi	r24, 0xE0	; 224
    41bc:	88 30       	cpi	r24, 0x08	; 8
    41be:	20 f0       	brcs	.+8      	; 0x41c8 <process_tapping+0x3ac>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    41c0:	c8 01       	movw	r24, r16
    41c2:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <process_action>
                    return true;
    41c6:	cf 2c       	mov	r12, r15
    41c8:	dc 2c       	mov	r13, r12
    41ca:	05 c0       	rjmp	.+10     	; 0x41d6 <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    41cc:	f8 01       	movw	r30, r16
    41ce:	95 81       	ldd	r25, Z+5	; 0x05
    41d0:	90 7f       	andi	r25, 0xF0	; 240
    41d2:	99 f7       	brne	.-26     	; 0x41ba <process_tapping+0x39e>
    41d4:	f9 cf       	rjmp	.-14     	; 0x41c8 <process_tapping+0x3ac>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    41d6:	8d 2d       	mov	r24, r13
    41d8:	62 96       	adiw	r28, 0x12	; 18
    41da:	0f b6       	in	r0, 0x3f	; 63
    41dc:	f8 94       	cli
    41de:	de bf       	out	0x3e, r29	; 62
    41e0:	0f be       	out	0x3f, r0	; 63
    41e2:	cd bf       	out	0x3d, r28	; 61
    41e4:	df 91       	pop	r29
    41e6:	cf 91       	pop	r28
    41e8:	1f 91       	pop	r17
    41ea:	0f 91       	pop	r16
    41ec:	ff 90       	pop	r15
    41ee:	ef 90       	pop	r14
    41f0:	df 90       	pop	r13
    41f2:	cf 90       	pop	r12
    41f4:	08 95       	ret

000041f6 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    41f6:	1f 93       	push	r17
    41f8:	cf 93       	push	r28
    41fa:	df 93       	push	r29
    41fc:	cd b7       	in	r28, 0x3d	; 61
    41fe:	de b7       	in	r29, 0x3e	; 62
    4200:	2c 97       	sbiw	r28, 0x0c	; 12
    4202:	0f b6       	in	r0, 0x3f	; 63
    4204:	f8 94       	cli
    4206:	de bf       	out	0x3e, r29	; 62
    4208:	0f be       	out	0x3f, r0	; 63
    420a:	cd bf       	out	0x3d, r28	; 61
    420c:	4f 83       	std	Y+7, r20	; 0x07
    420e:	58 87       	std	Y+8, r21	; 0x08
    4210:	69 87       	std	Y+9, r22	; 0x09
    4212:	7a 87       	std	Y+10, r23	; 0x0a
    4214:	8b 87       	std	Y+11, r24	; 0x0b
    4216:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    4218:	ce 01       	movw	r24, r28
    421a:	07 96       	adiw	r24, 0x07	; 7
    421c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <process_tapping>
    4220:	88 23       	and	r24, r24
    4222:	c1 f0       	breq	.+48     	; 0x4254 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    4224:	2f 81       	ldd	r18, Y+7	; 0x07
    4226:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    4228:	8a 85       	ldd	r24, Y+10	; 0x0a
    422a:	9b 85       	ldd	r25, Y+11	; 0x0b
    422c:	89 2b       	or	r24, r25
    422e:	31 f0       	breq	.+12     	; 0x423c <action_tapping_process+0x46>
    4230:	3f 3f       	cpi	r19, 0xFF	; 255
    4232:	11 f0       	breq	.+4      	; 0x4238 <action_tapping_process+0x42>
    4234:	80 e0       	ldi	r24, 0x00	; 0
    4236:	03 c0       	rjmp	.+6      	; 0x423e <action_tapping_process+0x48>
    4238:	2f 3f       	cpi	r18, 0xFF	; 255
    423a:	e1 f7       	brne	.-8      	; 0x4234 <action_tapping_process+0x3e>
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	81 11       	cpse	r24, r1
    4240:	47 c0       	rjmp	.+142    	; 0x42d0 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    4242:	4f 81       	ldd	r20, Y+7	; 0x07
    4244:	58 85       	ldd	r21, Y+8	; 0x08
    4246:	69 85       	ldd	r22, Y+9	; 0x09
    4248:	7a 85       	ldd	r23, Y+10	; 0x0a
    424a:	8b 85       	ldd	r24, Y+11	; 0x0b
    424c:	9c 85       	ldd	r25, Y+12	; 0x0c
    424e:	0e 94 67 1e 	call	0x3cce	; 0x3cce <debug_record>
    4252:	3e c0       	rjmp	.+124    	; 0x42d0 <action_tapping_process+0xda>
    4254:	86 e0       	ldi	r24, 0x06	; 6
    4256:	fe 01       	movw	r30, r28
    4258:	37 96       	adiw	r30, 0x07	; 7
    425a:	de 01       	movw	r26, r28
    425c:	11 96       	adiw	r26, 0x01	; 1
    425e:	01 90       	ld	r0, Z+
    4260:	0d 92       	st	X+, r0
    4262:	8a 95       	dec	r24
    4264:	e1 f7       	brne	.-8      	; 0x425e <action_tapping_process+0x68>
    4266:	ff 81       	ldd	r31, Y+7	; 0x07
    4268:	e8 85       	ldd	r30, Y+8	; 0x08
    426a:	4a 85       	ldd	r20, Y+10	; 0x0a
    426c:	5b 85       	ldd	r21, Y+11	; 0x0b
    426e:	41 15       	cp	r20, r1
    4270:	51 05       	cpc	r21, r1
    4272:	31 f0       	breq	.+12     	; 0x4280 <action_tapping_process+0x8a>
    4274:	ef 3f       	cpi	r30, 0xFF	; 255
    4276:	31 f4       	brne	.+12     	; 0x4284 <action_tapping_process+0x8e>
    4278:	81 e0       	ldi	r24, 0x01	; 1
    427a:	ff 3f       	cpi	r31, 0xFF	; 255
    427c:	19 f4       	brne	.+6      	; 0x4284 <action_tapping_process+0x8e>
    427e:	03 c0       	rjmp	.+6      	; 0x4286 <action_tapping_process+0x90>
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	01 c0       	rjmp	.+2      	; 0x4286 <action_tapping_process+0x90>
    4284:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    4286:	80 fd       	sbrc	r24, 0
    4288:	23 c0       	rjmp	.+70     	; 0x42d0 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    428a:	20 91 f5 02 	lds	r18, 0x02F5
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	c9 01       	movw	r24, r18
    4292:	01 96       	adiw	r24, 0x01	; 1
    4294:	87 70       	andi	r24, 0x07	; 7
    4296:	99 27       	eor	r25, r25
    4298:	60 91 f4 02 	lds	r22, 0x02F4
    429c:	70 e0       	ldi	r23, 0x00	; 0
    429e:	86 17       	cp	r24, r22
    42a0:	97 07       	cpc	r25, r23
    42a2:	f1 f1       	breq	.+124    	; 0x4320 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    42a4:	f9 83       	std	Y+1, r31	; 0x01
    42a6:	ea 83       	std	Y+2, r30	; 0x02
    42a8:	5d 83       	std	Y+5, r21	; 0x05
    42aa:	4c 83       	std	Y+4, r20	; 0x04
    42ac:	96 e0       	ldi	r25, 0x06	; 6
    42ae:	92 9f       	mul	r25, r18
    42b0:	d0 01       	movw	r26, r0
    42b2:	93 9f       	mul	r25, r19
    42b4:	b0 0d       	add	r27, r0
    42b6:	11 24       	eor	r1, r1
    42b8:	aa 50       	subi	r26, 0x0A	; 10
    42ba:	bd 4f       	sbci	r27, 0xFD	; 253
    42bc:	fe 01       	movw	r30, r28
    42be:	31 96       	adiw	r30, 0x01	; 1
    42c0:	01 90       	ld	r0, Z+
    42c2:	0d 92       	st	X+, r0
    42c4:	9a 95       	dec	r25
    42c6:	e1 f7       	brne	.-8      	; 0x42c0 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    42c8:	80 93 f5 02 	sts	0x02F5, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    42cc:	0e 94 77 1e 	call	0x3cee	; 0x3cee <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    42d0:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    42d2:	80 91 f4 02 	lds	r24, 0x02F4
    42d6:	90 91 f5 02 	lds	r25, 0x02F5
    42da:	89 17       	cp	r24, r25
    42dc:	79 f1       	breq	.+94     	; 0x433c <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    42de:	18 9f       	mul	r17, r24
    42e0:	c0 01       	movw	r24, r0
    42e2:	11 24       	eor	r1, r1
    42e4:	8a 50       	subi	r24, 0x0A	; 10
    42e6:	9d 4f       	sbci	r25, 0xFD	; 253
    42e8:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <process_tapping>
    42ec:	88 23       	and	r24, r24
    42ee:	31 f1       	breq	.+76     	; 0x433c <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    42f0:	e0 91 f4 02 	lds	r30, 0x02F4
    42f4:	1e 9f       	mul	r17, r30
    42f6:	f0 01       	movw	r30, r0
    42f8:	11 24       	eor	r1, r1
    42fa:	ea 50       	subi	r30, 0x0A	; 10
    42fc:	fd 4f       	sbci	r31, 0xFD	; 253
    42fe:	40 81       	ld	r20, Z
    4300:	51 81       	ldd	r21, Z+1	; 0x01
    4302:	62 81       	ldd	r22, Z+2	; 0x02
    4304:	73 81       	ldd	r23, Z+3	; 0x03
    4306:	84 81       	ldd	r24, Z+4	; 0x04
    4308:	95 81       	ldd	r25, Z+5	; 0x05
    430a:	0e 94 67 1e 	call	0x3cce	; 0x3cce <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    430e:	80 91 f4 02 	lds	r24, 0x02F4
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	01 96       	adiw	r24, 0x01	; 1
    4316:	87 70       	andi	r24, 0x07	; 7
    4318:	99 27       	eor	r25, r25
    431a:	80 93 f4 02 	sts	0x02F4, r24
    431e:	d9 cf       	rjmp	.-78     	; 0x42d2 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    4320:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    4324:	10 92 f5 02 	sts	0x02F5, r1
    waiting_buffer_tail = 0;
    4328:	10 92 f4 02 	sts	0x02F4, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    432c:	e6 e2       	ldi	r30, 0x26	; 38
    432e:	f3 e0       	ldi	r31, 0x03	; 3
    4330:	86 e0       	ldi	r24, 0x06	; 6
    4332:	df 01       	movw	r26, r30
    4334:	1d 92       	st	X+, r1
    4336:	8a 95       	dec	r24
    4338:	e9 f7       	brne	.-6      	; 0x4334 <action_tapping_process+0x13e>
    433a:	ca cf       	rjmp	.-108    	; 0x42d0 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    433c:	2c 96       	adiw	r28, 0x0c	; 12
    433e:	0f b6       	in	r0, 0x3f	; 63
    4340:	f8 94       	cli
    4342:	de bf       	out	0x3e, r29	; 62
    4344:	0f be       	out	0x3f, r0	; 63
    4346:	cd bf       	out	0x3d, r28	; 61
    4348:	df 91       	pop	r29
    434a:	cf 91       	pop	r28
    434c:	1f 91       	pop	r17
    434e:	08 95       	ret

00004350 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    4350:	df 92       	push	r13
    4352:	ef 92       	push	r14
    4354:	ff 92       	push	r15
    4356:	0f 93       	push	r16
    4358:	1f 93       	push	r17
    435a:	cf 93       	push	r28
    435c:	df 93       	push	r29
    435e:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    4360:	00 97       	sbiw	r24, 0x00	; 0
    4362:	09 f4       	brne	.+2      	; 0x4366 <action_macro_play+0x16>
    4364:	8a c0       	rjmp	.+276    	; 0x447a <action_macro_play+0x12a>
    4366:	e1 2c       	mov	r14, r1
    4368:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    436a:	dd 24       	eor	r13, r13
    436c:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    436e:	ef 01       	movw	r28, r30
    4370:	21 96       	adiw	r28, 0x01	; 1
    4372:	84 91       	lpm	r24, Z
    4374:	85 37       	cpi	r24, 0x75	; 117
    4376:	09 f4       	brne	.+2      	; 0x437a <action_macro_play+0x2a>
    4378:	61 c0       	rjmp	.+194    	; 0x443c <action_macro_play+0xec>
    437a:	58 f4       	brcc	.+22     	; 0x4392 <action_macro_play+0x42>
    437c:	84 37       	cpi	r24, 0x74	; 116
    437e:	08 f0       	brcs	.+2      	; 0x4382 <action_macro_play+0x32>
    4380:	4e c0       	rjmp	.+156    	; 0x441e <action_macro_play+0xce>
    4382:	84 30       	cpi	r24, 0x04	; 4
    4384:	08 f0       	brcs	.+2      	; 0x4388 <action_macro_play+0x38>
    4386:	6a c0       	rjmp	.+212    	; 0x445c <action_macro_play+0x10c>
    4388:	81 30       	cpi	r24, 0x01	; 1
    438a:	d1 f0       	breq	.+52     	; 0x43c0 <action_macro_play+0x70>
    438c:	82 30       	cpi	r24, 0x02	; 2
    438e:	71 f1       	breq	.+92     	; 0x43ec <action_macro_play+0x9c>
    4390:	74 c0       	rjmp	.+232    	; 0x447a <action_macro_play+0x12a>
    4392:	88 37       	cpi	r24, 0x78	; 120
    4394:	09 f4       	brne	.+2      	; 0x4398 <action_macro_play+0x48>
    4396:	5d c0       	rjmp	.+186    	; 0x4452 <action_macro_play+0x102>
    4398:	50 f4       	brcc	.+20     	; 0x43ae <action_macro_play+0x5e>
    439a:	86 37       	cpi	r24, 0x76	; 118
    439c:	09 f4       	brne	.+2      	; 0x43a0 <action_macro_play+0x50>
    439e:	55 c0       	rjmp	.+170    	; 0x444a <action_macro_play+0xfa>
    43a0:	87 37       	cpi	r24, 0x77	; 119
    43a2:	09 f0       	breq	.+2      	; 0x43a6 <action_macro_play+0x56>
    43a4:	6a c0       	rjmp	.+212    	; 0x447a <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    43a6:	8e 2d       	mov	r24, r14
    43a8:	0e 94 ca 23 	call	0x4794	; 0x4794 <set_mods>
    43ac:	54 c0       	rjmp	.+168    	; 0x4456 <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    43ae:	9c e7       	ldi	r25, 0x7C	; 124
    43b0:	98 0f       	add	r25, r24
    43b2:	90 37       	cpi	r25, 0x70	; 112
    43b4:	08 f0       	brcs	.+2      	; 0x43b8 <action_macro_play+0x68>
    43b6:	61 c0       	rjmp	.+194    	; 0x447a <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    43b8:	8f 77       	andi	r24, 0x7F	; 127
    43ba:	0e 94 b6 1a 	call	0x356c	; 0x356c <unregister_code>
                break;
    43be:	50 c0       	rjmp	.+160    	; 0x4460 <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    43c0:	8f 01       	movw	r16, r30
    43c2:	0e 5f       	subi	r16, 0xFE	; 254
    43c4:	1f 4f       	sbci	r17, 0xFF	; 255
    43c6:	fe 01       	movw	r30, r28
    43c8:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    43ca:	90 e2       	ldi	r25, 0x20	; 32
    43cc:	98 0f       	add	r25, r24
    43ce:	98 30       	cpi	r25, 0x08	; 8
    43d0:	50 f4       	brcc	.+20     	; 0x43e6 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    43d2:	87 70       	andi	r24, 0x07	; 7
    43d4:	fd 2d       	mov	r31, r13
    43d6:	01 c0       	rjmp	.+2      	; 0x43da <action_macro_play+0x8a>
    43d8:	ff 0f       	add	r31, r31
    43da:	8a 95       	dec	r24
    43dc:	ea f7       	brpl	.-6      	; 0x43d8 <action_macro_play+0x88>
    43de:	8f 2f       	mov	r24, r31
    43e0:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <add_weak_mods>
    43e4:	15 c0       	rjmp	.+42     	; 0x4410 <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    43e6:	0e 94 0c 1a 	call	0x3418	; 0x3418 <register_code>
    43ea:	14 c0       	rjmp	.+40     	; 0x4414 <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    43ec:	8f 01       	movw	r16, r30
    43ee:	0e 5f       	subi	r16, 0xFE	; 254
    43f0:	1f 4f       	sbci	r17, 0xFF	; 255
    43f2:	fe 01       	movw	r30, r28
    43f4:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    43f6:	90 e2       	ldi	r25, 0x20	; 32
    43f8:	98 0f       	add	r25, r24
    43fa:	98 30       	cpi	r25, 0x08	; 8
    43fc:	68 f4       	brcc	.+26     	; 0x4418 <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    43fe:	87 70       	andi	r24, 0x07	; 7
    4400:	fd 2d       	mov	r31, r13
    4402:	01 c0       	rjmp	.+2      	; 0x4406 <action_macro_play+0xb6>
    4404:	ff 0f       	add	r31, r31
    4406:	8a 95       	dec	r24
    4408:	ea f7       	brpl	.-6      	; 0x4404 <action_macro_play+0xb4>
    440a:	8f 2f       	mov	r24, r31
    440c:	0e 94 d6 23 	call	0x47ac	; 0x47ac <del_weak_mods>
                    send_keyboard_report();
    4410:	0e 94 03 24 	call	0x4806	; 0x4806 <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    4414:	e8 01       	movw	r28, r16
    4416:	24 c0       	rjmp	.+72     	; 0x4460 <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    4418:	0e 94 b6 1a 	call	0x356c	; 0x356c <unregister_code>
    441c:	fb cf       	rjmp	.-10     	; 0x4414 <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    441e:	9f 01       	movw	r18, r30
    4420:	2e 5f       	subi	r18, 0xFE	; 254
    4422:	3f 4f       	sbci	r19, 0xFF	; 255
    4424:	fe 01       	movw	r30, r28
    4426:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    4428:	cc 23       	and	r28, r28
    442a:	69 f0       	breq	.+26     	; 0x4446 <action_macro_play+0xf6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    442c:	8f e9       	ldi	r24, 0x9F	; 159
    442e:	9f e0       	ldi	r25, 0x0F	; 15
    4430:	01 97       	sbiw	r24, 0x01	; 1
    4432:	f1 f7       	brne	.-4      	; 0x4430 <action_macro_play+0xe0>
    4434:	00 c0       	rjmp	.+0      	; 0x4436 <action_macro_play+0xe6>
    4436:	00 00       	nop
    4438:	c1 50       	subi	r28, 0x01	; 1
    443a:	f6 cf       	rjmp	.-20     	; 0x4428 <action_macro_play+0xd8>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    443c:	9f 01       	movw	r18, r30
    443e:	2e 5f       	subi	r18, 0xFE	; 254
    4440:	3f 4f       	sbci	r19, 0xFF	; 255
    4442:	fe 01       	movw	r30, r28
    4444:	f4 90       	lpm	r15, Z
    4446:	e9 01       	movw	r28, r18
                dprintf("INTERVAL(%u)\n", interval);
                break;
    4448:	0b c0       	rjmp	.+22     	; 0x4460 <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    444a:	0e 94 ba 23 	call	0x4774	; 0x4774 <get_mods>
    444e:	e8 2e       	mov	r14, r24
                break;
    4450:	07 c0       	rjmp	.+14     	; 0x4460 <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    4452:	0e 94 cd 23 	call	0x479a	; 0x479a <clear_mods>
                send_keyboard_report();
    4456:	0e 94 03 24 	call	0x4806	; 0x4806 <send_keyboard_report>
                break;
    445a:	02 c0       	rjmp	.+4      	; 0x4460 <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    445c:	0e 94 0c 1a 	call	0x3418	; 0x3418 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    4460:	9f 2d       	mov	r25, r15
    4462:	99 23       	and	r25, r25
    4464:	41 f0       	breq	.+16     	; 0x4476 <action_macro_play+0x126>
    4466:	ef e9       	ldi	r30, 0x9F	; 159
    4468:	ff e0       	ldi	r31, 0x0F	; 15
    446a:	31 97       	sbiw	r30, 0x01	; 1
    446c:	f1 f7       	brne	.-4      	; 0x446a <action_macro_play+0x11a>
    446e:	00 c0       	rjmp	.+0      	; 0x4470 <action_macro_play+0x120>
    4470:	00 00       	nop
    4472:	91 50       	subi	r25, 0x01	; 1
    4474:	f6 cf       	rjmp	.-20     	; 0x4462 <action_macro_play+0x112>
    4476:	fe 01       	movw	r30, r28
    4478:	7a cf       	rjmp	.-268    	; 0x436e <action_macro_play+0x1e>
    }
}
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	1f 91       	pop	r17
    4480:	0f 91       	pop	r16
    4482:	ff 90       	pop	r15
    4484:	ef 90       	pop	r14
    4486:	df 90       	pop	r13
    4488:	08 95       	ret

0000448a <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    448a:	60 93 30 03 	sts	0x0330, r22
    448e:	70 93 31 03 	sts	0x0331, r23
    4492:	80 93 32 03 	sts	0x0332, r24
    4496:	90 93 33 03 	sts	0x0333, r25
    hook_default_layer_change(default_layer_state);
    449a:	0e 94 83 24 	call	0x4906	; 0x4906 <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    449e:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <clear_keyboard_but_mods>

000044a2 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    44a2:	60 93 2c 03 	sts	0x032C, r22
    44a6:	70 93 2d 03 	sts	0x032D, r23
    44aa:	80 93 2e 03 	sts	0x032E, r24
    44ae:	90 93 2f 03 	sts	0x032F, r25
    hook_layer_change(layer_state);
    44b2:	0e 94 84 24 	call	0x4908	; 0x4908 <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    44b6:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <clear_keyboard_but_mods>

000044ba <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    44ba:	08 95       	ret

000044bc <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    44bc:	0c 94 45 22 	jmp	0x448a	; 0x448a <default_layer_state_set>

000044c0 <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    44c0:	0f 93       	push	r16
    44c2:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    44c4:	00 91 30 03 	lds	r16, 0x0330
    44c8:	10 91 31 03 	lds	r17, 0x0331
    44cc:	20 91 32 03 	lds	r18, 0x0332
    44d0:	30 91 33 03 	lds	r19, 0x0333
    44d4:	60 2b       	or	r22, r16
    44d6:	71 2b       	or	r23, r17
    44d8:	82 2b       	or	r24, r18
    44da:	93 2b       	or	r25, r19
}
    44dc:	1f 91       	pop	r17
    44de:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    44e0:	0c 94 45 22 	jmp	0x448a	; 0x448a <default_layer_state_set>

000044e4 <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    44e4:	0f 93       	push	r16
    44e6:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    44e8:	00 91 30 03 	lds	r16, 0x0330
    44ec:	10 91 31 03 	lds	r17, 0x0331
    44f0:	20 91 32 03 	lds	r18, 0x0332
    44f4:	30 91 33 03 	lds	r19, 0x0333
    44f8:	60 23       	and	r22, r16
    44fa:	71 23       	and	r23, r17
    44fc:	82 23       	and	r24, r18
    44fe:	93 23       	and	r25, r19
}
    4500:	1f 91       	pop	r17
    4502:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    4504:	0c 94 45 22 	jmp	0x448a	; 0x448a <default_layer_state_set>

00004508 <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    4508:	0f 93       	push	r16
    450a:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    450c:	00 91 30 03 	lds	r16, 0x0330
    4510:	10 91 31 03 	lds	r17, 0x0331
    4514:	20 91 32 03 	lds	r18, 0x0332
    4518:	30 91 33 03 	lds	r19, 0x0333
    451c:	60 27       	eor	r22, r16
    451e:	71 27       	eor	r23, r17
    4520:	82 27       	eor	r24, r18
    4522:	93 27       	eor	r25, r19
}
    4524:	1f 91       	pop	r17
    4526:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    4528:	0c 94 45 22 	jmp	0x448a	; 0x448a <default_layer_state_set>

0000452c <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    452c:	60 e0       	ldi	r22, 0x00	; 0
    452e:	70 e0       	ldi	r23, 0x00	; 0
    4530:	cb 01       	movw	r24, r22
    4532:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <layer_state_set>

00004536 <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    4536:	41 e0       	ldi	r20, 0x01	; 1
    4538:	50 e0       	ldi	r21, 0x00	; 0
    453a:	60 e0       	ldi	r22, 0x00	; 0
    453c:	70 e0       	ldi	r23, 0x00	; 0
    453e:	04 c0       	rjmp	.+8      	; 0x4548 <layer_move+0x12>
    4540:	44 0f       	add	r20, r20
    4542:	55 1f       	adc	r21, r21
    4544:	66 1f       	adc	r22, r22
    4546:	77 1f       	adc	r23, r23
    4548:	8a 95       	dec	r24
    454a:	d2 f7       	brpl	.-12     	; 0x4540 <layer_move+0xa>
    454c:	cb 01       	movw	r24, r22
    454e:	ba 01       	movw	r22, r20
    4550:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <layer_state_set>

00004554 <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    4554:	41 e0       	ldi	r20, 0x01	; 1
    4556:	50 e0       	ldi	r21, 0x00	; 0
    4558:	60 e0       	ldi	r22, 0x00	; 0
    455a:	70 e0       	ldi	r23, 0x00	; 0
    455c:	04 c0       	rjmp	.+8      	; 0x4566 <layer_on+0x12>
    455e:	44 0f       	add	r20, r20
    4560:	55 1f       	adc	r21, r21
    4562:	66 1f       	adc	r22, r22
    4564:	77 1f       	adc	r23, r23
    4566:	8a 95       	dec	r24
    4568:	d2 f7       	brpl	.-12     	; 0x455e <layer_on+0xa>
    456a:	80 91 2c 03 	lds	r24, 0x032C
    456e:	90 91 2d 03 	lds	r25, 0x032D
    4572:	a0 91 2e 03 	lds	r26, 0x032E
    4576:	b0 91 2f 03 	lds	r27, 0x032F
    457a:	48 2b       	or	r20, r24
    457c:	59 2b       	or	r21, r25
    457e:	6a 2b       	or	r22, r26
    4580:	7b 2b       	or	r23, r27
    4582:	cb 01       	movw	r24, r22
    4584:	ba 01       	movw	r22, r20
    4586:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <layer_state_set>

0000458a <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    458a:	41 e0       	ldi	r20, 0x01	; 1
    458c:	50 e0       	ldi	r21, 0x00	; 0
    458e:	60 e0       	ldi	r22, 0x00	; 0
    4590:	70 e0       	ldi	r23, 0x00	; 0
    4592:	04 c0       	rjmp	.+8      	; 0x459c <layer_off+0x12>
    4594:	44 0f       	add	r20, r20
    4596:	55 1f       	adc	r21, r21
    4598:	66 1f       	adc	r22, r22
    459a:	77 1f       	adc	r23, r23
    459c:	8a 95       	dec	r24
    459e:	d2 f7       	brpl	.-12     	; 0x4594 <layer_off+0xa>
    45a0:	40 95       	com	r20
    45a2:	50 95       	com	r21
    45a4:	60 95       	com	r22
    45a6:	70 95       	com	r23
    45a8:	80 91 2c 03 	lds	r24, 0x032C
    45ac:	90 91 2d 03 	lds	r25, 0x032D
    45b0:	a0 91 2e 03 	lds	r26, 0x032E
    45b4:	b0 91 2f 03 	lds	r27, 0x032F
    45b8:	48 23       	and	r20, r24
    45ba:	59 23       	and	r21, r25
    45bc:	6a 23       	and	r22, r26
    45be:	7b 23       	and	r23, r27
    45c0:	cb 01       	movw	r24, r22
    45c2:	ba 01       	movw	r22, r20
    45c4:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <layer_state_set>

000045c8 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    45c8:	41 e0       	ldi	r20, 0x01	; 1
    45ca:	50 e0       	ldi	r21, 0x00	; 0
    45cc:	60 e0       	ldi	r22, 0x00	; 0
    45ce:	70 e0       	ldi	r23, 0x00	; 0
    45d0:	04 c0       	rjmp	.+8      	; 0x45da <layer_invert+0x12>
    45d2:	44 0f       	add	r20, r20
    45d4:	55 1f       	adc	r21, r21
    45d6:	66 1f       	adc	r22, r22
    45d8:	77 1f       	adc	r23, r23
    45da:	8a 95       	dec	r24
    45dc:	d2 f7       	brpl	.-12     	; 0x45d2 <layer_invert+0xa>
    45de:	80 91 2c 03 	lds	r24, 0x032C
    45e2:	90 91 2d 03 	lds	r25, 0x032D
    45e6:	a0 91 2e 03 	lds	r26, 0x032E
    45ea:	b0 91 2f 03 	lds	r27, 0x032F
    45ee:	48 27       	eor	r20, r24
    45f0:	59 27       	eor	r21, r25
    45f2:	6a 27       	eor	r22, r26
    45f4:	7b 27       	eor	r23, r27
    45f6:	cb 01       	movw	r24, r22
    45f8:	ba 01       	movw	r22, r20
    45fa:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <layer_state_set>

000045fe <layer_or>:
}

void layer_or(uint32_t state)
{
    45fe:	0f 93       	push	r16
    4600:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    4602:	00 91 2c 03 	lds	r16, 0x032C
    4606:	10 91 2d 03 	lds	r17, 0x032D
    460a:	20 91 2e 03 	lds	r18, 0x032E
    460e:	30 91 2f 03 	lds	r19, 0x032F
    4612:	60 2b       	or	r22, r16
    4614:	71 2b       	or	r23, r17
    4616:	82 2b       	or	r24, r18
    4618:	93 2b       	or	r25, r19
}
    461a:	1f 91       	pop	r17
    461c:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    461e:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <layer_state_set>

00004622 <layer_and>:
}
void layer_and(uint32_t state)
{
    4622:	0f 93       	push	r16
    4624:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    4626:	00 91 2c 03 	lds	r16, 0x032C
    462a:	10 91 2d 03 	lds	r17, 0x032D
    462e:	20 91 2e 03 	lds	r18, 0x032E
    4632:	30 91 2f 03 	lds	r19, 0x032F
    4636:	60 23       	and	r22, r16
    4638:	71 23       	and	r23, r17
    463a:	82 23       	and	r24, r18
    463c:	93 23       	and	r25, r19
}
    463e:	1f 91       	pop	r17
    4640:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    4642:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <layer_state_set>

00004646 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    4646:	0f 93       	push	r16
    4648:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    464a:	00 91 2c 03 	lds	r16, 0x032C
    464e:	10 91 2d 03 	lds	r17, 0x032D
    4652:	20 91 2e 03 	lds	r18, 0x032E
    4656:	30 91 2f 03 	lds	r19, 0x032F
    465a:	60 27       	eor	r22, r16
    465c:	71 27       	eor	r23, r17
    465e:	82 27       	eor	r24, r18
    4660:	93 27       	eor	r25, r19
}
    4662:	1f 91       	pop	r17
    4664:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    4666:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <layer_state_set>

0000466a <layer_debug>:
}

void layer_debug(void)
{
    466a:	08 95       	ret

0000466c <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    466c:	cf 92       	push	r12
    466e:	df 92       	push	r13
    4670:	ef 92       	push	r14
    4672:	ff 92       	push	r15
    4674:	0f 93       	push	r16
    4676:	1f 93       	push	r17
    4678:	cf 93       	push	r28
    467a:	df 93       	push	r29
    467c:	ec 01       	movw	r28, r24
    action_t action = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    467e:	c0 90 30 03 	lds	r12, 0x0330
    4682:	d0 90 31 03 	lds	r13, 0x0331
    4686:	e0 90 32 03 	lds	r14, 0x0332
    468a:	f0 90 33 03 	lds	r15, 0x0333
    468e:	80 91 2c 03 	lds	r24, 0x032C
    4692:	90 91 2d 03 	lds	r25, 0x032D
    4696:	a0 91 2e 03 	lds	r26, 0x032E
    469a:	b0 91 2f 03 	lds	r27, 0x032F
    469e:	c8 2a       	or	r12, r24
    46a0:	d9 2a       	or	r13, r25
    46a2:	ea 2a       	or	r14, r26
    46a4:	fb 2a       	or	r15, r27
    46a6:	0f e1       	ldi	r16, 0x1F	; 31
    46a8:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    46aa:	b7 01       	movw	r22, r14
    46ac:	a6 01       	movw	r20, r12
    46ae:	00 2e       	mov	r0, r16
    46b0:	04 c0       	rjmp	.+8      	; 0x46ba <layer_switch_get_action+0x4e>
    46b2:	76 95       	lsr	r23
    46b4:	67 95       	ror	r22
    46b6:	57 95       	ror	r21
    46b8:	47 95       	ror	r20
    46ba:	0a 94       	dec	r0
    46bc:	d2 f7       	brpl	.-12     	; 0x46b2 <layer_switch_get_action+0x46>
    46be:	40 ff       	sbrs	r20, 0
    46c0:	07 c0       	rjmp	.+14     	; 0x46d0 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    46c2:	be 01       	movw	r22, r28
    46c4:	80 2f       	mov	r24, r16
    46c6:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    46ca:	81 30       	cpi	r24, 0x01	; 1
    46cc:	91 05       	cpc	r25, r1
    46ce:	39 f4       	brne	.+14     	; 0x46de <layer_switch_get_action+0x72>
    46d0:	01 50       	subi	r16, 0x01	; 1
    46d2:	11 09       	sbc	r17, r1
    46d4:	50 f7       	brcc	.-44     	; 0x46aa <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    46d6:	be 01       	movw	r22, r28
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    46de:	df 91       	pop	r29
    46e0:	cf 91       	pop	r28
    46e2:	1f 91       	pop	r17
    46e4:	0f 91       	pop	r16
    46e6:	ff 90       	pop	r15
    46e8:	ef 90       	pop	r14
    46ea:	df 90       	pop	r13
    46ec:	cf 90       	pop	r12
    46ee:	08 95       	ret

000046f0 <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    46f0:	40 91 21 01 	lds	r20, 0x0121
    46f4:	50 91 22 01 	lds	r21, 0x0122
    46f8:	20 e0       	ldi	r18, 0x00	; 0
    46fa:	30 e0       	ldi	r19, 0x00	; 0
    keyboard_report->keys[cb_tail] = code;
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    46fc:	9f ef       	ldi	r25, 0xFF	; 255
    46fe:	fa 01       	movw	r30, r20
    4700:	e2 0f       	add	r30, r18
    4702:	f3 1f       	adc	r31, r19
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    4704:	62 81       	ldd	r22, Z+2	; 0x02
    4706:	68 17       	cp	r22, r24
    4708:	99 f0       	breq	.+38     	; 0x4730 <add_key+0x40>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    470a:	9f 3f       	cpi	r25, 0xFF	; 255
    470c:	19 f4       	brne	.+6      	; 0x4714 <add_key+0x24>
    470e:	61 11       	cpse	r22, r1
    4710:	01 c0       	rjmp	.+2      	; 0x4714 <add_key+0x24>
    4712:	92 2f       	mov	r25, r18
    4714:	2f 5f       	subi	r18, 0xFF	; 255
    4716:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    4718:	26 30       	cpi	r18, 0x06	; 6
    471a:	31 05       	cpc	r19, r1
    471c:	81 f7       	brne	.-32     	; 0x46fe <add_key+0xe>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    471e:	9f 3f       	cpi	r25, 0xFF	; 255
    4720:	39 f0       	breq	.+14     	; 0x4730 <add_key+0x40>
            keyboard_report->keys[empty] = code;
    4722:	fa 01       	movw	r30, r20
    4724:	e9 0f       	add	r30, r25
    4726:	f1 1d       	adc	r31, r1
    4728:	97 fd       	sbrc	r25, 7
    472a:	fa 95       	dec	r31
    472c:	82 83       	std	Z+2, r24	; 0x02
    472e:	08 95       	ret
    4730:	08 95       	ret

00004732 <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    4732:	40 91 21 01 	lds	r20, 0x0121
    4736:	50 91 22 01 	lds	r21, 0x0122
    473a:	20 e0       	ldi	r18, 0x00	; 0
    473c:	30 e0       	ldi	r19, 0x00	; 0
    473e:	fa 01       	movw	r30, r20
    4740:	e2 0f       	add	r30, r18
    4742:	f3 1f       	adc	r31, r19
    4744:	92 81       	ldd	r25, Z+2	; 0x02
    4746:	98 13       	cpse	r25, r24
    4748:	01 c0       	rjmp	.+2      	; 0x474c <del_key+0x1a>
            keyboard_report->keys[i] = 0;
    474a:	12 82       	std	Z+2, r1	; 0x02
    474c:	2f 5f       	subi	r18, 0xFF	; 255
    474e:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    4750:	26 30       	cpi	r18, 0x06	; 6
    4752:	31 05       	cpc	r19, r1
    4754:	a1 f7       	brne	.-24     	; 0x473e <del_key+0xc>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    4756:	08 95       	ret

00004758 <clear_keys>:

void clear_keys(void)
{
    4758:	81 e0       	ldi	r24, 0x01	; 1
    475a:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    475c:	e0 91 21 01 	lds	r30, 0x0121
    4760:	f0 91 22 01 	lds	r31, 0x0122
    4764:	e8 0f       	add	r30, r24
    4766:	f9 1f       	adc	r31, r25
    4768:	10 82       	st	Z, r1
    476a:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    476c:	88 30       	cpi	r24, 0x08	; 8
    476e:	91 05       	cpc	r25, r1
    4770:	a9 f7       	brne	.-22     	; 0x475c <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    4772:	08 95       	ret

00004774 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    4774:	80 91 40 03 	lds	r24, 0x0340
    4778:	08 95       	ret

0000477a <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    477a:	90 91 40 03 	lds	r25, 0x0340
    477e:	98 2b       	or	r25, r24
    4780:	90 93 40 03 	sts	0x0340, r25
    4784:	08 95       	ret

00004786 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    4786:	80 95       	com	r24
    4788:	90 91 40 03 	lds	r25, 0x0340
    478c:	98 23       	and	r25, r24
    478e:	90 93 40 03 	sts	0x0340, r25
    4792:	08 95       	ret

00004794 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    4794:	80 93 40 03 	sts	0x0340, r24
    4798:	08 95       	ret

0000479a <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    479a:	10 92 40 03 	sts	0x0340, r1
    479e:	08 95       	ret

000047a0 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    47a0:	90 91 3f 03 	lds	r25, 0x033F
    47a4:	98 2b       	or	r25, r24
    47a6:	90 93 3f 03 	sts	0x033F, r25
    47aa:	08 95       	ret

000047ac <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    47ac:	80 95       	com	r24
    47ae:	90 91 3f 03 	lds	r25, 0x033F
    47b2:	98 23       	and	r25, r24
    47b4:	90 93 3f 03 	sts	0x033F, r25
    47b8:	08 95       	ret

000047ba <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    47ba:	10 92 3f 03 	sts	0x033F, r1
    47be:	08 95       	ret

000047c0 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    47c0:	80 93 36 03 	sts	0x0336, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
    47c4:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <timer_read>
    47c8:	90 93 35 03 	sts	0x0335, r25
    47cc:	80 93 34 03 	sts	0x0334, r24
    47d0:	08 95       	ret

000047d2 <clear_oneshot_mods>:
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    47d2:	10 92 36 03 	sts	0x0336, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
    47d6:	10 92 35 03 	sts	0x0335, r1
    47da:	10 92 34 03 	sts	0x0334, r1
    47de:	08 95       	ret

000047e0 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    47e0:	40 91 21 01 	lds	r20, 0x0121
    47e4:	50 91 22 01 	lds	r21, 0x0122
    47e8:	20 e0       	ldi	r18, 0x00	; 0
    47ea:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    47ec:	80 e0       	ldi	r24, 0x00	; 0
    47ee:	fa 01       	movw	r30, r20
    47f0:	e2 0f       	add	r30, r18
    47f2:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    47f4:	91 81       	ldd	r25, Z+1	; 0x01
    47f6:	91 11       	cpse	r25, r1
            cnt++;
    47f8:	8f 5f       	subi	r24, 0xFF	; 255
    47fa:	2f 5f       	subi	r18, 0xFF	; 255
    47fc:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    47fe:	27 30       	cpi	r18, 0x07	; 7
    4800:	31 05       	cpc	r19, r1
    4802:	a9 f7       	brne	.-22     	; 0x47ee <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    4804:	08 95       	ret

00004806 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    4806:	e0 91 21 01 	lds	r30, 0x0121
    480a:	f0 91 22 01 	lds	r31, 0x0122
    480e:	80 91 40 03 	lds	r24, 0x0340
    4812:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    4814:	e0 91 21 01 	lds	r30, 0x0121
    4818:	f0 91 22 01 	lds	r31, 0x0122
    481c:	80 81       	ld	r24, Z
    481e:	90 91 3f 03 	lds	r25, 0x033F
    4822:	89 2b       	or	r24, r25
    4824:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    4826:	80 91 36 03 	lds	r24, 0x0336
    482a:	88 23       	and	r24, r24
    482c:	09 f4       	brne	.+2      	; 0x4830 <send_keyboard_report+0x2a>
    482e:	3e c0       	rjmp	.+124    	; 0x48ac <send_keyboard_report+0xa6>
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
    4830:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <timer_read>
    4834:	20 91 34 03 	lds	r18, 0x0334
    4838:	30 91 35 03 	lds	r19, 0x0335
    483c:	82 17       	cp	r24, r18
    483e:	93 07       	cpc	r25, r19
    4840:	60 f0       	brcs	.+24     	; 0x485a <send_keyboard_report+0x54>
    4842:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <timer_read>
    4846:	20 91 34 03 	lds	r18, 0x0334
    484a:	30 91 35 03 	lds	r19, 0x0335
    484e:	82 1b       	sub	r24, r18
    4850:	93 0b       	sbc	r25, r19
    4852:	8c 32       	cpi	r24, 0x2C	; 44
    4854:	91 40       	sbci	r25, 0x01	; 1
    4856:	70 f4       	brcc	.+28     	; 0x4874 <send_keyboard_report+0x6e>
    4858:	1b c0       	rjmp	.+54     	; 0x4890 <send_keyboard_report+0x8a>
    485a:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <timer_read>
    485e:	20 91 34 03 	lds	r18, 0x0334
    4862:	30 91 35 03 	lds	r19, 0x0335
    4866:	20 95       	com	r18
    4868:	30 95       	com	r19
    486a:	28 0f       	add	r18, r24
    486c:	39 1f       	adc	r19, r25
    486e:	2c 32       	cpi	r18, 0x2C	; 44
    4870:	31 40       	sbci	r19, 0x01	; 1
    4872:	70 f0       	brcs	.+28     	; 0x4890 <send_keyboard_report+0x8a>
            dprintf("Oneshot: timeout\n");
    4874:	80 91 41 03 	lds	r24, 0x0341
    4878:	80 ff       	sbrs	r24, 0
    487a:	08 c0       	rjmp	.+16     	; 0x488c <send_keyboard_report+0x86>
    487c:	8c ec       	ldi	r24, 0xCC	; 204
    487e:	96 e0       	ldi	r25, 0x06	; 6
    4880:	9f 93       	push	r25
    4882:	8f 93       	push	r24
    4884:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    4888:	0f 90       	pop	r0
    488a:	0f 90       	pop	r0
            clear_oneshot_mods();
    488c:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <clear_oneshot_mods>
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    4890:	e0 91 21 01 	lds	r30, 0x0121
    4894:	f0 91 22 01 	lds	r31, 0x0122
    4898:	80 81       	ld	r24, Z
    489a:	90 91 36 03 	lds	r25, 0x0336
    489e:	89 2b       	or	r24, r25
    48a0:	80 83       	st	Z, r24
        if (has_anykey()) {
    48a2:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <has_anykey>
    48a6:	81 11       	cpse	r24, r1
            clear_oneshot_mods();
    48a8:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    48ac:	80 91 21 01 	lds	r24, 0x0121
    48b0:	90 91 22 01 	lds	r25, 0x0122
    48b4:	0c 94 26 18 	jmp	0x304c	; 0x304c <host_keyboard_send>

000048b8 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    48b8:	90 93 9b 01 	sts	0x019B, r25
    48bc:	80 93 9a 01 	sts	0x019A, r24
    48c0:	08 95       	ret

000048c2 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    48c2:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    48c4:	98 2f       	mov	r25, r24
    48c6:	9c 7c       	andi	r25, 0xCC	; 204
    48c8:	96 95       	lsr	r25
    48ca:	96 95       	lsr	r25
    48cc:	83 73       	andi	r24, 0x33	; 51
    48ce:	44 e0       	ldi	r20, 0x04	; 4
    48d0:	84 9f       	mul	r24, r20
    48d2:	90 01       	movw	r18, r0
    48d4:	11 24       	eor	r1, r1
    48d6:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    48d8:	89 2f       	mov	r24, r25
    48da:	8a 7a       	andi	r24, 0xAA	; 170
    48dc:	86 95       	lsr	r24
    48de:	95 75       	andi	r25, 0x55	; 85
    48e0:	99 0f       	add	r25, r25
    return bits;
}
    48e2:	89 2b       	or	r24, r25
    48e4:	08 95       	ret

000048e6 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    48e6:	08 95       	ret

000048e8 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    48e8:	cf 93       	push	r28
    48ea:	df 93       	push	r29
    48ec:	00 d0       	rcall	.+0      	; 0x48ee <hook_matrix_change+0x6>
    48ee:	00 d0       	rcall	.+0      	; 0x48f0 <hook_matrix_change+0x8>
    48f0:	1f 92       	push	r1
    48f2:	cd b7       	in	r28, 0x3d	; 61
    48f4:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    48f6:	0f 90       	pop	r0
    48f8:	0f 90       	pop	r0
    48fa:	0f 90       	pop	r0
    48fc:	0f 90       	pop	r0
    48fe:	0f 90       	pop	r0
    4900:	df 91       	pop	r29
    4902:	cf 91       	pop	r28
    4904:	08 95       	ret

00004906 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    4906:	08 95       	ret

00004908 <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    4908:	08 95       	ret

0000490a <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    490a:	0c 94 93 19 	jmp	0x3326	; 0x3326 <keyboard_set_leds>

0000490e <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    490e:	80 91 56 03 	lds	r24, 0x0356
    4912:	84 30       	cpi	r24, 0x04	; 4
    4914:	09 f1       	breq	.+66     	; 0x4958 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    4916:	10 92 42 03 	sts	0x0342, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    491a:	20 e4       	ldi	r18, 0x40	; 64
    491c:	88 e1       	ldi	r24, 0x18	; 24
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	0f b6       	in	r0, 0x3f	; 63
    4922:	f8 94       	cli
    4924:	a8 95       	wdr
    4926:	80 93 60 00 	sts	0x0060, r24
    492a:	0f be       	out	0x3f, r0	; 63
    492c:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    4930:	83 b7       	in	r24, 0x33	; 51
    4932:	81 7f       	andi	r24, 0xF1	; 241
    4934:	84 60       	ori	r24, 0x04	; 4
    4936:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    4938:	83 b7       	in	r24, 0x33	; 51
    493a:	81 60       	ori	r24, 0x01	; 1
    493c:	83 bf       	out	0x33, r24	; 51
    sei();
    493e:	78 94       	sei
    sleep_cpu();
    4940:	88 95       	sleep
    sleep_disable();
    4942:	83 b7       	in	r24, 0x33	; 51
    4944:	8e 7f       	andi	r24, 0xFE	; 254
    4946:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    4948:	88 e1       	ldi	r24, 0x18	; 24
    494a:	0f b6       	in	r0, 0x3f	; 63
    494c:	f8 94       	cli
    494e:	80 93 60 00 	sts	0x0060, r24
    4952:	10 92 60 00 	sts	0x0060, r1
    4956:	0f be       	out	0x3f, r0	; 63
    4958:	08 95       	ret

0000495a <suspend_wakeup_condition>:
    power_down(WDTO_15MS);
#endif
}

bool suspend_wakeup_condition(void)
{
    495a:	cf 93       	push	r28
    matrix_power_up();
    495c:	0e 94 b1 08 	call	0x1162	; 0x1162 <matrix_power_up>
    matrix_scan();
    4960:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <matrix_scan>
    matrix_power_down();
    4964:	0e 94 b3 08 	call	0x1166	; 0x1166 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4968:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    496a:	8c 2f       	mov	r24, r28
    496c:	0e 94 a9 08 	call	0x1152	; 0x1152 <matrix_get_row>
    4970:	81 11       	cpse	r24, r1
    4972:	05 c0       	rjmp	.+10     	; 0x497e <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4974:	cf 5f       	subi	r28, 0xFF	; 255
    4976:	c8 30       	cpi	r28, 0x08	; 8
    4978:	c1 f7       	brne	.-16     	; 0x496a <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    497a:	80 e0       	ldi	r24, 0x00	; 0
    497c:	01 c0       	rjmp	.+2      	; 0x4980 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    497e:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    4980:	cf 91       	pop	r28
    4982:	08 95       	ret

00004984 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    4984:	0e 94 95 19 	call	0x332a	; 0x332a <matrix_clear>
    clear_keyboard();
    4988:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <clear_keyboard>

0000498c <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    498c:	1f 92       	push	r1
    498e:	0f 92       	push	r0
    4990:	0f b6       	in	r0, 0x3f	; 63
    4992:	0f 92       	push	r0
    4994:	11 24       	eor	r1, r1
    4996:	8f 93       	push	r24
    4998:	9f 93       	push	r25
    499a:	af 93       	push	r26
    499c:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    499e:	80 91 42 03 	lds	r24, 0x0342
    49a2:	81 11       	cpse	r24, r1
    49a4:	13 c0       	rjmp	.+38     	; 0x49cc <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    49a6:	80 91 43 03 	lds	r24, 0x0343
    49aa:	90 91 44 03 	lds	r25, 0x0344
    49ae:	a0 91 45 03 	lds	r26, 0x0345
    49b2:	b0 91 46 03 	lds	r27, 0x0346
    49b6:	41 96       	adiw	r24, 0x11	; 17
    49b8:	a1 1d       	adc	r26, r1
    49ba:	b1 1d       	adc	r27, r1
    49bc:	80 93 43 03 	sts	0x0343, r24
    49c0:	90 93 44 03 	sts	0x0344, r25
    49c4:	a0 93 45 03 	sts	0x0345, r26
    49c8:	b0 93 46 03 	sts	0x0346, r27
            break;
        default:
            ;
    }
}
    49cc:	bf 91       	pop	r27
    49ce:	af 91       	pop	r26
    49d0:	9f 91       	pop	r25
    49d2:	8f 91       	pop	r24
    49d4:	0f 90       	pop	r0
    49d6:	0f be       	out	0x3f, r0	; 63
    49d8:	0f 90       	pop	r0
    49da:	1f 90       	pop	r1
    49dc:	18 95       	reti

000049de <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    49de:	82 e0       	ldi	r24, 0x02	; 2
    49e0:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    49e2:	93 e0       	ldi	r25, 0x03	; 3
    49e4:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    49e6:	9a ef       	ldi	r25, 0xFA	; 250
    49e8:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    49ea:	80 93 6e 00 	sts	0x006E, r24
    49ee:	08 95       	ret

000049f0 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    49f0:	2f b7       	in	r18, 0x3f	; 63
    cli();
    49f2:	f8 94       	cli
    t = timer_count;
    49f4:	80 91 43 03 	lds	r24, 0x0343
    49f8:	90 91 44 03 	lds	r25, 0x0344
    49fc:	a0 91 45 03 	lds	r26, 0x0345
    4a00:	b0 91 46 03 	lds	r27, 0x0346
    SREG = sreg;
    4a04:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    4a06:	08 95       	ret

00004a08 <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    4a08:	2f b7       	in	r18, 0x3f	; 63
    cli();
    4a0a:	f8 94       	cli
    t = timer_count;
    4a0c:	60 91 43 03 	lds	r22, 0x0343
    4a10:	70 91 44 03 	lds	r23, 0x0344
    4a14:	80 91 45 03 	lds	r24, 0x0345
    4a18:	90 91 46 03 	lds	r25, 0x0346
    SREG = sreg;
    4a1c:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    4a1e:	08 95       	ret

00004a20 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    4a20:	cf 92       	push	r12
    4a22:	df 92       	push	r13
    4a24:	ef 92       	push	r14
    4a26:	ff 92       	push	r15
    4a28:	0f 93       	push	r16
    4a2a:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    4a2c:	2f b7       	in	r18, 0x3f	; 63
    cli();
    4a2e:	f8 94       	cli
    t = timer_count;
    4a30:	40 91 43 03 	lds	r20, 0x0343
    4a34:	50 91 44 03 	lds	r21, 0x0344
    4a38:	60 91 45 03 	lds	r22, 0x0345
    4a3c:	70 91 46 03 	lds	r23, 0x0346
    SREG = sreg;
    4a40:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    4a42:	6a 01       	movw	r12, r20
    4a44:	7b 01       	movw	r14, r22
    4a46:	ee 24       	eor	r14, r14
    4a48:	ff 24       	eor	r15, r15
    4a4a:	8c 01       	movw	r16, r24
    4a4c:	20 e0       	ldi	r18, 0x00	; 0
    4a4e:	30 e0       	ldi	r19, 0x00	; 0
    4a50:	c0 16       	cp	r12, r16
    4a52:	d1 06       	cpc	r13, r17
    4a54:	e2 06       	cpc	r14, r18
    4a56:	f3 06       	cpc	r15, r19
    4a58:	10 f4       	brcc	.+4      	; 0x4a5e <timer_elapsed+0x3e>
    4a5a:	41 50       	subi	r20, 0x01	; 1
    4a5c:	51 09       	sbc	r21, r1
    4a5e:	48 1b       	sub	r20, r24
    4a60:	59 0b       	sbc	r21, r25
}
    4a62:	ca 01       	movw	r24, r20
    4a64:	1f 91       	pop	r17
    4a66:	0f 91       	pop	r16
    4a68:	ff 90       	pop	r15
    4a6a:	ef 90       	pop	r14
    4a6c:	df 90       	pop	r13
    4a6e:	cf 90       	pop	r12
    4a70:	08 95       	ret

00004a72 <timer_elapsed32>:

inline
uint32_t timer_elapsed32(uint32_t last)
{
    4a72:	cf 92       	push	r12
    4a74:	df 92       	push	r13
    4a76:	ef 92       	push	r14
    4a78:	ff 92       	push	r15
    4a7a:	0f 93       	push	r16
    4a7c:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    4a7e:	4f b7       	in	r20, 0x3f	; 63
    cli();
    4a80:	f8 94       	cli
    t = timer_count;
    4a82:	00 91 43 03 	lds	r16, 0x0343
    4a86:	10 91 44 03 	lds	r17, 0x0344
    4a8a:	20 91 45 03 	lds	r18, 0x0345
    4a8e:	30 91 46 03 	lds	r19, 0x0346
    SREG = sreg;
    4a92:	4f bf       	out	0x3f, r20	; 63
    4a94:	68 01       	movw	r12, r16
    4a96:	79 01       	movw	r14, r18
    4a98:	c6 1a       	sub	r12, r22
    4a9a:	d7 0a       	sbc	r13, r23
    4a9c:	e8 0a       	sbc	r14, r24
    4a9e:	f9 0a       	sbc	r15, r25

    return TIMER_DIFF_32(t, last);
    4aa0:	06 17       	cp	r16, r22
    4aa2:	17 07       	cpc	r17, r23
    4aa4:	28 07       	cpc	r18, r24
    4aa6:	39 07       	cpc	r19, r25
    4aa8:	18 f0       	brcs	.+6      	; 0x4ab0 <timer_elapsed32+0x3e>
    4aaa:	c7 01       	movw	r24, r14
    4aac:	b6 01       	movw	r22, r12
    4aae:	06 c0       	rjmp	.+12     	; 0x4abc <timer_elapsed32+0x4a>
    4ab0:	c7 01       	movw	r24, r14
    4ab2:	b6 01       	movw	r22, r12
    4ab4:	61 50       	subi	r22, 0x01	; 1
    4ab6:	71 09       	sbc	r23, r1
    4ab8:	81 09       	sbc	r24, r1
    4aba:	91 09       	sbc	r25, r1
}
    4abc:	1f 91       	pop	r17
    4abe:	0f 91       	pop	r16
    4ac0:	ff 90       	pop	r15
    4ac2:	ef 90       	pop	r14
    4ac4:	df 90       	pop	r13
    4ac6:	cf 90       	pop	r12
    4ac8:	08 95       	ret

00004aca <__vector_21>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    4aca:	1f 92       	push	r1
    4acc:	0f 92       	push	r0
    4ace:	0f b6       	in	r0, 0x3f	; 63
    4ad0:	0f 92       	push	r0
    4ad2:	11 24       	eor	r1, r1
    4ad4:	8f 93       	push	r24
    4ad6:	9f 93       	push	r25
    4ad8:	af 93       	push	r26
    4ada:	bf 93       	push	r27
    timer_count++;
    4adc:	80 91 43 03 	lds	r24, 0x0343
    4ae0:	90 91 44 03 	lds	r25, 0x0344
    4ae4:	a0 91 45 03 	lds	r26, 0x0345
    4ae8:	b0 91 46 03 	lds	r27, 0x0346
    4aec:	01 96       	adiw	r24, 0x01	; 1
    4aee:	a1 1d       	adc	r26, r1
    4af0:	b1 1d       	adc	r27, r1
    4af2:	80 93 43 03 	sts	0x0343, r24
    4af6:	90 93 44 03 	sts	0x0344, r25
    4afa:	a0 93 45 03 	sts	0x0345, r26
    4afe:	b0 93 46 03 	sts	0x0346, r27
}
    4b02:	bf 91       	pop	r27
    4b04:	af 91       	pop	r26
    4b06:	9f 91       	pop	r25
    4b08:	8f 91       	pop	r24
    4b0a:	0f 90       	pop	r0
    4b0c:	0f be       	out	0x3f, r0	; 63
    4b0e:	0f 90       	pop	r0
    4b10:	1f 90       	pop	r1
    4b12:	18 95       	reti

00004b14 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    4b14:	0e 94 39 15 	call	0x2a72	; 0x2a72 <USB_Disable>
    cli();
    4b18:	f8 94       	cli
    4b1a:	2f ef       	ldi	r18, 0xFF	; 255
    4b1c:	87 ea       	ldi	r24, 0xA7	; 167
    4b1e:	91 e6       	ldi	r25, 0x61	; 97
    4b20:	21 50       	subi	r18, 0x01	; 1
    4b22:	80 40       	sbci	r24, 0x00	; 0
    4b24:	90 40       	sbci	r25, 0x00	; 0
    4b26:	e1 f7       	brne	.-8      	; 0x4b20 <bootloader_jump+0xc>
    4b28:	00 c0       	rjmp	.+0      	; 0x4b2a <bootloader_jump+0x16>
    4b2a:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    4b2c:	87 e0       	ldi	r24, 0x07	; 7
    4b2e:	90 eb       	ldi	r25, 0xB0	; 176
    4b30:	dc 01       	movw	r26, r24
    4b32:	80 93 5f 03 	sts	0x035F, r24
    4b36:	90 93 60 03 	sts	0x0360, r25
    4b3a:	a0 93 61 03 	sts	0x0361, r26
    4b3e:	b0 93 62 03 	sts	0x0362, r27
    wdt_enable(WDTO_250MS);
    4b42:	2c e0       	ldi	r18, 0x0C	; 12
    4b44:	88 e1       	ldi	r24, 0x18	; 24
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	0f b6       	in	r0, 0x3f	; 63
    4b4a:	f8 94       	cli
    4b4c:	a8 95       	wdr
    4b4e:	80 93 60 00 	sts	0x0060, r24
    4b52:	0f be       	out	0x3f, r0	; 63
    4b54:	20 93 60 00 	sts	0x0060, r18
    4b58:	ff cf       	rjmp	.-2      	; 0x4b58 <bootloader_jump+0x44>

00004b5a <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    4b5a:	80 e0       	ldi	r24, 0x00	; 0
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	08 95       	ret

00004b60 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    4b60:	08 95       	ret

00004b62 <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    4b62:	e7 2f       	mov	r30, r23
    4b64:	f0 e0       	ldi	r31, 0x00	; 0
    4b66:	98 e0       	ldi	r25, 0x08	; 8
    4b68:	89 9f       	mul	r24, r25
    4b6a:	e0 0d       	add	r30, r0
    4b6c:	f1 1d       	adc	r31, r1
    4b6e:	11 24       	eor	r1, r1
    4b70:	83 e0       	ldi	r24, 0x03	; 3
    4b72:	ee 0f       	add	r30, r30
    4b74:	ff 1f       	adc	r31, r31
    4b76:	8a 95       	dec	r24
    4b78:	e1 f7       	brne	.-8      	; 0x4b72 <keymap_key_to_keycode+0x10>
    4b7a:	e6 0f       	add	r30, r22
    4b7c:	f1 1d       	adc	r31, r1
    4b7e:	ec 58       	subi	r30, 0x8C	; 140
    4b80:	fe 4f       	sbci	r31, 0xFE	; 254
    4b82:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    4b84:	08 95       	ret

00004b86 <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    4b86:	e8 2f       	mov	r30, r24
    4b88:	f0 e0       	ldi	r31, 0x00	; 0
    4b8a:	ee 0f       	add	r30, r30
    4b8c:	ff 1f       	adc	r31, r31
    4b8e:	ee 50       	subi	r30, 0x0E	; 14
    4b90:	f0 40       	sbci	r31, 0x00	; 0
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    4b92:	85 91       	lpm	r24, Z+
    4b94:	94 91       	lpm	r25, Z
    4b96:	08 95       	ret

00004b98 <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    4b98:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <keymap_key_to_keycode>
    switch (keycode) {
    4b9c:	90 e4       	ldi	r25, 0x40	; 64
    4b9e:	98 0f       	add	r25, r24
    4ba0:	90 32       	cpi	r25, 0x20	; 32
    4ba2:	18 f4       	brcc	.+6      	; 0x4baa <action_for_key+0x12>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    4ba4:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <keymap_fn_to_action>
    4ba8:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    4baa:	8d 3b       	cpi	r24, 0xBD	; 189
    4bac:	60 f4       	brcc	.+24     	; 0x4bc6 <action_for_key+0x2e>
    4bae:	88 3a       	cpi	r24, 0xA8	; 168
    4bb0:	a0 f5       	brcc	.+104    	; 0x4c1a <action_for_key+0x82>
    4bb2:	85 3a       	cpi	r24, 0xA5	; 165
    4bb4:	38 f5       	brcc	.+78     	; 0x4c04 <action_for_key+0x6c>
    4bb6:	84 30       	cpi	r24, 0x04	; 4
    4bb8:	10 f5       	brcc	.+68     	; 0x4bfe <action_for_key+0x66>
    4bba:	81 30       	cpi	r24, 0x01	; 1
    4bbc:	09 f0       	breq	.+2      	; 0x4bc0 <action_for_key+0x28>
    4bbe:	88 c0       	rjmp	.+272    	; 0x4cd0 <action_for_key+0x138>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
    4bc0:	21 e0       	ldi	r18, 0x01	; 1
    4bc2:	30 e0       	ldi	r19, 0x00	; 0
    4bc4:	87 c0       	rjmp	.+270    	; 0x4cd4 <action_for_key+0x13c>


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    4bc6:	88 3e       	cpi	r24, 0xE8	; 232
    4bc8:	98 f4       	brcc	.+38     	; 0x4bf0 <action_for_key+0x58>
    4bca:	80 3e       	cpi	r24, 0xE0	; 224
    4bcc:	c0 f4       	brcc	.+48     	; 0x4bfe <action_for_key+0x66>
    4bce:	8f 3b       	cpi	r24, 0xBF	; 191
    4bd0:	09 f0       	breq	.+2      	; 0x4bd4 <action_for_key+0x3c>
    4bd2:	7e c0       	rjmp	.+252    	; 0x4cd0 <action_for_key+0x138>
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    4bd4:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <clear_keyboard>
    4bd8:	2f ef       	ldi	r18, 0xFF	; 255
    4bda:	80 e7       	ldi	r24, 0x70	; 112
    4bdc:	92 e0       	ldi	r25, 0x02	; 2
    4bde:	21 50       	subi	r18, 0x01	; 1
    4be0:	80 40       	sbci	r24, 0x00	; 0
    4be2:	90 40       	sbci	r25, 0x00	; 0
    4be4:	e1 f7       	brne	.-8      	; 0x4bde <action_for_key+0x46>
    4be6:	00 c0       	rjmp	.+0      	; 0x4be8 <action_for_key+0x50>
    4be8:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    4bea:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <bootloader_jump>
    4bee:	70 c0       	rjmp	.+224    	; 0x4cd0 <action_for_key+0x138>


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    4bf0:	80 3f       	cpi	r24, 0xF0	; 240
    4bf2:	08 f4       	brcc	.+2      	; 0x4bf6 <action_for_key+0x5e>
    4bf4:	6d c0       	rjmp	.+218    	; 0x4cd0 <action_for_key+0x138>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
    4bf6:	28 2f       	mov	r18, r24
    4bf8:	30 e0       	ldi	r19, 0x00	; 0
    4bfa:	30 65       	ori	r19, 0x50	; 80
    4bfc:	6b c0       	rjmp	.+214    	; 0x4cd4 <action_for_key+0x13c>
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            return (action_t)ACTION_KEY(keycode);
    4bfe:	28 2f       	mov	r18, r24
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	68 c0       	rjmp	.+208    	; 0x4cd4 <action_for_key+0x13c>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    4c04:	85 3a       	cpi	r24, 0xA5	; 165
    4c06:	21 f0       	breq	.+8      	; 0x4c10 <action_for_key+0x78>
    4c08:	86 3a       	cpi	r24, 0xA6	; 166
    4c0a:	21 f4       	brne	.+8      	; 0x4c14 <action_for_key+0x7c>
    4c0c:	92 e8       	ldi	r25, 0x82	; 130
    4c0e:	03 c0       	rjmp	.+6      	; 0x4c16 <action_for_key+0x7e>
    4c10:	91 e8       	ldi	r25, 0x81	; 129
    4c12:	01 c0       	rjmp	.+2      	; 0x4c16 <action_for_key+0x7e>
    4c14:	93 e8       	ldi	r25, 0x83	; 131
    4c16:	80 e4       	ldi	r24, 0x40	; 64
    4c18:	58 c0       	rjmp	.+176    	; 0x4cca <action_for_key+0x132>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    4c1a:	88 3a       	cpi	r24, 0xA8	; 168
    4c1c:	51 f1       	breq	.+84     	; 0x4c72 <action_for_key+0xda>
    4c1e:	89 3a       	cpi	r24, 0xA9	; 169
    4c20:	51 f1       	breq	.+84     	; 0x4c76 <action_for_key+0xde>
    4c22:	8a 3a       	cpi	r24, 0xAA	; 170
    4c24:	51 f1       	breq	.+84     	; 0x4c7a <action_for_key+0xe2>
    4c26:	8b 3a       	cpi	r24, 0xAB	; 171
    4c28:	51 f1       	breq	.+84     	; 0x4c7e <action_for_key+0xe6>
    4c2a:	8c 3a       	cpi	r24, 0xAC	; 172
    4c2c:	51 f1       	breq	.+84     	; 0x4c82 <action_for_key+0xea>
    4c2e:	8d 3a       	cpi	r24, 0xAD	; 173
    4c30:	51 f1       	breq	.+84     	; 0x4c86 <action_for_key+0xee>
    4c32:	8e 3a       	cpi	r24, 0xAE	; 174
    4c34:	51 f1       	breq	.+84     	; 0x4c8a <action_for_key+0xf2>
    4c36:	8f 3a       	cpi	r24, 0xAF	; 175
    4c38:	51 f1       	breq	.+84     	; 0x4c8e <action_for_key+0xf6>
    4c3a:	81 3b       	cpi	r24, 0xB1	; 177
    4c3c:	51 f1       	breq	.+84     	; 0x4c92 <action_for_key+0xfa>
    4c3e:	80 3b       	cpi	r24, 0xB0	; 176
    4c40:	51 f1       	breq	.+84     	; 0x4c96 <action_for_key+0xfe>
    4c42:	82 3b       	cpi	r24, 0xB2	; 178
    4c44:	51 f1       	breq	.+84     	; 0x4c9a <action_for_key+0x102>
    4c46:	83 3b       	cpi	r24, 0xB3	; 179
    4c48:	51 f1       	breq	.+84     	; 0x4c9e <action_for_key+0x106>
    4c4a:	84 3b       	cpi	r24, 0xB4	; 180
    4c4c:	51 f1       	breq	.+84     	; 0x4ca2 <action_for_key+0x10a>
    4c4e:	85 3b       	cpi	r24, 0xB5	; 181
    4c50:	51 f1       	breq	.+84     	; 0x4ca6 <action_for_key+0x10e>
    4c52:	86 3b       	cpi	r24, 0xB6	; 182
    4c54:	59 f1       	breq	.+86     	; 0x4cac <action_for_key+0x114>
    4c56:	87 3b       	cpi	r24, 0xB7	; 183
    4c58:	59 f1       	breq	.+86     	; 0x4cb0 <action_for_key+0x118>
    4c5a:	88 3b       	cpi	r24, 0xB8	; 184
    4c5c:	59 f1       	breq	.+86     	; 0x4cb4 <action_for_key+0x11c>
    4c5e:	89 3b       	cpi	r24, 0xB9	; 185
    4c60:	59 f1       	breq	.+86     	; 0x4cb8 <action_for_key+0x120>
    4c62:	8a 3b       	cpi	r24, 0xBA	; 186
    4c64:	59 f1       	breq	.+86     	; 0x4cbc <action_for_key+0x124>
    4c66:	8b 3b       	cpi	r24, 0xBB	; 187
    4c68:	59 f1       	breq	.+86     	; 0x4cc0 <action_for_key+0x128>
    4c6a:	8c 3b       	cpi	r24, 0xBC	; 188
    4c6c:	61 f5       	brne	.+88     	; 0x4cc6 <action_for_key+0x12e>
    4c6e:	9a e2       	ldi	r25, 0x2A	; 42
    4c70:	28 c0       	rjmp	.+80     	; 0x4cc2 <action_for_key+0x12a>
    4c72:	92 ee       	ldi	r25, 0xE2	; 226
    4c74:	29 c0       	rjmp	.+82     	; 0x4cc8 <action_for_key+0x130>
    4c76:	99 ee       	ldi	r25, 0xE9	; 233
    4c78:	27 c0       	rjmp	.+78     	; 0x4cc8 <action_for_key+0x130>
    4c7a:	9a ee       	ldi	r25, 0xEA	; 234
    4c7c:	25 c0       	rjmp	.+74     	; 0x4cc8 <action_for_key+0x130>
    4c7e:	95 eb       	ldi	r25, 0xB5	; 181
    4c80:	23 c0       	rjmp	.+70     	; 0x4cc8 <action_for_key+0x130>
    4c82:	96 eb       	ldi	r25, 0xB6	; 182
    4c84:	21 c0       	rjmp	.+66     	; 0x4cc8 <action_for_key+0x130>
    4c86:	93 eb       	ldi	r25, 0xB3	; 179
    4c88:	1f c0       	rjmp	.+62     	; 0x4cc8 <action_for_key+0x130>
    4c8a:	94 eb       	ldi	r25, 0xB4	; 180
    4c8c:	1d c0       	rjmp	.+58     	; 0x4cc8 <action_for_key+0x130>
    4c8e:	97 eb       	ldi	r25, 0xB7	; 183
    4c90:	1b c0       	rjmp	.+54     	; 0x4cc8 <action_for_key+0x130>
    4c92:	9c ec       	ldi	r25, 0xCC	; 204
    4c94:	19 c0       	rjmp	.+50     	; 0x4cc8 <action_for_key+0x130>
    4c96:	9d ec       	ldi	r25, 0xCD	; 205
    4c98:	17 c0       	rjmp	.+46     	; 0x4cc8 <action_for_key+0x130>
    4c9a:	93 e8       	ldi	r25, 0x83	; 131
    4c9c:	05 c0       	rjmp	.+10     	; 0x4ca8 <action_for_key+0x110>
    4c9e:	9a e8       	ldi	r25, 0x8A	; 138
    4ca0:	03 c0       	rjmp	.+6      	; 0x4ca8 <action_for_key+0x110>
    4ca2:	92 e9       	ldi	r25, 0x92	; 146
    4ca4:	01 c0       	rjmp	.+2      	; 0x4ca8 <action_for_key+0x110>
    4ca6:	94 e9       	ldi	r25, 0x94	; 148
    4ca8:	85 e4       	ldi	r24, 0x45	; 69
    4caa:	0f c0       	rjmp	.+30     	; 0x4cca <action_for_key+0x132>
    4cac:	91 e2       	ldi	r25, 0x21	; 33
    4cae:	09 c0       	rjmp	.+18     	; 0x4cc2 <action_for_key+0x12a>
    4cb0:	93 e2       	ldi	r25, 0x23	; 35
    4cb2:	07 c0       	rjmp	.+14     	; 0x4cc2 <action_for_key+0x12a>
    4cb4:	94 e2       	ldi	r25, 0x24	; 36
    4cb6:	05 c0       	rjmp	.+10     	; 0x4cc2 <action_for_key+0x12a>
    4cb8:	95 e2       	ldi	r25, 0x25	; 37
    4cba:	03 c0       	rjmp	.+6      	; 0x4cc2 <action_for_key+0x12a>
    4cbc:	96 e2       	ldi	r25, 0x26	; 38
    4cbe:	01 c0       	rjmp	.+2      	; 0x4cc2 <action_for_key+0x12a>
    4cc0:	97 e2       	ldi	r25, 0x27	; 39
    4cc2:	86 e4       	ldi	r24, 0x46	; 70
    4cc4:	02 c0       	rjmp	.+4      	; 0x4cca <action_for_key+0x132>
    4cc6:	90 e0       	ldi	r25, 0x00	; 0
    4cc8:	84 e4       	ldi	r24, 0x44	; 68
    4cca:	29 2f       	mov	r18, r25
    4ccc:	38 2f       	mov	r19, r24
    4cce:	02 c0       	rjmp	.+4      	; 0x4cd4 <action_for_key+0x13c>
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            return (action_t)ACTION_NO;
    4cd0:	20 e0       	ldi	r18, 0x00	; 0
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	c9 01       	movw	r24, r18
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    }
}
    4cd6:	08 95       	ret

00004cd8 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4cd8:	80 91 49 03 	lds	r24, 0x0349
    4cdc:	80 ff       	sbrs	r24, 0
    4cde:	0b c0       	rjmp	.+22     	; 0x4cf6 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4ce0:	60 91 26 01 	lds	r22, 0x0126
    4ce4:	85 e0       	ldi	r24, 0x05	; 5
    4ce6:	68 9f       	mul	r22, r24
    4ce8:	b0 01       	movw	r22, r0
    4cea:	11 24       	eor	r1, r1
    4cec:	75 95       	asr	r23
    4cee:	67 95       	ror	r22
    4cf0:	75 95       	asr	r23
    4cf2:	67 95       	ror	r22
    4cf4:	2a c0       	rjmp	.+84     	; 0x4d4a <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    4cf6:	81 ff       	sbrs	r24, 1
    4cf8:	09 c0       	rjmp	.+18     	; 0x4d0c <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4cfa:	60 91 26 01 	lds	r22, 0x0126
    4cfe:	85 e0       	ldi	r24, 0x05	; 5
    4d00:	68 9f       	mul	r22, r24
    4d02:	b0 01       	movw	r22, r0
    4d04:	11 24       	eor	r1, r1
    4d06:	75 95       	asr	r23
    4d08:	67 95       	ror	r22
    4d0a:	1f c0       	rjmp	.+62     	; 0x4d4a <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    4d0c:	82 ff       	sbrs	r24, 2
    4d0e:	07 c0       	rjmp	.+14     	; 0x4d1e <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4d10:	60 91 26 01 	lds	r22, 0x0126
    4d14:	85 e0       	ldi	r24, 0x05	; 5
    4d16:	68 9f       	mul	r22, r24
    4d18:	b0 01       	movw	r22, r0
    4d1a:	11 24       	eor	r1, r1
    4d1c:	16 c0       	rjmp	.+44     	; 0x4d4a <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    4d1e:	40 91 4a 03 	lds	r20, 0x034A
    4d22:	44 23       	and	r20, r20
    4d24:	c9 f0       	breq	.+50     	; 0x4d58 <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4d26:	60 91 25 01 	lds	r22, 0x0125
    4d2a:	46 17       	cp	r20, r22
    4d2c:	88 f7       	brcc	.-30     	; 0x4d10 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4d2e:	20 91 26 01 	lds	r18, 0x0126
    4d32:	85 e0       	ldi	r24, 0x05	; 5
    4d34:	28 9f       	mul	r18, r24
    4d36:	90 01       	movw	r18, r0
    4d38:	11 24       	eor	r1, r1
    4d3a:	42 9f       	mul	r20, r18
    4d3c:	c0 01       	movw	r24, r0
    4d3e:	43 9f       	mul	r20, r19
    4d40:	90 0d       	add	r25, r0
    4d42:	11 24       	eor	r1, r1
    4d44:	70 e0       	ldi	r23, 0x00	; 0
    4d46:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4d4a:	60 38       	cpi	r22, 0x80	; 128
    4d4c:	71 05       	cpc	r23, r1
    4d4e:	40 f4       	brcc	.+16     	; 0x4d60 <move_unit+0x88>
    4d50:	61 15       	cp	r22, r1
    4d52:	71 05       	cpc	r23, r1
    4d54:	39 f0       	breq	.+14     	; 0x4d64 <move_unit+0x8c>
    4d56:	02 c0       	rjmp	.+4      	; 0x4d5c <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    4d58:	65 e0       	ldi	r22, 0x05	; 5
    4d5a:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4d5c:	86 2f       	mov	r24, r22
    4d5e:	08 95       	ret
    4d60:	8f e7       	ldi	r24, 0x7F	; 127
    4d62:	08 95       	ret
    4d64:	81 e0       	ldi	r24, 0x01	; 1
}
    4d66:	08 95       	ret

00004d68 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4d68:	80 91 49 03 	lds	r24, 0x0349
    4d6c:	80 ff       	sbrs	r24, 0
    4d6e:	08 c0       	rjmp	.+16     	; 0x4d80 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4d70:	60 91 24 01 	lds	r22, 0x0124
    4d74:	70 e0       	ldi	r23, 0x00	; 0
    4d76:	75 95       	asr	r23
    4d78:	67 95       	ror	r22
    4d7a:	75 95       	asr	r23
    4d7c:	67 95       	ror	r22
    4d7e:	21 c0       	rjmp	.+66     	; 0x4dc2 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    4d80:	81 ff       	sbrs	r24, 1
    4d82:	06 c0       	rjmp	.+12     	; 0x4d90 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4d84:	60 91 24 01 	lds	r22, 0x0124
    4d88:	70 e0       	ldi	r23, 0x00	; 0
    4d8a:	75 95       	asr	r23
    4d8c:	67 95       	ror	r22
    4d8e:	19 c0       	rjmp	.+50     	; 0x4dc2 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    4d90:	82 ff       	sbrs	r24, 2
    4d92:	04 c0       	rjmp	.+8      	; 0x4d9c <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4d94:	60 91 24 01 	lds	r22, 0x0124
    4d98:	70 e0       	ldi	r23, 0x00	; 0
    4d9a:	10 c0       	rjmp	.+32     	; 0x4dbc <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4d9c:	80 91 4a 03 	lds	r24, 0x034A
    4da0:	88 23       	and	r24, r24
    4da2:	c1 f0       	breq	.+48     	; 0x4dd4 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4da4:	60 91 23 01 	lds	r22, 0x0123
    4da8:	86 17       	cp	r24, r22
    4daa:	a0 f7       	brcc	.-24     	; 0x4d94 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4dac:	90 91 24 01 	lds	r25, 0x0124
    4db0:	98 9f       	mul	r25, r24
    4db2:	c0 01       	movw	r24, r0
    4db4:	11 24       	eor	r1, r1
    4db6:	70 e0       	ldi	r23, 0x00	; 0
    4db8:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4dbc:	60 38       	cpi	r22, 0x80	; 128
    4dbe:	71 05       	cpc	r23, r1
    4dc0:	28 f4       	brcc	.+10     	; 0x4dcc <wheel_unit+0x64>
    4dc2:	61 15       	cp	r22, r1
    4dc4:	71 05       	cpc	r23, r1
    4dc6:	21 f0       	breq	.+8      	; 0x4dd0 <wheel_unit+0x68>
    4dc8:	86 2f       	mov	r24, r22
    4dca:	08 95       	ret
    4dcc:	8f e7       	ldi	r24, 0x7F	; 127
    4dce:	08 95       	ret
    4dd0:	81 e0       	ldi	r24, 0x01	; 1
    4dd2:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4dd4:	61 e0       	ldi	r22, 0x01	; 1
    4dd6:	70 e0       	ldi	r23, 0x00	; 0
    4dd8:	f4 cf       	rjmp	.-24     	; 0x4dc2 <wheel_unit+0x5a>

00004dda <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4dda:	80 3f       	cpi	r24, 0xF0	; 240
    4ddc:	21 f4       	brne	.+8      	; 0x4de6 <mousekey_on+0xc>
    4dde:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <move_unit>
    4de2:	81 95       	neg	r24
    4de4:	04 c0       	rjmp	.+8      	; 0x4dee <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4de6:	81 3f       	cpi	r24, 0xF1	; 241
    4de8:	29 f4       	brne	.+10     	; 0x4df4 <mousekey_on+0x1a>
    4dea:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <move_unit>
    4dee:	80 93 4d 03 	sts	0x034D, r24
    4df2:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4df4:	82 3f       	cpi	r24, 0xF2	; 242
    4df6:	21 f4       	brne	.+8      	; 0x4e00 <mousekey_on+0x26>
    4df8:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <move_unit>
    4dfc:	81 95       	neg	r24
    4dfe:	04 c0       	rjmp	.+8      	; 0x4e08 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4e00:	83 3f       	cpi	r24, 0xF3	; 243
    4e02:	29 f4       	brne	.+10     	; 0x4e0e <mousekey_on+0x34>
    4e04:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <move_unit>
    4e08:	80 93 4c 03 	sts	0x034C, r24
    4e0c:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4e0e:	89 3f       	cpi	r24, 0xF9	; 249
    4e10:	19 f4       	brne	.+6      	; 0x4e18 <mousekey_on+0x3e>
    4e12:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <wheel_unit>
    4e16:	05 c0       	rjmp	.+10     	; 0x4e22 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4e18:	8a 3f       	cpi	r24, 0xFA	; 250
    4e1a:	31 f4       	brne	.+12     	; 0x4e28 <mousekey_on+0x4e>
    4e1c:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <wheel_unit>
    4e20:	81 95       	neg	r24
    4e22:	80 93 4e 03 	sts	0x034E, r24
    4e26:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4e28:	8b 3f       	cpi	r24, 0xFB	; 251
    4e2a:	21 f4       	brne	.+8      	; 0x4e34 <mousekey_on+0x5a>
    4e2c:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <wheel_unit>
    4e30:	81 95       	neg	r24
    4e32:	04 c0       	rjmp	.+8      	; 0x4e3c <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4e34:	8c 3f       	cpi	r24, 0xFC	; 252
    4e36:	29 f4       	brne	.+10     	; 0x4e42 <mousekey_on+0x68>
    4e38:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <wheel_unit>
    4e3c:	80 93 4f 03 	sts	0x034F, r24
    4e40:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4e42:	84 3f       	cpi	r24, 0xF4	; 244
    4e44:	21 f4       	brne	.+8      	; 0x4e4e <mousekey_on+0x74>
    4e46:	80 91 4b 03 	lds	r24, 0x034B
    4e4a:	81 60       	ori	r24, 0x01	; 1
    4e4c:	17 c0       	rjmp	.+46     	; 0x4e7c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4e4e:	85 3f       	cpi	r24, 0xF5	; 245
    4e50:	21 f4       	brne	.+8      	; 0x4e5a <mousekey_on+0x80>
    4e52:	80 91 4b 03 	lds	r24, 0x034B
    4e56:	82 60       	ori	r24, 0x02	; 2
    4e58:	11 c0       	rjmp	.+34     	; 0x4e7c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4e5a:	86 3f       	cpi	r24, 0xF6	; 246
    4e5c:	21 f4       	brne	.+8      	; 0x4e66 <mousekey_on+0x8c>
    4e5e:	80 91 4b 03 	lds	r24, 0x034B
    4e62:	84 60       	ori	r24, 0x04	; 4
    4e64:	0b c0       	rjmp	.+22     	; 0x4e7c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4e66:	87 3f       	cpi	r24, 0xF7	; 247
    4e68:	21 f4       	brne	.+8      	; 0x4e72 <mousekey_on+0x98>
    4e6a:	80 91 4b 03 	lds	r24, 0x034B
    4e6e:	88 60       	ori	r24, 0x08	; 8
    4e70:	05 c0       	rjmp	.+10     	; 0x4e7c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4e72:	88 3f       	cpi	r24, 0xF8	; 248
    4e74:	31 f4       	brne	.+12     	; 0x4e82 <mousekey_on+0xa8>
    4e76:	80 91 4b 03 	lds	r24, 0x034B
    4e7a:	80 61       	ori	r24, 0x10	; 16
    4e7c:	80 93 4b 03 	sts	0x034B, r24
    4e80:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4e82:	8d 3f       	cpi	r24, 0xFD	; 253
    4e84:	21 f4       	brne	.+8      	; 0x4e8e <mousekey_on+0xb4>
    4e86:	80 91 49 03 	lds	r24, 0x0349
    4e8a:	81 60       	ori	r24, 0x01	; 1
    4e8c:	0b c0       	rjmp	.+22     	; 0x4ea4 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4e8e:	8e 3f       	cpi	r24, 0xFE	; 254
    4e90:	21 f4       	brne	.+8      	; 0x4e9a <mousekey_on+0xc0>
    4e92:	80 91 49 03 	lds	r24, 0x0349
    4e96:	82 60       	ori	r24, 0x02	; 2
    4e98:	05 c0       	rjmp	.+10     	; 0x4ea4 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4e9a:	8f 3f       	cpi	r24, 0xFF	; 255
    4e9c:	29 f4       	brne	.+10     	; 0x4ea8 <mousekey_on+0xce>
    4e9e:	80 91 49 03 	lds	r24, 0x0349
    4ea2:	84 60       	ori	r24, 0x04	; 4
    4ea4:	80 93 49 03 	sts	0x0349, r24
    4ea8:	08 95       	ret

00004eaa <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4eaa:	80 3f       	cpi	r24, 0xF0	; 240
    4eac:	39 f4       	brne	.+14     	; 0x4ebc <mousekey_off+0x12>
    4eae:	80 91 4d 03 	lds	r24, 0x034D
    4eb2:	87 ff       	sbrs	r24, 7
    4eb4:	6c c0       	rjmp	.+216    	; 0x4f8e <mousekey_off+0xe4>
    4eb6:	10 92 4d 03 	sts	0x034D, r1
    4eba:	69 c0       	rjmp	.+210    	; 0x4f8e <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4ebc:	81 3f       	cpi	r24, 0xF1	; 241
    4ebe:	29 f4       	brne	.+10     	; 0x4eca <mousekey_off+0x20>
    4ec0:	80 91 4d 03 	lds	r24, 0x034D
    4ec4:	18 16       	cp	r1, r24
    4ec6:	bc f3       	brlt	.-18     	; 0x4eb6 <mousekey_off+0xc>
    4ec8:	62 c0       	rjmp	.+196    	; 0x4f8e <mousekey_off+0xe4>
    4eca:	90 91 4c 03 	lds	r25, 0x034C
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4ece:	82 3f       	cpi	r24, 0xF2	; 242
    4ed0:	29 f4       	brne	.+10     	; 0x4edc <mousekey_off+0x32>
    4ed2:	97 ff       	sbrs	r25, 7
    4ed4:	5c c0       	rjmp	.+184    	; 0x4f8e <mousekey_off+0xe4>
    4ed6:	10 92 4c 03 	sts	0x034C, r1
    4eda:	59 c0       	rjmp	.+178    	; 0x4f8e <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4edc:	83 3f       	cpi	r24, 0xF3	; 243
    4ede:	19 f4       	brne	.+6      	; 0x4ee6 <mousekey_off+0x3c>
    4ee0:	19 16       	cp	r1, r25
    4ee2:	cc f3       	brlt	.-14     	; 0x4ed6 <mousekey_off+0x2c>
    4ee4:	54 c0       	rjmp	.+168    	; 0x4f8e <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4ee6:	89 3f       	cpi	r24, 0xF9	; 249
    4ee8:	41 f4       	brne	.+16     	; 0x4efa <mousekey_off+0x50>
    4eea:	80 91 4e 03 	lds	r24, 0x034E
    4eee:	18 16       	cp	r1, r24
    4ef0:	0c f0       	brlt	.+2      	; 0x4ef4 <mousekey_off+0x4a>
    4ef2:	4d c0       	rjmp	.+154    	; 0x4f8e <mousekey_off+0xe4>
    4ef4:	10 92 4e 03 	sts	0x034E, r1
    4ef8:	4a c0       	rjmp	.+148    	; 0x4f8e <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4efa:	8a 3f       	cpi	r24, 0xFA	; 250
    4efc:	29 f4       	brne	.+10     	; 0x4f08 <mousekey_off+0x5e>
    4efe:	80 91 4e 03 	lds	r24, 0x034E
    4f02:	87 ff       	sbrs	r24, 7
    4f04:	44 c0       	rjmp	.+136    	; 0x4f8e <mousekey_off+0xe4>
    4f06:	f6 cf       	rjmp	.-20     	; 0x4ef4 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4f08:	8b 3f       	cpi	r24, 0xFB	; 251
    4f0a:	39 f4       	brne	.+14     	; 0x4f1a <mousekey_off+0x70>
    4f0c:	80 91 4f 03 	lds	r24, 0x034F
    4f10:	87 ff       	sbrs	r24, 7
    4f12:	3d c0       	rjmp	.+122    	; 0x4f8e <mousekey_off+0xe4>
    4f14:	10 92 4f 03 	sts	0x034F, r1
    4f18:	3a c0       	rjmp	.+116    	; 0x4f8e <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4f1a:	8c 3f       	cpi	r24, 0xFC	; 252
    4f1c:	29 f4       	brne	.+10     	; 0x4f28 <mousekey_off+0x7e>
    4f1e:	80 91 4f 03 	lds	r24, 0x034F
    4f22:	18 16       	cp	r1, r24
    4f24:	bc f3       	brlt	.-18     	; 0x4f14 <mousekey_off+0x6a>
    4f26:	33 c0       	rjmp	.+102    	; 0x4f8e <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4f28:	84 3f       	cpi	r24, 0xF4	; 244
    4f2a:	21 f4       	brne	.+8      	; 0x4f34 <mousekey_off+0x8a>
    4f2c:	80 91 4b 03 	lds	r24, 0x034B
    4f30:	8e 7f       	andi	r24, 0xFE	; 254
    4f32:	17 c0       	rjmp	.+46     	; 0x4f62 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4f34:	85 3f       	cpi	r24, 0xF5	; 245
    4f36:	21 f4       	brne	.+8      	; 0x4f40 <mousekey_off+0x96>
    4f38:	80 91 4b 03 	lds	r24, 0x034B
    4f3c:	8d 7f       	andi	r24, 0xFD	; 253
    4f3e:	11 c0       	rjmp	.+34     	; 0x4f62 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4f40:	86 3f       	cpi	r24, 0xF6	; 246
    4f42:	21 f4       	brne	.+8      	; 0x4f4c <mousekey_off+0xa2>
    4f44:	80 91 4b 03 	lds	r24, 0x034B
    4f48:	8b 7f       	andi	r24, 0xFB	; 251
    4f4a:	0b c0       	rjmp	.+22     	; 0x4f62 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4f4c:	87 3f       	cpi	r24, 0xF7	; 247
    4f4e:	21 f4       	brne	.+8      	; 0x4f58 <mousekey_off+0xae>
    4f50:	80 91 4b 03 	lds	r24, 0x034B
    4f54:	87 7f       	andi	r24, 0xF7	; 247
    4f56:	05 c0       	rjmp	.+10     	; 0x4f62 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4f58:	88 3f       	cpi	r24, 0xF8	; 248
    4f5a:	31 f4       	brne	.+12     	; 0x4f68 <mousekey_off+0xbe>
    4f5c:	80 91 4b 03 	lds	r24, 0x034B
    4f60:	8f 7e       	andi	r24, 0xEF	; 239
    4f62:	80 93 4b 03 	sts	0x034B, r24
    4f66:	13 c0       	rjmp	.+38     	; 0x4f8e <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4f68:	8d 3f       	cpi	r24, 0xFD	; 253
    4f6a:	21 f4       	brne	.+8      	; 0x4f74 <mousekey_off+0xca>
    4f6c:	80 91 49 03 	lds	r24, 0x0349
    4f70:	8e 7f       	andi	r24, 0xFE	; 254
    4f72:	0b c0       	rjmp	.+22     	; 0x4f8a <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4f74:	8e 3f       	cpi	r24, 0xFE	; 254
    4f76:	21 f4       	brne	.+8      	; 0x4f80 <mousekey_off+0xd6>
    4f78:	80 91 49 03 	lds	r24, 0x0349
    4f7c:	8d 7f       	andi	r24, 0xFD	; 253
    4f7e:	05 c0       	rjmp	.+10     	; 0x4f8a <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4f80:	8f 3f       	cpi	r24, 0xFF	; 255
    4f82:	29 f4       	brne	.+10     	; 0x4f8e <mousekey_off+0xe4>
    4f84:	80 91 49 03 	lds	r24, 0x0349
    4f88:	8b 7f       	andi	r24, 0xFB	; 251
    4f8a:	80 93 49 03 	sts	0x0349, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4f8e:	80 91 4c 03 	lds	r24, 0x034C
    4f92:	81 11       	cpse	r24, r1
    4f94:	0e c0       	rjmp	.+28     	; 0x4fb2 <mousekey_off+0x108>
    4f96:	80 91 4d 03 	lds	r24, 0x034D
    4f9a:	81 11       	cpse	r24, r1
    4f9c:	0a c0       	rjmp	.+20     	; 0x4fb2 <mousekey_off+0x108>
    4f9e:	80 91 4e 03 	lds	r24, 0x034E
    4fa2:	81 11       	cpse	r24, r1
    4fa4:	06 c0       	rjmp	.+12     	; 0x4fb2 <mousekey_off+0x108>
    4fa6:	80 91 4f 03 	lds	r24, 0x034F
    4faa:	81 11       	cpse	r24, r1
    4fac:	02 c0       	rjmp	.+4      	; 0x4fb2 <mousekey_off+0x108>
        mousekey_repeat = 0;
    4fae:	10 92 4a 03 	sts	0x034A, r1
    4fb2:	08 95       	ret

00004fb4 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4fb4:	80 91 41 03 	lds	r24, 0x0341
    4fb8:	83 ff       	sbrs	r24, 3
    4fba:	7e c0       	rjmp	.+252    	; 0x50b8 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4fbc:	85 e0       	ldi	r24, 0x05	; 5
    4fbe:	97 e0       	ldi	r25, 0x07	; 7
    4fc0:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    phex(mouse_report.buttons); print("|");
    4fc4:	80 91 4b 03 	lds	r24, 0x034B
    4fc8:	1f 92       	push	r1
    4fca:	8f 93       	push	r24
    4fcc:	80 e0       	ldi	r24, 0x00	; 0
    4fce:	97 e0       	ldi	r25, 0x07	; 7
    4fd0:	9f 93       	push	r25
    4fd2:	8f 93       	push	r24
    4fd4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    4fd8:	8e ef       	ldi	r24, 0xFE	; 254
    4fda:	96 e0       	ldi	r25, 0x06	; 6
    4fdc:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    print_decs(mouse_report.x); print(" ");
    4fe0:	20 91 4c 03 	lds	r18, 0x034C
    4fe4:	82 2f       	mov	r24, r18
    4fe6:	99 27       	eor	r25, r25
    4fe8:	87 fd       	sbrc	r24, 7
    4fea:	90 95       	com	r25
    4fec:	9f 93       	push	r25
    4fee:	2f 93       	push	r18
    4ff0:	8b ef       	ldi	r24, 0xFB	; 251
    4ff2:	96 e0       	ldi	r25, 0x06	; 6
    4ff4:	9f 93       	push	r25
    4ff6:	8f 93       	push	r24
    4ff8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    4ffc:	89 ef       	ldi	r24, 0xF9	; 249
    4ffe:	96 e0       	ldi	r25, 0x06	; 6
    5000:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    print_decs(mouse_report.y); print(" ");
    5004:	20 91 4d 03 	lds	r18, 0x034D
    5008:	82 2f       	mov	r24, r18
    500a:	99 27       	eor	r25, r25
    500c:	87 fd       	sbrc	r24, 7
    500e:	90 95       	com	r25
    5010:	9f 93       	push	r25
    5012:	2f 93       	push	r18
    5014:	86 ef       	ldi	r24, 0xF6	; 246
    5016:	96 e0       	ldi	r25, 0x06	; 6
    5018:	9f 93       	push	r25
    501a:	8f 93       	push	r24
    501c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    5020:	84 ef       	ldi	r24, 0xF4	; 244
    5022:	96 e0       	ldi	r25, 0x06	; 6
    5024:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    print_decs(mouse_report.v); print(" ");
    5028:	20 91 4e 03 	lds	r18, 0x034E
    502c:	82 2f       	mov	r24, r18
    502e:	99 27       	eor	r25, r25
    5030:	87 fd       	sbrc	r24, 7
    5032:	90 95       	com	r25
    5034:	9f 93       	push	r25
    5036:	2f 93       	push	r18
    5038:	81 ef       	ldi	r24, 0xF1	; 241
    503a:	96 e0       	ldi	r25, 0x06	; 6
    503c:	9f 93       	push	r25
    503e:	8f 93       	push	r24
    5040:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    5044:	8f ee       	ldi	r24, 0xEF	; 239
    5046:	96 e0       	ldi	r25, 0x06	; 6
    5048:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    print_decs(mouse_report.h); print("](");
    504c:	20 91 4f 03 	lds	r18, 0x034F
    5050:	82 2f       	mov	r24, r18
    5052:	99 27       	eor	r25, r25
    5054:	87 fd       	sbrc	r24, 7
    5056:	90 95       	com	r25
    5058:	9f 93       	push	r25
    505a:	2f 93       	push	r18
    505c:	8c ee       	ldi	r24, 0xEC	; 236
    505e:	96 e0       	ldi	r25, 0x06	; 6
    5060:	9f 93       	push	r25
    5062:	8f 93       	push	r24
    5064:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    5068:	89 ee       	ldi	r24, 0xE9	; 233
    506a:	96 e0       	ldi	r25, 0x06	; 6
    506c:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    print_dec(mousekey_repeat); print("/");
    5070:	80 91 4a 03 	lds	r24, 0x034A
    5074:	1f 92       	push	r1
    5076:	8f 93       	push	r24
    5078:	86 ee       	ldi	r24, 0xE6	; 230
    507a:	96 e0       	ldi	r25, 0x06	; 6
    507c:	9f 93       	push	r25
    507e:	8f 93       	push	r24
    5080:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    5084:	84 ee       	ldi	r24, 0xE4	; 228
    5086:	96 e0       	ldi	r25, 0x06	; 6
    5088:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    print_dec(mousekey_accel); print(")\n");
    508c:	80 91 49 03 	lds	r24, 0x0349
    5090:	1f 92       	push	r1
    5092:	8f 93       	push	r24
    5094:	81 ee       	ldi	r24, 0xE1	; 225
    5096:	96 e0       	ldi	r25, 0x06	; 6
    5098:	9f 93       	push	r25
    509a:	8f 93       	push	r24
    509c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    50a0:	8e ed       	ldi	r24, 0xDE	; 222
    50a2:	96 e0       	ldi	r25, 0x06	; 6
    50a4:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    50a8:	8d b7       	in	r24, 0x3d	; 61
    50aa:	9e b7       	in	r25, 0x3e	; 62
    50ac:	4c 96       	adiw	r24, 0x1c	; 28
    50ae:	0f b6       	in	r0, 0x3f	; 63
    50b0:	f8 94       	cli
    50b2:	9e bf       	out	0x3e, r25	; 62
    50b4:	0f be       	out	0x3f, r0	; 63
    50b6:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    50b8:	8b e4       	ldi	r24, 0x4B	; 75
    50ba:	93 e0       	ldi	r25, 0x03	; 3
    50bc:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <host_mouse_send>
    last_timer = timer_read();
    50c0:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <timer_read>
    50c4:	90 93 48 03 	sts	0x0348, r25
    50c8:	80 93 47 03 	sts	0x0347, r24
    50cc:	08 95       	ret

000050ce <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    50ce:	1f 93       	push	r17
    50d0:	cf 93       	push	r28
    50d2:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    50d4:	80 91 47 03 	lds	r24, 0x0347
    50d8:	90 91 48 03 	lds	r25, 0x0348
    50dc:	0e 94 10 25 	call	0x4a20	; 0x4a20 <timer_elapsed>
    50e0:	40 91 4a 03 	lds	r20, 0x034A
    50e4:	44 23       	and	r20, r20
    50e6:	21 f0       	breq	.+8      	; 0x50f0 <mousekey_task+0x22>
    50e8:	20 91 27 01 	lds	r18, 0x0127
    50ec:	30 e0       	ldi	r19, 0x00	; 0
    50ee:	06 c0       	rjmp	.+12     	; 0x50fc <mousekey_task+0x2e>
    50f0:	20 91 28 01 	lds	r18, 0x0128
    50f4:	5a e0       	ldi	r21, 0x0A	; 10
    50f6:	25 9f       	mul	r18, r21
    50f8:	90 01       	movw	r18, r0
    50fa:	11 24       	eor	r1, r1
    50fc:	82 17       	cp	r24, r18
    50fe:	93 07       	cpc	r25, r19
    5100:	08 f4       	brcc	.+2      	; 0x5104 <mousekey_task+0x36>
    5102:	82 c0       	rjmp	.+260    	; 0x5208 <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    5104:	80 91 4c 03 	lds	r24, 0x034C
    5108:	10 91 4d 03 	lds	r17, 0x034D
    510c:	d0 91 4e 03 	lds	r29, 0x034E
    5110:	c0 91 4f 03 	lds	r28, 0x034F
    5114:	81 11       	cpse	r24, r1
    5116:	07 c0       	rjmp	.+14     	; 0x5126 <mousekey_task+0x58>
    5118:	11 11       	cpse	r17, r1
    511a:	05 c0       	rjmp	.+10     	; 0x5126 <mousekey_task+0x58>
    511c:	d1 11       	cpse	r29, r1
    511e:	03 c0       	rjmp	.+6      	; 0x5126 <mousekey_task+0x58>
    5120:	cc 23       	and	r28, r28
    5122:	09 f4       	brne	.+2      	; 0x5126 <mousekey_task+0x58>
    5124:	71 c0       	rjmp	.+226    	; 0x5208 <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    5126:	4f 3f       	cpi	r20, 0xFF	; 255
    5128:	19 f0       	breq	.+6      	; 0x5130 <mousekey_task+0x62>
        mousekey_repeat++;
    512a:	4f 5f       	subi	r20, 0xFF	; 255
    512c:	40 93 4a 03 	sts	0x034A, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    5130:	18 16       	cp	r1, r24
    5132:	24 f4       	brge	.+8      	; 0x513c <mousekey_task+0x6e>
    5134:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <move_unit>
    5138:	80 93 4c 03 	sts	0x034C, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    513c:	80 91 4c 03 	lds	r24, 0x034C
    5140:	87 ff       	sbrs	r24, 7
    5142:	05 c0       	rjmp	.+10     	; 0x514e <mousekey_task+0x80>
    5144:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <move_unit>
    5148:	81 95       	neg	r24
    514a:	80 93 4c 03 	sts	0x034C, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    514e:	11 16       	cp	r1, r17
    5150:	24 f4       	brge	.+8      	; 0x515a <mousekey_task+0x8c>
    5152:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <move_unit>
    5156:	80 93 4d 03 	sts	0x034D, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    515a:	80 91 4d 03 	lds	r24, 0x034D
    515e:	87 ff       	sbrs	r24, 7
    5160:	05 c0       	rjmp	.+10     	; 0x516c <mousekey_task+0x9e>
    5162:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <move_unit>
    5166:	81 95       	neg	r24
    5168:	80 93 4d 03 	sts	0x034D, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    516c:	60 91 4c 03 	lds	r22, 0x034C
    5170:	66 23       	and	r22, r22
    5172:	39 f1       	breq	.+78     	; 0x51c2 <mousekey_task+0xf4>
    5174:	10 91 4d 03 	lds	r17, 0x034D
    5178:	11 23       	and	r17, r17
    517a:	19 f1       	breq	.+70     	; 0x51c2 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    517c:	77 27       	eor	r23, r23
    517e:	67 fd       	sbrc	r22, 7
    5180:	70 95       	com	r23
    5182:	87 2f       	mov	r24, r23
    5184:	97 2f       	mov	r25, r23
    5186:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <__floatsisf>
    518a:	23 e3       	ldi	r18, 0x33	; 51
    518c:	33 e3       	ldi	r19, 0x33	; 51
    518e:	43 e3       	ldi	r20, 0x33	; 51
    5190:	5f e3       	ldi	r21, 0x3F	; 63
    5192:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <__mulsf3>
    5196:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__fixsfsi>
    519a:	60 93 4c 03 	sts	0x034C, r22
        mouse_report.y *= 0.7;
    519e:	61 2f       	mov	r22, r17
    51a0:	77 27       	eor	r23, r23
    51a2:	67 fd       	sbrc	r22, 7
    51a4:	70 95       	com	r23
    51a6:	87 2f       	mov	r24, r23
    51a8:	97 2f       	mov	r25, r23
    51aa:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <__floatsisf>
    51ae:	23 e3       	ldi	r18, 0x33	; 51
    51b0:	33 e3       	ldi	r19, 0x33	; 51
    51b2:	43 e3       	ldi	r20, 0x33	; 51
    51b4:	5f e3       	ldi	r21, 0x3F	; 63
    51b6:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <__mulsf3>
    51ba:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__fixsfsi>
    51be:	60 93 4d 03 	sts	0x034D, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    51c2:	1d 16       	cp	r1, r29
    51c4:	24 f4       	brge	.+8      	; 0x51ce <mousekey_task+0x100>
    51c6:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <wheel_unit>
    51ca:	80 93 4e 03 	sts	0x034E, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    51ce:	80 91 4e 03 	lds	r24, 0x034E
    51d2:	87 ff       	sbrs	r24, 7
    51d4:	05 c0       	rjmp	.+10     	; 0x51e0 <mousekey_task+0x112>
    51d6:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <wheel_unit>
    51da:	81 95       	neg	r24
    51dc:	80 93 4e 03 	sts	0x034E, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    51e0:	1c 16       	cp	r1, r28
    51e2:	24 f4       	brge	.+8      	; 0x51ec <mousekey_task+0x11e>
    51e4:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <wheel_unit>
    51e8:	80 93 4f 03 	sts	0x034F, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    51ec:	80 91 4f 03 	lds	r24, 0x034F
    51f0:	87 ff       	sbrs	r24, 7
    51f2:	05 c0       	rjmp	.+10     	; 0x51fe <mousekey_task+0x130>
    51f4:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <wheel_unit>
    51f8:	81 95       	neg	r24
    51fa:	80 93 4f 03 	sts	0x034F, r24

    mousekey_send();
}
    51fe:	df 91       	pop	r29
    5200:	cf 91       	pop	r28
    5202:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    5204:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <mousekey_send>
}
    5208:	df 91       	pop	r29
    520a:	cf 91       	pop	r28
    520c:	1f 91       	pop	r17
    520e:	08 95       	ret

00005210 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    5210:	eb e4       	ldi	r30, 0x4B	; 75
    5212:	f3 e0       	ldi	r31, 0x03	; 3
    5214:	85 e0       	ldi	r24, 0x05	; 5
    5216:	df 01       	movw	r26, r30
    5218:	1d 92       	st	X+, r1
    521a:	8a 95       	dec	r24
    521c:	e9 f7       	brne	.-6      	; 0x5218 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    521e:	10 92 4a 03 	sts	0x034A, r1
    mousekey_accel = 0;
    5222:	10 92 49 03 	sts	0x0349, r1
    5226:	08 95       	ret

00005228 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    5228:	88 e2       	ldi	r24, 0x28	; 40
    522a:	99 e0       	ldi	r25, 0x09	; 9
    522c:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    5230:	1f 92       	push	r1
    5232:	81 e0       	ldi	r24, 0x01	; 1
    5234:	8f 93       	push	r24
    5236:	1f 92       	push	r1
    5238:	85 e0       	ldi	r24, 0x05	; 5
    523a:	8f 93       	push	r24
    523c:	8a ed       	ldi	r24, 0xDA	; 218
    523e:	98 e0       	ldi	r25, 0x08	; 8
    5240:	9f 93       	push	r25
    5242:	8f 93       	push	r24
    5244:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    5248:	0f 90       	pop	r0
    524a:	0f 90       	pop	r0
    524c:	0f 90       	pop	r0
    524e:	0f 90       	pop	r0
    5250:	0f 90       	pop	r0
    5252:	0f 90       	pop	r0
    5254:	08 95       	ret

00005256 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    5256:	83 30       	cpi	r24, 0x03	; 3
    5258:	e9 f1       	breq	.+122    	; 0x52d4 <mousekey_param_inc+0x7e>
    525a:	28 f4       	brcc	.+10     	; 0x5266 <mousekey_param_inc+0x10>
    525c:	81 30       	cpi	r24, 0x01	; 1
    525e:	61 f0       	breq	.+24     	; 0x5278 <mousekey_param_inc+0x22>
    5260:	82 30       	cpi	r24, 0x02	; 2
    5262:	09 f1       	breq	.+66     	; 0x52a6 <mousekey_param_inc+0x50>
    5264:	08 95       	ret
    5266:	85 30       	cpi	r24, 0x05	; 5
    5268:	09 f4       	brne	.+2      	; 0x526c <mousekey_param_inc+0x16>
    526a:	62 c0       	rjmp	.+196    	; 0x5330 <mousekey_param_inc+0xda>
    526c:	08 f4       	brcc	.+2      	; 0x5270 <mousekey_param_inc+0x1a>
    526e:	49 c0       	rjmp	.+146    	; 0x5302 <mousekey_param_inc+0xac>
    5270:	86 30       	cpi	r24, 0x06	; 6
    5272:	09 f4       	brne	.+2      	; 0x5276 <mousekey_param_inc+0x20>
    5274:	74 c0       	rjmp	.+232    	; 0x535e <mousekey_param_inc+0x108>
    5276:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    5278:	20 91 28 01 	lds	r18, 0x0128
    527c:	86 2f       	mov	r24, r22
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	82 0f       	add	r24, r18
    5282:	91 1d       	adc	r25, r1
    5284:	8f 3f       	cpi	r24, 0xFF	; 255
    5286:	91 05       	cpc	r25, r1
    5288:	20 f4       	brcc	.+8      	; 0x5292 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    528a:	62 0f       	add	r22, r18
    528c:	60 93 28 01 	sts	0x0128, r22
    5290:	03 c0       	rjmp	.+6      	; 0x5298 <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    5292:	8f ef       	ldi	r24, 0xFF	; 255
    5294:	80 93 28 01 	sts	0x0128, r24
            PRINT_SET_VAL(mk_delay);
    5298:	80 91 28 01 	lds	r24, 0x0128
    529c:	1f 92       	push	r1
    529e:	8f 93       	push	r24
    52a0:	83 e1       	ldi	r24, 0x13	; 19
    52a2:	98 e0       	ldi	r25, 0x08	; 8
    52a4:	72 c0       	rjmp	.+228    	; 0x538a <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    52a6:	20 91 27 01 	lds	r18, 0x0127
    52aa:	86 2f       	mov	r24, r22
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	82 0f       	add	r24, r18
    52b0:	91 1d       	adc	r25, r1
    52b2:	8f 3f       	cpi	r24, 0xFF	; 255
    52b4:	91 05       	cpc	r25, r1
    52b6:	20 f4       	brcc	.+8      	; 0x52c0 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    52b8:	62 0f       	add	r22, r18
    52ba:	60 93 27 01 	sts	0x0127, r22
    52be:	03 c0       	rjmp	.+6      	; 0x52c6 <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    52c0:	8f ef       	ldi	r24, 0xFF	; 255
    52c2:	80 93 27 01 	sts	0x0127, r24
            PRINT_SET_VAL(mk_interval);
    52c6:	80 91 27 01 	lds	r24, 0x0127
    52ca:	1f 92       	push	r1
    52cc:	8f 93       	push	r24
    52ce:	81 e0       	ldi	r24, 0x01	; 1
    52d0:	98 e0       	ldi	r25, 0x08	; 8
    52d2:	5b c0       	rjmp	.+182    	; 0x538a <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    52d4:	20 91 26 01 	lds	r18, 0x0126
    52d8:	86 2f       	mov	r24, r22
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	82 0f       	add	r24, r18
    52de:	91 1d       	adc	r25, r1
    52e0:	8f 3f       	cpi	r24, 0xFF	; 255
    52e2:	91 05       	cpc	r25, r1
    52e4:	20 f4       	brcc	.+8      	; 0x52ee <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    52e6:	62 0f       	add	r22, r18
    52e8:	60 93 26 01 	sts	0x0126, r22
    52ec:	03 c0       	rjmp	.+6      	; 0x52f4 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    52ee:	8f ef       	ldi	r24, 0xFF	; 255
    52f0:	80 93 26 01 	sts	0x0126, r24
            PRINT_SET_VAL(mk_max_speed);
    52f4:	80 91 26 01 	lds	r24, 0x0126
    52f8:	1f 92       	push	r1
    52fa:	8f 93       	push	r24
    52fc:	8e ee       	ldi	r24, 0xEE	; 238
    52fe:	97 e0       	ldi	r25, 0x07	; 7
    5300:	44 c0       	rjmp	.+136    	; 0x538a <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    5302:	20 91 25 01 	lds	r18, 0x0125
    5306:	86 2f       	mov	r24, r22
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	82 0f       	add	r24, r18
    530c:	91 1d       	adc	r25, r1
    530e:	8f 3f       	cpi	r24, 0xFF	; 255
    5310:	91 05       	cpc	r25, r1
    5312:	20 f4       	brcc	.+8      	; 0x531c <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    5314:	62 0f       	add	r22, r18
    5316:	60 93 25 01 	sts	0x0125, r22
    531a:	03 c0       	rjmp	.+6      	; 0x5322 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    531c:	8f ef       	ldi	r24, 0xFF	; 255
    531e:	80 93 25 01 	sts	0x0125, r24
            PRINT_SET_VAL(mk_time_to_max);
    5322:	80 91 25 01 	lds	r24, 0x0125
    5326:	1f 92       	push	r1
    5328:	8f 93       	push	r24
    532a:	89 ed       	ldi	r24, 0xD9	; 217
    532c:	97 e0       	ldi	r25, 0x07	; 7
    532e:	2d c0       	rjmp	.+90     	; 0x538a <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    5330:	20 91 24 01 	lds	r18, 0x0124
    5334:	86 2f       	mov	r24, r22
    5336:	90 e0       	ldi	r25, 0x00	; 0
    5338:	82 0f       	add	r24, r18
    533a:	91 1d       	adc	r25, r1
    533c:	8f 3f       	cpi	r24, 0xFF	; 255
    533e:	91 05       	cpc	r25, r1
    5340:	20 f4       	brcc	.+8      	; 0x534a <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    5342:	62 0f       	add	r22, r18
    5344:	60 93 24 01 	sts	0x0124, r22
    5348:	03 c0       	rjmp	.+6      	; 0x5350 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    534a:	8f ef       	ldi	r24, 0xFF	; 255
    534c:	80 93 24 01 	sts	0x0124, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    5350:	80 91 24 01 	lds	r24, 0x0124
    5354:	1f 92       	push	r1
    5356:	8f 93       	push	r24
    5358:	80 ec       	ldi	r24, 0xC0	; 192
    535a:	97 e0       	ldi	r25, 0x07	; 7
    535c:	16 c0       	rjmp	.+44     	; 0x538a <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    535e:	20 91 23 01 	lds	r18, 0x0123
    5362:	86 2f       	mov	r24, r22
    5364:	90 e0       	ldi	r25, 0x00	; 0
    5366:	82 0f       	add	r24, r18
    5368:	91 1d       	adc	r25, r1
    536a:	8f 3f       	cpi	r24, 0xFF	; 255
    536c:	91 05       	cpc	r25, r1
    536e:	20 f4       	brcc	.+8      	; 0x5378 <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    5370:	62 0f       	add	r22, r18
    5372:	60 93 23 01 	sts	0x0123, r22
    5376:	03 c0       	rjmp	.+6      	; 0x537e <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    5378:	8f ef       	ldi	r24, 0xFF	; 255
    537a:	80 93 23 01 	sts	0x0123, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    537e:	80 91 23 01 	lds	r24, 0x0123
    5382:	1f 92       	push	r1
    5384:	8f 93       	push	r24
    5386:	85 ea       	ldi	r24, 0xA5	; 165
    5388:	97 e0       	ldi	r25, 0x07	; 7
    538a:	9f 93       	push	r25
    538c:	8f 93       	push	r24
    538e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            break;
    5392:	0f 90       	pop	r0
    5394:	0f 90       	pop	r0
    5396:	0f 90       	pop	r0
    5398:	0f 90       	pop	r0
    539a:	08 95       	ret

0000539c <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    539c:	83 30       	cpi	r24, 0x03	; 3
    539e:	81 f1       	breq	.+96     	; 0x5400 <mousekey_param_dec+0x64>
    53a0:	28 f4       	brcc	.+10     	; 0x53ac <mousekey_param_dec+0x10>
    53a2:	81 30       	cpi	r24, 0x01	; 1
    53a4:	59 f0       	breq	.+22     	; 0x53bc <mousekey_param_dec+0x20>
    53a6:	82 30       	cpi	r24, 0x02	; 2
    53a8:	d1 f0       	breq	.+52     	; 0x53de <mousekey_param_dec+0x42>
    53aa:	08 95       	ret
    53ac:	85 30       	cpi	r24, 0x05	; 5
    53ae:	09 f4       	brne	.+2      	; 0x53b2 <mousekey_param_dec+0x16>
    53b0:	49 c0       	rjmp	.+146    	; 0x5444 <mousekey_param_dec+0xa8>
    53b2:	b8 f1       	brcs	.+110    	; 0x5422 <mousekey_param_dec+0x86>
    53b4:	86 30       	cpi	r24, 0x06	; 6
    53b6:	09 f4       	brne	.+2      	; 0x53ba <mousekey_param_dec+0x1e>
    53b8:	56 c0       	rjmp	.+172    	; 0x5466 <mousekey_param_dec+0xca>
    53ba:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    53bc:	80 91 28 01 	lds	r24, 0x0128
    53c0:	68 17       	cp	r22, r24
    53c2:	20 f4       	brcc	.+8      	; 0x53cc <mousekey_param_dec+0x30>
                mk_delay -= dec;
    53c4:	86 1b       	sub	r24, r22
    53c6:	80 93 28 01 	sts	0x0128, r24
    53ca:	02 c0       	rjmp	.+4      	; 0x53d0 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    53cc:	10 92 28 01 	sts	0x0128, r1
            PRINT_SET_VAL(mk_delay);
    53d0:	80 91 28 01 	lds	r24, 0x0128
    53d4:	1f 92       	push	r1
    53d6:	8f 93       	push	r24
    53d8:	86 e9       	ldi	r24, 0x96	; 150
    53da:	97 e0       	ldi	r25, 0x07	; 7
    53dc:	54 c0       	rjmp	.+168    	; 0x5486 <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    53de:	80 91 27 01 	lds	r24, 0x0127
    53e2:	68 17       	cp	r22, r24
    53e4:	20 f4       	brcc	.+8      	; 0x53ee <mousekey_param_dec+0x52>
                mk_interval -= dec;
    53e6:	86 1b       	sub	r24, r22
    53e8:	80 93 27 01 	sts	0x0127, r24
    53ec:	02 c0       	rjmp	.+4      	; 0x53f2 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    53ee:	10 92 27 01 	sts	0x0127, r1
            PRINT_SET_VAL(mk_interval);
    53f2:	80 91 27 01 	lds	r24, 0x0127
    53f6:	1f 92       	push	r1
    53f8:	8f 93       	push	r24
    53fa:	84 e8       	ldi	r24, 0x84	; 132
    53fc:	97 e0       	ldi	r25, 0x07	; 7
    53fe:	43 c0       	rjmp	.+134    	; 0x5486 <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    5400:	80 91 26 01 	lds	r24, 0x0126
    5404:	68 17       	cp	r22, r24
    5406:	20 f4       	brcc	.+8      	; 0x5410 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    5408:	86 1b       	sub	r24, r22
    540a:	80 93 26 01 	sts	0x0126, r24
    540e:	02 c0       	rjmp	.+4      	; 0x5414 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    5410:	10 92 26 01 	sts	0x0126, r1
            PRINT_SET_VAL(mk_max_speed);
    5414:	80 91 26 01 	lds	r24, 0x0126
    5418:	1f 92       	push	r1
    541a:	8f 93       	push	r24
    541c:	81 e7       	ldi	r24, 0x71	; 113
    541e:	97 e0       	ldi	r25, 0x07	; 7
    5420:	32 c0       	rjmp	.+100    	; 0x5486 <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    5422:	80 91 25 01 	lds	r24, 0x0125
    5426:	68 17       	cp	r22, r24
    5428:	20 f4       	brcc	.+8      	; 0x5432 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    542a:	86 1b       	sub	r24, r22
    542c:	80 93 25 01 	sts	0x0125, r24
    5430:	02 c0       	rjmp	.+4      	; 0x5436 <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    5432:	10 92 25 01 	sts	0x0125, r1
            PRINT_SET_VAL(mk_time_to_max);
    5436:	80 91 25 01 	lds	r24, 0x0125
    543a:	1f 92       	push	r1
    543c:	8f 93       	push	r24
    543e:	8c e5       	ldi	r24, 0x5C	; 92
    5440:	97 e0       	ldi	r25, 0x07	; 7
    5442:	21 c0       	rjmp	.+66     	; 0x5486 <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    5444:	80 91 24 01 	lds	r24, 0x0124
    5448:	68 17       	cp	r22, r24
    544a:	20 f4       	brcc	.+8      	; 0x5454 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    544c:	86 1b       	sub	r24, r22
    544e:	80 93 24 01 	sts	0x0124, r24
    5452:	02 c0       	rjmp	.+4      	; 0x5458 <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    5454:	10 92 24 01 	sts	0x0124, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    5458:	80 91 24 01 	lds	r24, 0x0124
    545c:	1f 92       	push	r1
    545e:	8f 93       	push	r24
    5460:	83 e4       	ldi	r24, 0x43	; 67
    5462:	97 e0       	ldi	r25, 0x07	; 7
    5464:	10 c0       	rjmp	.+32     	; 0x5486 <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    5466:	80 91 23 01 	lds	r24, 0x0123
    546a:	68 17       	cp	r22, r24
    546c:	20 f4       	brcc	.+8      	; 0x5476 <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    546e:	86 1b       	sub	r24, r22
    5470:	80 93 23 01 	sts	0x0123, r24
    5474:	02 c0       	rjmp	.+4      	; 0x547a <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    5476:	10 92 23 01 	sts	0x0123, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    547a:	80 91 23 01 	lds	r24, 0x0123
    547e:	1f 92       	push	r1
    5480:	8f 93       	push	r24
    5482:	88 e2       	ldi	r24, 0x28	; 40
    5484:	97 e0       	ldi	r25, 0x07	; 7
    5486:	9f 93       	push	r25
    5488:	8f 93       	push	r24
    548a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            break;
    548e:	0f 90       	pop	r0
    5490:	0f 90       	pop	r0
    5492:	0f 90       	pop	r0
    5494:	0f 90       	pop	r0
    5496:	08 95       	ret

00005498 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    5498:	cf 93       	push	r28
    549a:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    549c:	1f 92       	push	r1
    549e:	8f 93       	push	r24
    54a0:	2d e2       	ldi	r18, 0x2D	; 45
    54a2:	3a e0       	ldi	r19, 0x0A	; 10
    54a4:	3f 93       	push	r19
    54a6:	2f 93       	push	r18
    54a8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    default_layer_set(1UL<<layer);
    54ac:	61 e0       	ldi	r22, 0x01	; 1
    54ae:	70 e0       	ldi	r23, 0x00	; 0
    54b0:	80 e0       	ldi	r24, 0x00	; 0
    54b2:	90 e0       	ldi	r25, 0x00	; 0
    54b4:	04 c0       	rjmp	.+8      	; 0x54be <switch_default_layer+0x26>
    54b6:	66 0f       	add	r22, r22
    54b8:	77 1f       	adc	r23, r23
    54ba:	88 1f       	adc	r24, r24
    54bc:	99 1f       	adc	r25, r25
    54be:	ca 95       	dec	r28
    54c0:	d2 f7       	brpl	.-12     	; 0x54b6 <switch_default_layer+0x1e>
    54c2:	0e 94 5e 22 	call	0x44bc	; 0x44bc <default_layer_set>
    clear_keyboard();
    54c6:	0f 90       	pop	r0
    54c8:	0f 90       	pop	r0
    54ca:	0f 90       	pop	r0
    54cc:	0f 90       	pop	r0
}
    54ce:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    54d0:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <clear_keyboard>

000054d4 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    54d4:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    54d6:	87 32       	cpi	r24, 0x27	; 39
    54d8:	88 f5       	brcc	.+98     	; 0x553c <command_common+0x68>
    54da:	8e 31       	cpi	r24, 0x1E	; 30
    54dc:	08 f0       	brcs	.+2      	; 0x54e0 <command_common+0xc>
    54de:	08 c1       	rjmp	.+528    	; 0x56f0 <command_common+0x21c>
    54e0:	8e 30       	cpi	r24, 0x0E	; 14
    54e2:	09 f4       	brne	.+2      	; 0x54e6 <command_common+0x12>
    54e4:	86 c0       	rjmp	.+268    	; 0x55f2 <command_common+0x11e>
    54e6:	d8 f4       	brcc	.+54     	; 0x551e <command_common+0x4a>
    54e8:	87 30       	cpi	r24, 0x07	; 7
    54ea:	09 f4       	brne	.+2      	; 0x54ee <command_common+0x1a>
    54ec:	60 c0       	rjmp	.+192    	; 0x55ae <command_common+0xda>
    54ee:	8b 30       	cpi	r24, 0x0B	; 11
    54f0:	09 f4       	brne	.+2      	; 0x54f4 <command_common+0x20>
    54f2:	4f c0       	rjmp	.+158    	; 0x5592 <command_common+0xbe>
    54f4:	86 30       	cpi	r24, 0x06	; 6
    54f6:	09 f0       	breq	.+2      	; 0x54fa <command_common+0x26>
    54f8:	ff c0       	rjmp	.+510    	; 0x56f8 <command_common+0x224>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    54fa:	80 91 41 03 	lds	r24, 0x0341
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    54fe:	81 7f       	andi	r24, 0xF1	; 241
    5500:	8e 7f       	andi	r24, 0xFE	; 254
    5502:	80 93 41 03 	sts	0x0341, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    5506:	82 e3       	ldi	r24, 0x32	; 50
    5508:	9a e0       	ldi	r25, 0x0A	; 10
    550a:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    550e:	82 ed       	ldi	r24, 0xD2	; 210
    5510:	9c e0       	ldi	r25, 0x0C	; 12
    5512:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            command_state = CONSOLE;
    5516:	81 e0       	ldi	r24, 0x01	; 1
    5518:	80 93 51 03 	sts	0x0351, r24
    551c:	46 c0       	rjmp	.+140    	; 0x55aa <command_common+0xd6>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    551e:	86 31       	cpi	r24, 0x16	; 22
    5520:	09 f4       	brne	.+2      	; 0x5524 <command_common+0x50>
    5522:	ad c0       	rjmp	.+346    	; 0x567e <command_common+0x1aa>
    5524:	20 f4       	brcc	.+8      	; 0x552e <command_common+0x5a>
    5526:	80 31       	cpi	r24, 0x10	; 16
    5528:	09 f4       	brne	.+2      	; 0x552c <command_common+0x58>
    552a:	78 c0       	rjmp	.+240    	; 0x561c <command_common+0x148>
    552c:	e5 c0       	rjmp	.+458    	; 0x56f8 <command_common+0x224>
    552e:	89 31       	cpi	r24, 0x19	; 25
    5530:	09 f4       	brne	.+2      	; 0x5534 <command_common+0x60>
    5532:	8e c0       	rjmp	.+284    	; 0x5650 <command_common+0x17c>
    5534:	8b 31       	cpi	r24, 0x1B	; 27
    5536:	09 f4       	brne	.+2      	; 0x553a <command_common+0x66>
    5538:	49 c0       	rjmp	.+146    	; 0x55cc <command_common+0xf8>
    553a:	de c0       	rjmp	.+444    	; 0x56f8 <command_common+0x224>
    553c:	88 33       	cpi	r24, 0x38	; 56
    553e:	49 f1       	breq	.+82     	; 0x5592 <command_common+0xbe>
    5540:	50 f4       	brcc	.+20     	; 0x5556 <command_common+0x82>
    5542:	89 32       	cpi	r24, 0x29	; 41
    5544:	09 f4       	brne	.+2      	; 0x5548 <command_common+0x74>
    5546:	d2 c0       	rjmp	.+420    	; 0x56ec <command_common+0x218>
    5548:	85 33       	cpi	r24, 0x35	; 53
    554a:	09 f4       	brne	.+2      	; 0x554e <command_common+0x7a>
    554c:	cf c0       	rjmp	.+414    	; 0x56ec <command_common+0x218>
    554e:	87 32       	cpi	r24, 0x27	; 39
    5550:	09 f0       	breq	.+2      	; 0x5554 <command_common+0x80>
    5552:	d2 c0       	rjmp	.+420    	; 0x56f8 <command_common+0x224>
    5554:	cb c0       	rjmp	.+406    	; 0x56ec <command_common+0x218>
    5556:	83 34       	cpi	r24, 0x43	; 67
    5558:	09 f4       	brne	.+2      	; 0x555c <command_common+0x88>
    555a:	c8 c0       	rjmp	.+400    	; 0x56ec <command_common+0x218>
    555c:	28 f4       	brcc	.+10     	; 0x5568 <command_common+0x94>
    555e:	8a 33       	cpi	r24, 0x3A	; 58
    5560:	08 f4       	brcc	.+2      	; 0x5564 <command_common+0x90>
    5562:	ca c0       	rjmp	.+404    	; 0x56f8 <command_common+0x224>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    5564:	89 53       	subi	r24, 0x39	; 57
    5566:	c5 c0       	rjmp	.+394    	; 0x56f2 <command_common+0x21e>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    5568:	88 34       	cpi	r24, 0x48	; 72
    556a:	09 f0       	breq	.+2      	; 0x556e <command_common+0x9a>
    556c:	c5 c0       	rjmp	.+394    	; 0x56f8 <command_common+0x224>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    556e:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <clear_keyboard>
            print("\n\nbootloader... ");
    5572:	81 ec       	ldi	r24, 0xC1	; 193
    5574:	9c e0       	ldi	r25, 0x0C	; 12
    5576:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    557a:	2f ef       	ldi	r18, 0xFF	; 255
    557c:	83 ed       	ldi	r24, 0xD3	; 211
    557e:	90 e3       	ldi	r25, 0x30	; 48
    5580:	21 50       	subi	r18, 0x01	; 1
    5582:	80 40       	sbci	r24, 0x00	; 0
    5584:	90 40       	sbci	r25, 0x00	; 0
    5586:	e1 f7       	brne	.-8      	; 0x5580 <command_common+0xac>
    5588:	00 c0       	rjmp	.+0      	; 0x558a <command_common+0xb6>
    558a:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    558c:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <bootloader_jump>
    5590:	0c c0       	rjmp	.+24     	; 0x55aa <command_common+0xd6>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    5592:	89 e5       	ldi	r24, 0x59	; 89
    5594:	9a e0       	ldi	r25, 0x0A	; 10
    5596:	3f c0       	rjmp	.+126    	; 0x5616 <command_common+0x142>
                debug_matrix   = false;
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
            } else {
                print("\ndebug: on\n");
    5598:	88 ea       	ldi	r24, 0xA8	; 168
    559a:	9c e0       	ldi	r25, 0x0C	; 12
    559c:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
                debug_enable   = true;
    55a0:	80 91 41 03 	lds	r24, 0x0341
    55a4:	81 60       	ori	r24, 0x01	; 1
    55a6:	80 93 41 03 	sts	0x0341, r24
            break;
        default:
            print("?");
            return false;
    }
    return true;
    55aa:	c1 e0       	ldi	r28, 0x01	; 1
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
    55ac:	aa c0       	rjmp	.+340    	; 0x5702 <command_common+0x22e>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    55ae:	80 91 41 03 	lds	r24, 0x0341
    55b2:	c8 2f       	mov	r28, r24
    55b4:	c1 70       	andi	r28, 0x01	; 1
    55b6:	80 ff       	sbrs	r24, 0
    55b8:	ef cf       	rjmp	.-34     	; 0x5598 <command_common+0xc4>
                print("\ndebug: off\n");
    55ba:	84 eb       	ldi	r24, 0xB4	; 180
    55bc:	9c e0       	ldi	r25, 0x0C	; 12
    55be:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
                debug_matrix   = false;
    55c2:	80 91 41 03 	lds	r24, 0x0341
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    55c6:	81 7f       	andi	r24, 0xF1	; 241
    55c8:	8e 7f       	andi	r24, 0xFE	; 254
    55ca:	3c c0       	rjmp	.+120    	; 0x5644 <command_common+0x170>
                print("\ndebug: on\n");
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    55cc:	80 91 41 03 	lds	r24, 0x0341
    55d0:	81 fb       	bst	r24, 1
    55d2:	cc 27       	eor	r28, r28
    55d4:	c0 f9       	bld	r28, 0
    55d6:	91 e0       	ldi	r25, 0x01	; 1
    55d8:	c9 27       	eor	r28, r25
    55da:	c0 fb       	bst	r28, 0
    55dc:	81 f9       	bld	r24, 1
    55de:	80 93 41 03 	sts	0x0341, r24
            if (debug_matrix) {
    55e2:	cc 23       	and	r28, r28
    55e4:	19 f0       	breq	.+6      	; 0x55ec <command_common+0x118>
                print("\nmatrix: on\n");
    55e6:	8b e9       	ldi	r24, 0x9B	; 155
    55e8:	9c e0       	ldi	r25, 0x0C	; 12
    55ea:	27 c0       	rjmp	.+78     	; 0x563a <command_common+0x166>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    55ec:	8d e8       	ldi	r24, 0x8D	; 141
    55ee:	9c e0       	ldi	r25, 0x0C	; 12
    55f0:	12 c0       	rjmp	.+36     	; 0x5616 <command_common+0x142>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    55f2:	80 91 41 03 	lds	r24, 0x0341
    55f6:	82 fb       	bst	r24, 2
    55f8:	cc 27       	eor	r28, r28
    55fa:	c0 f9       	bld	r28, 0
    55fc:	91 e0       	ldi	r25, 0x01	; 1
    55fe:	c9 27       	eor	r28, r25
    5600:	c0 fb       	bst	r28, 0
    5602:	82 f9       	bld	r24, 2
    5604:	80 93 41 03 	sts	0x0341, r24
            if (debug_keyboard) {
    5608:	cc 23       	and	r28, r28
    560a:	19 f0       	breq	.+6      	; 0x5612 <command_common+0x13e>
                print("\nkeyboard: on\n");
    560c:	8e e7       	ldi	r24, 0x7E	; 126
    560e:	9c e0       	ldi	r25, 0x0C	; 12
    5610:	14 c0       	rjmp	.+40     	; 0x563a <command_common+0x166>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    5612:	8e e6       	ldi	r24, 0x6E	; 110
    5614:	9c e0       	ldi	r25, 0x0C	; 12
    5616:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    561a:	c7 cf       	rjmp	.-114    	; 0x55aa <command_common+0xd6>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    561c:	80 91 41 03 	lds	r24, 0x0341
    5620:	83 fb       	bst	r24, 3
    5622:	cc 27       	eor	r28, r28
    5624:	c0 f9       	bld	r28, 0
    5626:	91 e0       	ldi	r25, 0x01	; 1
    5628:	c9 27       	eor	r28, r25
    562a:	c0 fb       	bst	r28, 0
    562c:	83 f9       	bld	r24, 3
    562e:	80 93 41 03 	sts	0x0341, r24
            if (debug_mouse) {
    5632:	cc 23       	and	r28, r28
    5634:	51 f0       	breq	.+20     	; 0x564a <command_common+0x176>
                print("\nmouse: on\n");
    5636:	82 e6       	ldi	r24, 0x62	; 98
    5638:	9c e0       	ldi	r25, 0x0C	; 12
    563a:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
                debug_enable = true;
    563e:	80 91 41 03 	lds	r24, 0x0341
    5642:	81 60       	ori	r24, 0x01	; 1
    5644:	80 93 41 03 	sts	0x0341, r24
    5648:	5c c0       	rjmp	.+184    	; 0x5702 <command_common+0x22e>
            } else {
                print("\nmouse: off\n");
    564a:	85 e5       	ldi	r24, 0x55	; 85
    564c:	9c e0       	ldi	r25, 0x0C	; 12
    564e:	e3 cf       	rjmp	.-58     	; 0x5616 <command_common+0x142>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    5650:	86 e4       	ldi	r24, 0x46	; 70
    5652:	9c e0       	ldi	r25, 0x0C	; 12
    5654:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    5658:	89 e1       	ldi	r24, 0x19	; 25
    565a:	9c e0       	ldi	r25, 0x0C	; 12
    565c:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    5660:	82 ee       	ldi	r24, 0xE2	; 226
    5662:	9b e0       	ldi	r25, 0x0B	; 11
    5664:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    5668:	8b eb       	ldi	r24, 0xBB	; 187
    566a:	9b e0       	ldi	r25, 0x0B	; 11
    566c:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            /* build options */
            print("OPTIONS:"
    5670:	85 e8       	ldi	r24, 0x85	; 133
    5672:	9b e0       	ldi	r25, 0x0B	; 11
    5674:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    5678:	87 e5       	ldi	r24, 0x57	; 87
    567a:	9b e0       	ldi	r25, 0x0B	; 11
    567c:	cc cf       	rjmp	.-104    	; 0x5616 <command_common+0x142>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    567e:	89 e4       	ldi	r24, 0x49	; 73
    5680:	9b e0       	ldi	r25, 0x0B	; 11
    5682:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            print_val_hex8(host_keyboard_leds());
    5686:	0e 94 1a 18 	call	0x3034	; 0x3034 <host_keyboard_leds>
    568a:	1f 92       	push	r1
    568c:	8f 93       	push	r24
    568e:	8f e2       	ldi	r24, 0x2F	; 47
    5690:	9b e0       	ldi	r25, 0x0B	; 11
    5692:	9f 93       	push	r25
    5694:	8f 93       	push	r24
    5696:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            print_val_hex8(keyboard_protocol);
    569a:	80 91 20 01 	lds	r24, 0x0120
    569e:	1f 92       	push	r1
    56a0:	8f 93       	push	r24
    56a2:	88 e1       	ldi	r24, 0x18	; 24
    56a4:	9b e0       	ldi	r25, 0x0B	; 11
    56a6:	9f 93       	push	r25
    56a8:	8f 93       	push	r24
    56aa:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
            print_val_hex8(keyboard_idle);
    56ae:	80 91 e4 02 	lds	r24, 0x02E4
    56b2:	1f 92       	push	r1
    56b4:	8f 93       	push	r24
    56b6:	85 e0       	ldi	r24, 0x05	; 5
    56b8:	9b e0       	ldi	r25, 0x0B	; 11
    56ba:	9f 93       	push	r25
    56bc:	8f 93       	push	r24
    56be:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
#endif
            print_val_hex32(timer_read32());
    56c2:	0e 94 04 25 	call	0x4a08	; 0x4a08 <timer_read32>
    56c6:	9f 93       	push	r25
    56c8:	8f 93       	push	r24
    56ca:	7f 93       	push	r23
    56cc:	6f 93       	push	r22
    56ce:	8e ee       	ldi	r24, 0xEE	; 238
    56d0:	9a e0       	ldi	r25, 0x0A	; 10
    56d2:	9f 93       	push	r25
    56d4:	8f 93       	push	r24
    56d6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    56da:	8d b7       	in	r24, 0x3d	; 61
    56dc:	9e b7       	in	r25, 0x3e	; 62
    56de:	42 96       	adiw	r24, 0x12	; 18
    56e0:	0f b6       	in	r0, 0x3f	; 63
    56e2:	f8 94       	cli
    56e4:	9e bf       	out	0x3e, r25	; 62
    56e6:	0f be       	out	0x3f, r0	; 63
    56e8:	8d bf       	out	0x3d, r24	; 61
    56ea:	5f cf       	rjmp	.-322    	; 0x55aa <command_common+0xd6>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    56ec:	80 e0       	ldi	r24, 0x00	; 0
    56ee:	01 c0       	rjmp	.+2      	; 0x56f2 <command_common+0x21e>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    56f0:	8d 51       	subi	r24, 0x1D	; 29
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    56f2:	0e 94 4c 2a 	call	0x5498	; 0x5498 <switch_default_layer>
    56f6:	59 cf       	rjmp	.-334    	; 0x55aa <command_common+0xd6>
            break;
        default:
            print("?");
    56f8:	8c ee       	ldi	r24, 0xEC	; 236
    56fa:	9a e0       	ldi	r25, 0x0A	; 10
    56fc:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            return false;
    5700:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    5702:	8c 2f       	mov	r24, r28
    5704:	cf 91       	pop	r28
    5706:	08 95       	ret

00005708 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    5708:	cf 93       	push	r28
    570a:	c8 2f       	mov	r28, r24
    switch (command_state) {
    570c:	80 91 51 03 	lds	r24, 0x0351
    5710:	81 30       	cpi	r24, 0x01	; 1
    5712:	71 f0       	breq	.+28     	; 0x5730 <command_proc+0x28>
    5714:	20 f0       	brcs	.+8      	; 0x571e <command_proc+0x16>
    5716:	82 30       	cpi	r24, 0x02	; 2
    5718:	09 f4       	brne	.+2      	; 0x571c <command_proc+0x14>
    571a:	48 c0       	rjmp	.+144    	; 0x57ac <command_proc+0xa4>
    571c:	3f c1       	rjmp	.+638    	; 0x599c <command_proc+0x294>
        case ONESHOT:
            if (!IS_COMMAND())
    571e:	a0 91 21 01 	lds	r26, 0x0121
    5722:	b0 91 22 01 	lds	r27, 0x0122
    5726:	8c 91       	ld	r24, X
    5728:	82 32       	cpi	r24, 0x22	; 34
    572a:	09 f0       	breq	.+2      	; 0x572e <command_proc+0x26>
    572c:	39 c1       	rjmp	.+626    	; 0x59a0 <command_proc+0x298>
    572e:	07 c0       	rjmp	.+14     	; 0x573e <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    5730:	a0 91 21 01 	lds	r26, 0x0121
    5734:	b0 91 22 01 	lds	r27, 0x0122
    5738:	8c 91       	ld	r24, X
    573a:	82 32       	cpi	r24, 0x22	; 34
    573c:	49 f4       	brne	.+18     	; 0x5750 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    573e:	8c 2f       	mov	r24, r28
    5740:	0e 94 ef 0b 	call	0x17de	; 0x17de <command_extra>
    5744:	81 11       	cpse	r24, r1
    5746:	2f c0       	rjmp	.+94     	; 0x57a6 <command_proc+0x9e>
    5748:	8c 2f       	mov	r24, r28
    574a:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <command_common>
    574e:	2c c0       	rjmp	.+88     	; 0x57a8 <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    5750:	8c 2f       	mov	r24, r28
    5752:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <command_console_extra>
    5756:	81 11       	cpse	r24, r1
    5758:	26 c0       	rjmp	.+76     	; 0x57a6 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    575a:	c4 31       	cpi	r28, 0x14	; 20
    575c:	e1 f0       	breq	.+56     	; 0x5796 <command_proc+0x8e>
    575e:	70 f4       	brcc	.+28     	; 0x577c <command_proc+0x74>
    5760:	cb 30       	cpi	r28, 0x0B	; 11
    5762:	81 f0       	breq	.+32     	; 0x5784 <command_proc+0x7c>
    5764:	c0 31       	cpi	r28, 0x10	; 16
    5766:	d1 f4       	brne	.+52     	; 0x579c <command_proc+0x94>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    5768:	0e 94 14 29 	call	0x5228	; 0x5228 <mousekey_console_help>
            print("M> ");
    576c:	85 e2       	ldi	r24, 0x25	; 37
    576e:	9a e0       	ldi	r25, 0x0A	; 10
    5770:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
            command_state = MOUSEKEY;
    5774:	82 e0       	ldi	r24, 0x02	; 2
    5776:	80 93 51 03 	sts	0x0351, r24
    577a:	15 c0       	rjmp	.+42     	; 0x57a6 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    577c:	c9 32       	cpi	r28, 0x29	; 41
    577e:	59 f0       	breq	.+22     	; 0x5796 <command_proc+0x8e>
    5780:	c8 33       	cpi	r28, 0x38	; 56
    5782:	61 f4       	brne	.+24     	; 0x579c <command_proc+0x94>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    5784:	82 e3       	ldi	r24, 0x32	; 50
    5786:	9a e0       	ldi	r25, 0x0A	; 10
    5788:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    578c:	89 e2       	ldi	r24, 0x29	; 41
    578e:	9a e0       	ldi	r25, 0x0A	; 10
    5790:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    5794:	08 c0       	rjmp	.+16     	; 0x57a6 <command_proc+0x9e>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    5796:	10 92 51 03 	sts	0x0351, r1
    579a:	04 c1       	rjmp	.+520    	; 0x59a4 <command_proc+0x29c>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    579c:	83 e2       	ldi	r24, 0x23	; 35
    579e:	9a e0       	ldi	r25, 0x0A	; 10
    57a0:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    57a4:	ff c0       	rjmp	.+510    	; 0x59a4 <command_proc+0x29c>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    57a6:	81 e0       	ldi	r24, 0x01	; 1
    57a8:	81 70       	andi	r24, 0x01	; 1
    57aa:	fe c0       	rjmp	.+508    	; 0x59a8 <command_proc+0x2a0>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    57ac:	c4 32       	cpi	r28, 0x24	; 36
    57ae:	28 f5       	brcc	.+74     	; 0x57fa <command_proc+0xf2>
    57b0:	ce 31       	cpi	r28, 0x1E	; 30
    57b2:	08 f0       	brcs	.+2      	; 0x57b6 <command_proc+0xae>
    57b4:	c1 c0       	rjmp	.+386    	; 0x5938 <command_proc+0x230>
    57b6:	cb 30       	cpi	r28, 0x0B	; 11
    57b8:	a1 f1       	breq	.+104    	; 0x5822 <command_proc+0x11a>
    57ba:	d0 f4       	brcc	.+52     	; 0x57f0 <command_proc+0xe8>
    57bc:	c7 30       	cpi	r28, 0x07	; 7
    57be:	09 f0       	breq	.+2      	; 0x57c2 <command_proc+0xba>
    57c0:	d3 c0       	rjmp	.+422    	; 0x5968 <command_proc+0x260>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    57c2:	8e e1       	ldi	r24, 0x1E	; 30
    57c4:	80 93 28 01 	sts	0x0128, r24
            mk_interval = MOUSEKEY_INTERVAL;
    57c8:	82 e3       	ldi	r24, 0x32	; 50
    57ca:	80 93 27 01 	sts	0x0127, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    57ce:	8a e0       	ldi	r24, 0x0A	; 10
    57d0:	80 93 26 01 	sts	0x0126, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    57d4:	84 e1       	ldi	r24, 0x14	; 20
    57d6:	80 93 25 01 	sts	0x0125, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    57da:	88 e0       	ldi	r24, 0x08	; 8
    57dc:	80 93 24 01 	sts	0x0124, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    57e0:	88 e2       	ldi	r24, 0x28	; 40
    57e2:	80 93 23 01 	sts	0x0123, r24
            print("set default\n");
    57e6:	89 ec       	ldi	r24, 0xC9	; 201
    57e8:	98 e0       	ldi	r25, 0x08	; 8
    57ea:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    57ee:	bf c0       	rjmp	.+382    	; 0x596e <command_proc+0x266>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    57f0:	c3 31       	cpi	r28, 0x13	; 19
    57f2:	49 f1       	breq	.+82     	; 0x5846 <command_proc+0x13e>
    57f4:	c4 31       	cpi	r28, 0x14	; 20
    57f6:	c1 f0       	breq	.+48     	; 0x5828 <command_proc+0x120>
    57f8:	b7 c0       	rjmp	.+366    	; 0x5968 <command_proc+0x260>
    57fa:	cb 34       	cpi	r28, 0x4B	; 75
    57fc:	09 f4       	brne	.+2      	; 0x5800 <command_proc+0xf8>
    57fe:	a9 c0       	rjmp	.+338    	; 0x5952 <command_proc+0x24a>
    5800:	28 f4       	brcc	.+10     	; 0x580c <command_proc+0x104>
    5802:	c9 32       	cpi	r28, 0x29	; 41
    5804:	89 f0       	breq	.+34     	; 0x5828 <command_proc+0x120>
    5806:	c8 33       	cpi	r28, 0x38	; 56
    5808:	61 f0       	breq	.+24     	; 0x5822 <command_proc+0x11a>
    580a:	ae c0       	rjmp	.+348    	; 0x5968 <command_proc+0x260>
    580c:	c1 35       	cpi	r28, 0x51	; 81
    580e:	09 f4       	brne	.+2      	; 0x5812 <command_proc+0x10a>
    5810:	9e c0       	rjmp	.+316    	; 0x594e <command_proc+0x246>
    5812:	c2 35       	cpi	r28, 0x52	; 82
    5814:	09 f4       	brne	.+2      	; 0x5818 <command_proc+0x110>
    5816:	99 c0       	rjmp	.+306    	; 0x594a <command_proc+0x242>
    5818:	ce 34       	cpi	r28, 0x4E	; 78
    581a:	09 f0       	breq	.+2      	; 0x581e <command_proc+0x116>
    581c:	a5 c0       	rjmp	.+330    	; 0x5968 <command_proc+0x260>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    581e:	6a e0       	ldi	r22, 0x0A	; 10
    5820:	9e c0       	rjmp	.+316    	; 0x595e <command_proc+0x256>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5822:	0e 94 14 29 	call	0x5228	; 0x5228 <mousekey_console_help>
    5826:	a3 c0       	rjmp	.+326    	; 0x596e <command_proc+0x266>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    5828:	80 91 50 03 	lds	r24, 0x0350
    582c:	88 23       	and	r24, r24
    582e:	19 f0       	breq	.+6      	; 0x5836 <command_proc+0x12e>
                mousekey_param = 0;
    5830:	10 92 50 03 	sts	0x0350, r1
    5834:	9c c0       	rjmp	.+312    	; 0x596e <command_proc+0x266>
            } else {
                print("C> ");
    5836:	86 ed       	ldi	r24, 0xD6	; 214
    5838:	98 e0       	ldi	r25, 0x08	; 8
    583a:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
                command_state = CONSOLE;
    583e:	81 e0       	ldi	r24, 0x01	; 1
    5840:	80 93 51 03 	sts	0x0351, r24
    5844:	b1 c0       	rjmp	.+354    	; 0x59a8 <command_proc+0x2a0>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    5846:	80 eb       	ldi	r24, 0xB0	; 176
    5848:	98 e0       	ldi	r25, 0x08	; 8
    584a:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    584e:	8e e9       	ldi	r24, 0x9E	; 158
    5850:	98 e0       	ldi	r25, 0x08	; 8
    5852:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    5856:	80 91 28 01 	lds	r24, 0x0128
    585a:	1f 92       	push	r1
    585c:	8f 93       	push	r24
    585e:	8b e9       	ldi	r24, 0x9B	; 155
    5860:	98 e0       	ldi	r25, 0x08	; 8
    5862:	9f 93       	push	r25
    5864:	8f 93       	push	r24
    5866:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    586a:	89 e9       	ldi	r24, 0x99	; 153
    586c:	98 e0       	ldi	r25, 0x08	; 8
    586e:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5872:	87 e8       	ldi	r24, 0x87	; 135
    5874:	98 e0       	ldi	r25, 0x08	; 8
    5876:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    587a:	80 91 27 01 	lds	r24, 0x0127
    587e:	1f 92       	push	r1
    5880:	8f 93       	push	r24
    5882:	84 e8       	ldi	r24, 0x84	; 132
    5884:	98 e0       	ldi	r25, 0x08	; 8
    5886:	9f 93       	push	r25
    5888:	8f 93       	push	r24
    588a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    588e:	82 e8       	ldi	r24, 0x82	; 130
    5890:	98 e0       	ldi	r25, 0x08	; 8
    5892:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    5896:	83 e7       	ldi	r24, 0x73	; 115
    5898:	98 e0       	ldi	r25, 0x08	; 8
    589a:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    589e:	80 91 26 01 	lds	r24, 0x0126
    58a2:	1f 92       	push	r1
    58a4:	8f 93       	push	r24
    58a6:	80 e7       	ldi	r24, 0x70	; 112
    58a8:	98 e0       	ldi	r25, 0x08	; 8
    58aa:	9f 93       	push	r25
    58ac:	8f 93       	push	r24
    58ae:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    58b2:	8e e6       	ldi	r24, 0x6E	; 110
    58b4:	98 e0       	ldi	r25, 0x08	; 8
    58b6:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    58ba:	8d e5       	ldi	r24, 0x5D	; 93
    58bc:	98 e0       	ldi	r25, 0x08	; 8
    58be:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    58c2:	80 91 25 01 	lds	r24, 0x0125
    58c6:	1f 92       	push	r1
    58c8:	8f 93       	push	r24
    58ca:	8a e5       	ldi	r24, 0x5A	; 90
    58cc:	98 e0       	ldi	r25, 0x08	; 8
    58ce:	9f 93       	push	r25
    58d0:	8f 93       	push	r24
    58d2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    58d6:	88 e5       	ldi	r24, 0x58	; 88
    58d8:	98 e0       	ldi	r25, 0x08	; 8
    58da:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    58de:	83 e4       	ldi	r24, 0x43	; 67
    58e0:	98 e0       	ldi	r25, 0x08	; 8
    58e2:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    58e6:	80 91 24 01 	lds	r24, 0x0124
    58ea:	1f 92       	push	r1
    58ec:	8f 93       	push	r24
    58ee:	80 e4       	ldi	r24, 0x40	; 64
    58f0:	98 e0       	ldi	r25, 0x08	; 8
    58f2:	9f 93       	push	r25
    58f4:	8f 93       	push	r24
    58f6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    58fa:	8e e3       	ldi	r24, 0x3E	; 62
    58fc:	98 e0       	ldi	r25, 0x08	; 8
    58fe:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5902:	87 e2       	ldi	r24, 0x27	; 39
    5904:	98 e0       	ldi	r25, 0x08	; 8
    5906:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    590a:	80 91 23 01 	lds	r24, 0x0123
    590e:	1f 92       	push	r1
    5910:	8f 93       	push	r24
    5912:	84 e2       	ldi	r24, 0x24	; 36
    5914:	98 e0       	ldi	r25, 0x08	; 8
    5916:	9f 93       	push	r25
    5918:	8f 93       	push	r24
    591a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    591e:	82 e2       	ldi	r24, 0x22	; 34
    5920:	98 e0       	ldi	r25, 0x08	; 8
    5922:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
    5926:	8d b7       	in	r24, 0x3d	; 61
    5928:	9e b7       	in	r25, 0x3e	; 62
    592a:	48 96       	adiw	r24, 0x18	; 24
    592c:	0f b6       	in	r0, 0x3f	; 63
    592e:	f8 94       	cli
    5930:	9e bf       	out	0x3e, r25	; 62
    5932:	0f be       	out	0x3f, r0	; 63
    5934:	8d bf       	out	0x3d, r24	; 61
    5936:	1b c0       	rjmp	.+54     	; 0x596e <command_proc+0x266>
    5938:	ce 51       	subi	r28, 0x1E	; 30
    593a:	ec 2f       	mov	r30, r28
    593c:	f0 e0       	ldi	r31, 0x00	; 0
    593e:	e0 57       	subi	r30, 0x70	; 112
    5940:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    5942:	80 81       	ld	r24, Z
    5944:	80 93 50 03 	sts	0x0350, r24
    5948:	12 c0       	rjmp	.+36     	; 0x596e <command_proc+0x266>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    594a:	61 e0       	ldi	r22, 0x01	; 1
    594c:	03 c0       	rjmp	.+6      	; 0x5954 <command_proc+0x24c>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    594e:	61 e0       	ldi	r22, 0x01	; 1
    5950:	06 c0       	rjmp	.+12     	; 0x595e <command_proc+0x256>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5952:	6a e0       	ldi	r22, 0x0A	; 10
    5954:	80 91 50 03 	lds	r24, 0x0350
    5958:	0e 94 2b 29 	call	0x5256	; 0x5256 <mousekey_param_inc>
    595c:	08 c0       	rjmp	.+16     	; 0x596e <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    595e:	80 91 50 03 	lds	r24, 0x0350
    5962:	0e 94 ce 29 	call	0x539c	; 0x539c <mousekey_param_dec>
    5966:	03 c0       	rjmp	.+6      	; 0x596e <command_proc+0x266>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    5968:	87 ec       	ldi	r24, 0xC7	; 199
    596a:	98 e0       	ldi	r25, 0x08	; 8
    596c:	13 c0       	rjmp	.+38     	; 0x5994 <command_proc+0x28c>
            return false;
    }
    if (mousekey_param) {
    596e:	80 91 50 03 	lds	r24, 0x0350
    5972:	88 23       	and	r24, r24
    5974:	69 f0       	breq	.+26     	; 0x5990 <command_proc+0x288>
        xprintf("M%d> ", mousekey_param);
    5976:	1f 92       	push	r1
    5978:	8f 93       	push	r24
    597a:	81 ec       	ldi	r24, 0xC1	; 193
    597c:	98 e0       	ldi	r25, 0x08	; 8
    597e:	9f 93       	push	r25
    5980:	8f 93       	push	r24
    5982:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__xprintf>
    5986:	0f 90       	pop	r0
    5988:	0f 90       	pop	r0
    598a:	0f 90       	pop	r0
    598c:	0f 90       	pop	r0
    598e:	04 c0       	rjmp	.+8      	; 0x5998 <command_proc+0x290>
    } else {
        print("M>" );
    5990:	8e eb       	ldi	r24, 0xBE	; 190
    5992:	98 e0       	ldi	r25, 0x08	; 8
    5994:	0e 94 f4 06 	call	0xde8	; 0xde8 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    5998:	81 e0       	ldi	r24, 0x01	; 1
    599a:	06 c0       	rjmp	.+12     	; 0x59a8 <command_proc+0x2a0>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    599c:	10 92 51 03 	sts	0x0351, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    59a0:	80 e0       	ldi	r24, 0x00	; 0
    59a2:	02 c0       	rjmp	.+4      	; 0x59a8 <command_proc+0x2a0>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    59a4:	80 e0       	ldi	r24, 0x00	; 0
    59a6:	00 cf       	rjmp	.-512    	; 0x57a8 <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    59a8:	cf 91       	pop	r28
    59aa:	08 95       	ret

000059ac <__fixsfsi>:
    59ac:	04 d0       	rcall	.+8      	; 0x59b6 <__fixunssfsi>
    59ae:	68 94       	set
    59b0:	b1 11       	cpse	r27, r1
    59b2:	8d c0       	rjmp	.+282    	; 0x5ace <__fp_szero>
    59b4:	08 95       	ret

000059b6 <__fixunssfsi>:
    59b6:	70 d0       	rcall	.+224    	; 0x5a98 <__fp_splitA>
    59b8:	88 f0       	brcs	.+34     	; 0x59dc <__fixunssfsi+0x26>
    59ba:	9f 57       	subi	r25, 0x7F	; 127
    59bc:	90 f0       	brcs	.+36     	; 0x59e2 <__fixunssfsi+0x2c>
    59be:	b9 2f       	mov	r27, r25
    59c0:	99 27       	eor	r25, r25
    59c2:	b7 51       	subi	r27, 0x17	; 23
    59c4:	a0 f0       	brcs	.+40     	; 0x59ee <__fixunssfsi+0x38>
    59c6:	d1 f0       	breq	.+52     	; 0x59fc <__fixunssfsi+0x46>
    59c8:	66 0f       	add	r22, r22
    59ca:	77 1f       	adc	r23, r23
    59cc:	88 1f       	adc	r24, r24
    59ce:	99 1f       	adc	r25, r25
    59d0:	1a f0       	brmi	.+6      	; 0x59d8 <__fixunssfsi+0x22>
    59d2:	ba 95       	dec	r27
    59d4:	c9 f7       	brne	.-14     	; 0x59c8 <__fixunssfsi+0x12>
    59d6:	12 c0       	rjmp	.+36     	; 0x59fc <__fixunssfsi+0x46>
    59d8:	b1 30       	cpi	r27, 0x01	; 1
    59da:	81 f0       	breq	.+32     	; 0x59fc <__fixunssfsi+0x46>
    59dc:	77 d0       	rcall	.+238    	; 0x5acc <__fp_zero>
    59de:	b1 e0       	ldi	r27, 0x01	; 1
    59e0:	08 95       	ret
    59e2:	74 c0       	rjmp	.+232    	; 0x5acc <__fp_zero>
    59e4:	67 2f       	mov	r22, r23
    59e6:	78 2f       	mov	r23, r24
    59e8:	88 27       	eor	r24, r24
    59ea:	b8 5f       	subi	r27, 0xF8	; 248
    59ec:	39 f0       	breq	.+14     	; 0x59fc <__fixunssfsi+0x46>
    59ee:	b9 3f       	cpi	r27, 0xF9	; 249
    59f0:	cc f3       	brlt	.-14     	; 0x59e4 <__fixunssfsi+0x2e>
    59f2:	86 95       	lsr	r24
    59f4:	77 95       	ror	r23
    59f6:	67 95       	ror	r22
    59f8:	b3 95       	inc	r27
    59fa:	d9 f7       	brne	.-10     	; 0x59f2 <__fixunssfsi+0x3c>
    59fc:	3e f4       	brtc	.+14     	; 0x5a0c <__fixunssfsi+0x56>
    59fe:	90 95       	com	r25
    5a00:	80 95       	com	r24
    5a02:	70 95       	com	r23
    5a04:	61 95       	neg	r22
    5a06:	7f 4f       	sbci	r23, 0xFF	; 255
    5a08:	8f 4f       	sbci	r24, 0xFF	; 255
    5a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a0c:	08 95       	ret

00005a0e <__floatunsisf>:
    5a0e:	e8 94       	clt
    5a10:	09 c0       	rjmp	.+18     	; 0x5a24 <__floatsisf+0x12>

00005a12 <__floatsisf>:
    5a12:	97 fb       	bst	r25, 7
    5a14:	3e f4       	brtc	.+14     	; 0x5a24 <__floatsisf+0x12>
    5a16:	90 95       	com	r25
    5a18:	80 95       	com	r24
    5a1a:	70 95       	com	r23
    5a1c:	61 95       	neg	r22
    5a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a20:	8f 4f       	sbci	r24, 0xFF	; 255
    5a22:	9f 4f       	sbci	r25, 0xFF	; 255
    5a24:	99 23       	and	r25, r25
    5a26:	a9 f0       	breq	.+42     	; 0x5a52 <__floatsisf+0x40>
    5a28:	f9 2f       	mov	r31, r25
    5a2a:	96 e9       	ldi	r25, 0x96	; 150
    5a2c:	bb 27       	eor	r27, r27
    5a2e:	93 95       	inc	r25
    5a30:	f6 95       	lsr	r31
    5a32:	87 95       	ror	r24
    5a34:	77 95       	ror	r23
    5a36:	67 95       	ror	r22
    5a38:	b7 95       	ror	r27
    5a3a:	f1 11       	cpse	r31, r1
    5a3c:	f8 cf       	rjmp	.-16     	; 0x5a2e <__floatsisf+0x1c>
    5a3e:	fa f4       	brpl	.+62     	; 0x5a7e <__floatsisf+0x6c>
    5a40:	bb 0f       	add	r27, r27
    5a42:	11 f4       	brne	.+4      	; 0x5a48 <__floatsisf+0x36>
    5a44:	60 ff       	sbrs	r22, 0
    5a46:	1b c0       	rjmp	.+54     	; 0x5a7e <__floatsisf+0x6c>
    5a48:	6f 5f       	subi	r22, 0xFF	; 255
    5a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a4c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a50:	16 c0       	rjmp	.+44     	; 0x5a7e <__floatsisf+0x6c>
    5a52:	88 23       	and	r24, r24
    5a54:	11 f0       	breq	.+4      	; 0x5a5a <__floatsisf+0x48>
    5a56:	96 e9       	ldi	r25, 0x96	; 150
    5a58:	11 c0       	rjmp	.+34     	; 0x5a7c <__floatsisf+0x6a>
    5a5a:	77 23       	and	r23, r23
    5a5c:	21 f0       	breq	.+8      	; 0x5a66 <__floatsisf+0x54>
    5a5e:	9e e8       	ldi	r25, 0x8E	; 142
    5a60:	87 2f       	mov	r24, r23
    5a62:	76 2f       	mov	r23, r22
    5a64:	05 c0       	rjmp	.+10     	; 0x5a70 <__floatsisf+0x5e>
    5a66:	66 23       	and	r22, r22
    5a68:	71 f0       	breq	.+28     	; 0x5a86 <__floatsisf+0x74>
    5a6a:	96 e8       	ldi	r25, 0x86	; 134
    5a6c:	86 2f       	mov	r24, r22
    5a6e:	70 e0       	ldi	r23, 0x00	; 0
    5a70:	60 e0       	ldi	r22, 0x00	; 0
    5a72:	2a f0       	brmi	.+10     	; 0x5a7e <__floatsisf+0x6c>
    5a74:	9a 95       	dec	r25
    5a76:	66 0f       	add	r22, r22
    5a78:	77 1f       	adc	r23, r23
    5a7a:	88 1f       	adc	r24, r24
    5a7c:	da f7       	brpl	.-10     	; 0x5a74 <__floatsisf+0x62>
    5a7e:	88 0f       	add	r24, r24
    5a80:	96 95       	lsr	r25
    5a82:	87 95       	ror	r24
    5a84:	97 f9       	bld	r25, 7
    5a86:	08 95       	ret

00005a88 <__fp_split3>:
    5a88:	57 fd       	sbrc	r21, 7
    5a8a:	90 58       	subi	r25, 0x80	; 128
    5a8c:	44 0f       	add	r20, r20
    5a8e:	55 1f       	adc	r21, r21
    5a90:	59 f0       	breq	.+22     	; 0x5aa8 <__fp_splitA+0x10>
    5a92:	5f 3f       	cpi	r21, 0xFF	; 255
    5a94:	71 f0       	breq	.+28     	; 0x5ab2 <__fp_splitA+0x1a>
    5a96:	47 95       	ror	r20

00005a98 <__fp_splitA>:
    5a98:	88 0f       	add	r24, r24
    5a9a:	97 fb       	bst	r25, 7
    5a9c:	99 1f       	adc	r25, r25
    5a9e:	61 f0       	breq	.+24     	; 0x5ab8 <__fp_splitA+0x20>
    5aa0:	9f 3f       	cpi	r25, 0xFF	; 255
    5aa2:	79 f0       	breq	.+30     	; 0x5ac2 <__fp_splitA+0x2a>
    5aa4:	87 95       	ror	r24
    5aa6:	08 95       	ret
    5aa8:	12 16       	cp	r1, r18
    5aaa:	13 06       	cpc	r1, r19
    5aac:	14 06       	cpc	r1, r20
    5aae:	55 1f       	adc	r21, r21
    5ab0:	f2 cf       	rjmp	.-28     	; 0x5a96 <__fp_split3+0xe>
    5ab2:	46 95       	lsr	r20
    5ab4:	f1 df       	rcall	.-30     	; 0x5a98 <__fp_splitA>
    5ab6:	08 c0       	rjmp	.+16     	; 0x5ac8 <__fp_splitA+0x30>
    5ab8:	16 16       	cp	r1, r22
    5aba:	17 06       	cpc	r1, r23
    5abc:	18 06       	cpc	r1, r24
    5abe:	99 1f       	adc	r25, r25
    5ac0:	f1 cf       	rjmp	.-30     	; 0x5aa4 <__fp_splitA+0xc>
    5ac2:	86 95       	lsr	r24
    5ac4:	71 05       	cpc	r23, r1
    5ac6:	61 05       	cpc	r22, r1
    5ac8:	08 94       	sec
    5aca:	08 95       	ret

00005acc <__fp_zero>:
    5acc:	e8 94       	clt

00005ace <__fp_szero>:
    5ace:	bb 27       	eor	r27, r27
    5ad0:	66 27       	eor	r22, r22
    5ad2:	77 27       	eor	r23, r23
    5ad4:	cb 01       	movw	r24, r22
    5ad6:	97 f9       	bld	r25, 7
    5ad8:	08 95       	ret

00005ada <__mulsf3>:
    5ada:	0b d0       	rcall	.+22     	; 0x5af2 <__mulsf3x>
    5adc:	78 c0       	rjmp	.+240    	; 0x5bce <__fp_round>
    5ade:	69 d0       	rcall	.+210    	; 0x5bb2 <__fp_pscA>
    5ae0:	28 f0       	brcs	.+10     	; 0x5aec <__mulsf3+0x12>
    5ae2:	6e d0       	rcall	.+220    	; 0x5bc0 <__fp_pscB>
    5ae4:	18 f0       	brcs	.+6      	; 0x5aec <__mulsf3+0x12>
    5ae6:	95 23       	and	r25, r21
    5ae8:	09 f0       	breq	.+2      	; 0x5aec <__mulsf3+0x12>
    5aea:	5a c0       	rjmp	.+180    	; 0x5ba0 <__fp_inf>
    5aec:	5f c0       	rjmp	.+190    	; 0x5bac <__fp_nan>
    5aee:	11 24       	eor	r1, r1
    5af0:	ee cf       	rjmp	.-36     	; 0x5ace <__fp_szero>

00005af2 <__mulsf3x>:
    5af2:	ca df       	rcall	.-108    	; 0x5a88 <__fp_split3>
    5af4:	a0 f3       	brcs	.-24     	; 0x5ade <__mulsf3+0x4>

00005af6 <__mulsf3_pse>:
    5af6:	95 9f       	mul	r25, r21
    5af8:	d1 f3       	breq	.-12     	; 0x5aee <__mulsf3+0x14>
    5afa:	95 0f       	add	r25, r21
    5afc:	50 e0       	ldi	r21, 0x00	; 0
    5afe:	55 1f       	adc	r21, r21
    5b00:	62 9f       	mul	r22, r18
    5b02:	f0 01       	movw	r30, r0
    5b04:	72 9f       	mul	r23, r18
    5b06:	bb 27       	eor	r27, r27
    5b08:	f0 0d       	add	r31, r0
    5b0a:	b1 1d       	adc	r27, r1
    5b0c:	63 9f       	mul	r22, r19
    5b0e:	aa 27       	eor	r26, r26
    5b10:	f0 0d       	add	r31, r0
    5b12:	b1 1d       	adc	r27, r1
    5b14:	aa 1f       	adc	r26, r26
    5b16:	64 9f       	mul	r22, r20
    5b18:	66 27       	eor	r22, r22
    5b1a:	b0 0d       	add	r27, r0
    5b1c:	a1 1d       	adc	r26, r1
    5b1e:	66 1f       	adc	r22, r22
    5b20:	82 9f       	mul	r24, r18
    5b22:	22 27       	eor	r18, r18
    5b24:	b0 0d       	add	r27, r0
    5b26:	a1 1d       	adc	r26, r1
    5b28:	62 1f       	adc	r22, r18
    5b2a:	73 9f       	mul	r23, r19
    5b2c:	b0 0d       	add	r27, r0
    5b2e:	a1 1d       	adc	r26, r1
    5b30:	62 1f       	adc	r22, r18
    5b32:	83 9f       	mul	r24, r19
    5b34:	a0 0d       	add	r26, r0
    5b36:	61 1d       	adc	r22, r1
    5b38:	22 1f       	adc	r18, r18
    5b3a:	74 9f       	mul	r23, r20
    5b3c:	33 27       	eor	r19, r19
    5b3e:	a0 0d       	add	r26, r0
    5b40:	61 1d       	adc	r22, r1
    5b42:	23 1f       	adc	r18, r19
    5b44:	84 9f       	mul	r24, r20
    5b46:	60 0d       	add	r22, r0
    5b48:	21 1d       	adc	r18, r1
    5b4a:	82 2f       	mov	r24, r18
    5b4c:	76 2f       	mov	r23, r22
    5b4e:	6a 2f       	mov	r22, r26
    5b50:	11 24       	eor	r1, r1
    5b52:	9f 57       	subi	r25, 0x7F	; 127
    5b54:	50 40       	sbci	r21, 0x00	; 0
    5b56:	8a f0       	brmi	.+34     	; 0x5b7a <__mulsf3_pse+0x84>
    5b58:	e1 f0       	breq	.+56     	; 0x5b92 <__mulsf3_pse+0x9c>
    5b5a:	88 23       	and	r24, r24
    5b5c:	4a f0       	brmi	.+18     	; 0x5b70 <__mulsf3_pse+0x7a>
    5b5e:	ee 0f       	add	r30, r30
    5b60:	ff 1f       	adc	r31, r31
    5b62:	bb 1f       	adc	r27, r27
    5b64:	66 1f       	adc	r22, r22
    5b66:	77 1f       	adc	r23, r23
    5b68:	88 1f       	adc	r24, r24
    5b6a:	91 50       	subi	r25, 0x01	; 1
    5b6c:	50 40       	sbci	r21, 0x00	; 0
    5b6e:	a9 f7       	brne	.-22     	; 0x5b5a <__mulsf3_pse+0x64>
    5b70:	9e 3f       	cpi	r25, 0xFE	; 254
    5b72:	51 05       	cpc	r21, r1
    5b74:	70 f0       	brcs	.+28     	; 0x5b92 <__mulsf3_pse+0x9c>
    5b76:	14 c0       	rjmp	.+40     	; 0x5ba0 <__fp_inf>
    5b78:	aa cf       	rjmp	.-172    	; 0x5ace <__fp_szero>
    5b7a:	5f 3f       	cpi	r21, 0xFF	; 255
    5b7c:	ec f3       	brlt	.-6      	; 0x5b78 <__mulsf3_pse+0x82>
    5b7e:	98 3e       	cpi	r25, 0xE8	; 232
    5b80:	dc f3       	brlt	.-10     	; 0x5b78 <__mulsf3_pse+0x82>
    5b82:	86 95       	lsr	r24
    5b84:	77 95       	ror	r23
    5b86:	67 95       	ror	r22
    5b88:	b7 95       	ror	r27
    5b8a:	f7 95       	ror	r31
    5b8c:	e7 95       	ror	r30
    5b8e:	9f 5f       	subi	r25, 0xFF	; 255
    5b90:	c1 f7       	brne	.-16     	; 0x5b82 <__mulsf3_pse+0x8c>
    5b92:	fe 2b       	or	r31, r30
    5b94:	88 0f       	add	r24, r24
    5b96:	91 1d       	adc	r25, r1
    5b98:	96 95       	lsr	r25
    5b9a:	87 95       	ror	r24
    5b9c:	97 f9       	bld	r25, 7
    5b9e:	08 95       	ret

00005ba0 <__fp_inf>:
    5ba0:	97 f9       	bld	r25, 7
    5ba2:	9f 67       	ori	r25, 0x7F	; 127
    5ba4:	80 e8       	ldi	r24, 0x80	; 128
    5ba6:	70 e0       	ldi	r23, 0x00	; 0
    5ba8:	60 e0       	ldi	r22, 0x00	; 0
    5baa:	08 95       	ret

00005bac <__fp_nan>:
    5bac:	9f ef       	ldi	r25, 0xFF	; 255
    5bae:	80 ec       	ldi	r24, 0xC0	; 192
    5bb0:	08 95       	ret

00005bb2 <__fp_pscA>:
    5bb2:	00 24       	eor	r0, r0
    5bb4:	0a 94       	dec	r0
    5bb6:	16 16       	cp	r1, r22
    5bb8:	17 06       	cpc	r1, r23
    5bba:	18 06       	cpc	r1, r24
    5bbc:	09 06       	cpc	r0, r25
    5bbe:	08 95       	ret

00005bc0 <__fp_pscB>:
    5bc0:	00 24       	eor	r0, r0
    5bc2:	0a 94       	dec	r0
    5bc4:	12 16       	cp	r1, r18
    5bc6:	13 06       	cpc	r1, r19
    5bc8:	14 06       	cpc	r1, r20
    5bca:	05 06       	cpc	r0, r21
    5bcc:	08 95       	ret

00005bce <__fp_round>:
    5bce:	09 2e       	mov	r0, r25
    5bd0:	03 94       	inc	r0
    5bd2:	00 0c       	add	r0, r0
    5bd4:	11 f4       	brne	.+4      	; 0x5bda <__fp_round+0xc>
    5bd6:	88 23       	and	r24, r24
    5bd8:	52 f0       	brmi	.+20     	; 0x5bee <__fp_round+0x20>
    5bda:	bb 0f       	add	r27, r27
    5bdc:	40 f4       	brcc	.+16     	; 0x5bee <__fp_round+0x20>
    5bde:	bf 2b       	or	r27, r31
    5be0:	11 f4       	brne	.+4      	; 0x5be6 <__fp_round+0x18>
    5be2:	60 ff       	sbrs	r22, 0
    5be4:	04 c0       	rjmp	.+8      	; 0x5bee <__fp_round+0x20>
    5be6:	6f 5f       	subi	r22, 0xFF	; 255
    5be8:	7f 4f       	sbci	r23, 0xFF	; 255
    5bea:	8f 4f       	sbci	r24, 0xFF	; 255
    5bec:	9f 4f       	sbci	r25, 0xFF	; 255
    5bee:	08 95       	ret

00005bf0 <__udivmodqi4>:
    5bf0:	99 1b       	sub	r25, r25
    5bf2:	79 e0       	ldi	r23, 0x09	; 9
    5bf4:	04 c0       	rjmp	.+8      	; 0x5bfe <__udivmodqi4_ep>

00005bf6 <__udivmodqi4_loop>:
    5bf6:	99 1f       	adc	r25, r25
    5bf8:	96 17       	cp	r25, r22
    5bfa:	08 f0       	brcs	.+2      	; 0x5bfe <__udivmodqi4_ep>
    5bfc:	96 1b       	sub	r25, r22

00005bfe <__udivmodqi4_ep>:
    5bfe:	88 1f       	adc	r24, r24
    5c00:	7a 95       	dec	r23
    5c02:	c9 f7       	brne	.-14     	; 0x5bf6 <__udivmodqi4_loop>
    5c04:	80 95       	com	r24
    5c06:	08 95       	ret

00005c08 <__udivmodhi4>:
    5c08:	aa 1b       	sub	r26, r26
    5c0a:	bb 1b       	sub	r27, r27
    5c0c:	51 e1       	ldi	r21, 0x11	; 17
    5c0e:	07 c0       	rjmp	.+14     	; 0x5c1e <__udivmodhi4_ep>

00005c10 <__udivmodhi4_loop>:
    5c10:	aa 1f       	adc	r26, r26
    5c12:	bb 1f       	adc	r27, r27
    5c14:	a6 17       	cp	r26, r22
    5c16:	b7 07       	cpc	r27, r23
    5c18:	10 f0       	brcs	.+4      	; 0x5c1e <__udivmodhi4_ep>
    5c1a:	a6 1b       	sub	r26, r22
    5c1c:	b7 0b       	sbc	r27, r23

00005c1e <__udivmodhi4_ep>:
    5c1e:	88 1f       	adc	r24, r24
    5c20:	99 1f       	adc	r25, r25
    5c22:	5a 95       	dec	r21
    5c24:	a9 f7       	brne	.-22     	; 0x5c10 <__udivmodhi4_loop>
    5c26:	80 95       	com	r24
    5c28:	90 95       	com	r25
    5c2a:	bc 01       	movw	r22, r24
    5c2c:	cd 01       	movw	r24, r26
    5c2e:	08 95       	ret

00005c30 <__divmodhi4>:
    5c30:	97 fb       	bst	r25, 7
    5c32:	07 2e       	mov	r0, r23
    5c34:	16 f4       	brtc	.+4      	; 0x5c3a <__divmodhi4+0xa>
    5c36:	00 94       	com	r0
    5c38:	07 d0       	rcall	.+14     	; 0x5c48 <__divmodhi4_neg1>
    5c3a:	77 fd       	sbrc	r23, 7
    5c3c:	09 d0       	rcall	.+18     	; 0x5c50 <__divmodhi4_neg2>
    5c3e:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <__udivmodhi4>
    5c42:	07 fc       	sbrc	r0, 7
    5c44:	05 d0       	rcall	.+10     	; 0x5c50 <__divmodhi4_neg2>
    5c46:	3e f4       	brtc	.+14     	; 0x5c56 <__divmodhi4_exit>

00005c48 <__divmodhi4_neg1>:
    5c48:	90 95       	com	r25
    5c4a:	81 95       	neg	r24
    5c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4e:	08 95       	ret

00005c50 <__divmodhi4_neg2>:
    5c50:	70 95       	com	r23
    5c52:	61 95       	neg	r22
    5c54:	7f 4f       	sbci	r23, 0xFF	; 255

00005c56 <__divmodhi4_exit>:
    5c56:	08 95       	ret

00005c58 <__udivmodsi4>:
    5c58:	a1 e2       	ldi	r26, 0x21	; 33
    5c5a:	1a 2e       	mov	r1, r26
    5c5c:	aa 1b       	sub	r26, r26
    5c5e:	bb 1b       	sub	r27, r27
    5c60:	fd 01       	movw	r30, r26
    5c62:	0d c0       	rjmp	.+26     	; 0x5c7e <__udivmodsi4_ep>

00005c64 <__udivmodsi4_loop>:
    5c64:	aa 1f       	adc	r26, r26
    5c66:	bb 1f       	adc	r27, r27
    5c68:	ee 1f       	adc	r30, r30
    5c6a:	ff 1f       	adc	r31, r31
    5c6c:	a2 17       	cp	r26, r18
    5c6e:	b3 07       	cpc	r27, r19
    5c70:	e4 07       	cpc	r30, r20
    5c72:	f5 07       	cpc	r31, r21
    5c74:	20 f0       	brcs	.+8      	; 0x5c7e <__udivmodsi4_ep>
    5c76:	a2 1b       	sub	r26, r18
    5c78:	b3 0b       	sbc	r27, r19
    5c7a:	e4 0b       	sbc	r30, r20
    5c7c:	f5 0b       	sbc	r31, r21

00005c7e <__udivmodsi4_ep>:
    5c7e:	66 1f       	adc	r22, r22
    5c80:	77 1f       	adc	r23, r23
    5c82:	88 1f       	adc	r24, r24
    5c84:	99 1f       	adc	r25, r25
    5c86:	1a 94       	dec	r1
    5c88:	69 f7       	brne	.-38     	; 0x5c64 <__udivmodsi4_loop>
    5c8a:	60 95       	com	r22
    5c8c:	70 95       	com	r23
    5c8e:	80 95       	com	r24
    5c90:	90 95       	com	r25
    5c92:	9b 01       	movw	r18, r22
    5c94:	ac 01       	movw	r20, r24
    5c96:	bd 01       	movw	r22, r26
    5c98:	cf 01       	movw	r24, r30
    5c9a:	08 95       	ret

00005c9c <__tablejump2__>:
    5c9c:	ee 0f       	add	r30, r30
    5c9e:	ff 1f       	adc	r31, r31

00005ca0 <__tablejump__>:
    5ca0:	05 90       	lpm	r0, Z+
    5ca2:	f4 91       	lpm	r31, Z
    5ca4:	e0 2d       	mov	r30, r0
    5ca6:	09 94       	ijmp

00005ca8 <_exit>:
    5ca8:	f8 94       	cli

00005caa <__stop_program>:
    5caa:	ff cf       	rjmp	.-2      	; 0x5caa <__stop_program>
